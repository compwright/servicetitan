<?php
/**
 * PaymentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CompWright\ServiceTitan\ApiException;
use CompWright\ServiceTitan\Configuration;
use CompWright\ServiceTitan\HeaderSelector;
use CompWright\ServiceTitan\ObjectSerializer;

/**
 * PaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'paymentsCreate' => [
            'application/json',
        ],
        'paymentsGetList' => [
            'application/json',
        ],
        'paymentsUpdate' => [
            'application/json',
        ],
        'paymentsUpdateCustomFields' => [
            'application/json',
        ],
        'paymentsUpdateStatus' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation paymentsCreate
     *
     * Creates new payment
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentCreateRequest $accounting_v2_payment_create_request accounting_v2_payment_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsCreate'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\AccountingV2PaymentResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function paymentsCreate($tenant, $accounting_v2_payment_create_request = null, string $contentType = self::contentTypes['paymentsCreate'][0])
    {
        list($response) = $this->paymentsCreateWithHttpInfo($tenant, $accounting_v2_payment_create_request, $contentType);
        return $response;
    }

    /**
     * Operation paymentsCreateWithHttpInfo
     *
     * Creates new payment
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentCreateRequest $accounting_v2_payment_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsCreate'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\AccountingV2PaymentResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsCreateWithHttpInfo($tenant, $accounting_v2_payment_create_request = null, string $contentType = self::contentTypes['paymentsCreate'][0])
    {
        $request = $this->paymentsCreateRequest($tenant, $accounting_v2_payment_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentsCreateAsync
     *
     * Creates new payment
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentCreateRequest $accounting_v2_payment_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsCreateAsync($tenant, $accounting_v2_payment_create_request = null, string $contentType = self::contentTypes['paymentsCreate'][0])
    {
        return $this->paymentsCreateAsyncWithHttpInfo($tenant, $accounting_v2_payment_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsCreateAsyncWithHttpInfo
     *
     * Creates new payment
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentCreateRequest $accounting_v2_payment_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsCreateAsyncWithHttpInfo($tenant, $accounting_v2_payment_create_request = null, string $contentType = self::contentTypes['paymentsCreate'][0])
    {
        $returnType = '\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse';
        $request = $this->paymentsCreateRequest($tenant, $accounting_v2_payment_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsCreate'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentCreateRequest $accounting_v2_payment_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsCreateRequest($tenant, $accounting_v2_payment_create_request = null, string $contentType = self::contentTypes['paymentsCreate'][0])
    {

        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling paymentsCreate'
            );
        }



        $resourcePath = '/accounting/v2/tenant/{tenant}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accounting_v2_payment_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accounting_v2_payment_create_request));
            } else {
                $httpBody = $accounting_v2_payment_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsGetList
     *
     * Gets a paginated list of payments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids ids (optional)
     * @param  string $statuses statuses (optional)
     * @param  \DateTime $paid_on_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $paid_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $business_unit_ids business_unit_ids (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  string $transaction_type Values: [Undefined, JournalEntry, ReceivePayment] (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  bool $include_total include_total (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  string $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsGetList'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2DetailedPaymentResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function paymentsGetList($tenant, $ids = null, $statuses = null, $paid_on_after = null, $paid_on_before = null, $business_unit_ids = null, $batch_number = null, $batch_id = null, $transaction_type = null, $customer_id = null, $page = null, $page_size = null, $include_total = null, $custom_field_fields = null, $custom_field_operator = null, $modified_before = null, $modified_on_or_after = null, $created_before = null, $created_on_or_after = null, string $contentType = self::contentTypes['paymentsGetList'][0])
    {
        list($response) = $this->paymentsGetListWithHttpInfo($tenant, $ids, $statuses, $paid_on_after, $paid_on_before, $business_unit_ids, $batch_number, $batch_id, $transaction_type, $customer_id, $page, $page_size, $include_total, $custom_field_fields, $custom_field_operator, $modified_before, $modified_on_or_after, $created_before, $created_on_or_after, $contentType);
        return $response;
    }

    /**
     * Operation paymentsGetListWithHttpInfo
     *
     * Gets a paginated list of payments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids (optional)
     * @param  string $statuses (optional)
     * @param  \DateTime $paid_on_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $paid_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $business_unit_ids (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  string $transaction_type Values: [Undefined, JournalEntry, ReceivePayment] (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  bool $include_total (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  string $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsGetList'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2DetailedPaymentResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsGetListWithHttpInfo($tenant, $ids = null, $statuses = null, $paid_on_after = null, $paid_on_before = null, $business_unit_ids = null, $batch_number = null, $batch_id = null, $transaction_type = null, $customer_id = null, $page = null, $page_size = null, $include_total = null, $custom_field_fields = null, $custom_field_operator = null, $modified_before = null, $modified_on_or_after = null, $created_before = null, $created_on_or_after = null, string $contentType = self::contentTypes['paymentsGetList'][0])
    {
        $request = $this->paymentsGetListRequest($tenant, $ids, $statuses, $paid_on_after, $paid_on_before, $business_unit_ids, $batch_number, $batch_id, $transaction_type, $customer_id, $page, $page_size, $include_total, $custom_field_fields, $custom_field_operator, $modified_before, $modified_on_or_after, $created_before, $created_on_or_after, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2DetailedPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2DetailedPaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2DetailedPaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2DetailedPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2DetailedPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentsGetListAsync
     *
     * Gets a paginated list of payments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids (optional)
     * @param  string $statuses (optional)
     * @param  \DateTime $paid_on_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $paid_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $business_unit_ids (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  string $transaction_type Values: [Undefined, JournalEntry, ReceivePayment] (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  bool $include_total (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  string $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsGetListAsync($tenant, $ids = null, $statuses = null, $paid_on_after = null, $paid_on_before = null, $business_unit_ids = null, $batch_number = null, $batch_id = null, $transaction_type = null, $customer_id = null, $page = null, $page_size = null, $include_total = null, $custom_field_fields = null, $custom_field_operator = null, $modified_before = null, $modified_on_or_after = null, $created_before = null, $created_on_or_after = null, string $contentType = self::contentTypes['paymentsGetList'][0])
    {
        return $this->paymentsGetListAsyncWithHttpInfo($tenant, $ids, $statuses, $paid_on_after, $paid_on_before, $business_unit_ids, $batch_number, $batch_id, $transaction_type, $customer_id, $page, $page_size, $include_total, $custom_field_fields, $custom_field_operator, $modified_before, $modified_on_or_after, $created_before, $created_on_or_after, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsGetListAsyncWithHttpInfo
     *
     * Gets a paginated list of payments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids (optional)
     * @param  string $statuses (optional)
     * @param  \DateTime $paid_on_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $paid_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $business_unit_ids (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  string $transaction_type Values: [Undefined, JournalEntry, ReceivePayment] (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  bool $include_total (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  string $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsGetListAsyncWithHttpInfo($tenant, $ids = null, $statuses = null, $paid_on_after = null, $paid_on_before = null, $business_unit_ids = null, $batch_number = null, $batch_id = null, $transaction_type = null, $customer_id = null, $page = null, $page_size = null, $include_total = null, $custom_field_fields = null, $custom_field_operator = null, $modified_before = null, $modified_on_or_after = null, $created_before = null, $created_on_or_after = null, string $contentType = self::contentTypes['paymentsGetList'][0])
    {
        $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2DetailedPaymentResponse';
        $request = $this->paymentsGetListRequest($tenant, $ids, $statuses, $paid_on_after, $paid_on_before, $business_unit_ids, $batch_number, $batch_id, $transaction_type, $customer_id, $page, $page_size, $include_total, $custom_field_fields, $custom_field_operator, $modified_before, $modified_on_or_after, $created_before, $created_on_or_after, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsGetList'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids (optional)
     * @param  string $statuses (optional)
     * @param  \DateTime $paid_on_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $paid_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $business_unit_ids (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  string $transaction_type Values: [Undefined, JournalEntry, ReceivePayment] (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  bool $include_total (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  string $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsGetListRequest($tenant, $ids = null, $statuses = null, $paid_on_after = null, $paid_on_before = null, $business_unit_ids = null, $batch_number = null, $batch_id = null, $transaction_type = null, $customer_id = null, $page = null, $page_size = null, $include_total = null, $custom_field_fields = null, $custom_field_operator = null, $modified_before = null, $modified_on_or_after = null, $created_before = null, $created_on_or_after = null, string $contentType = self::contentTypes['paymentsGetList'][0])
    {

        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling paymentsGetList'
            );
        }




















        $resourcePath = '/accounting/v2/tenant/{tenant}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paid_on_after,
            'paidOnAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paid_on_before,
            'paidOnBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $business_unit_ids,
            'businessUnitIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $batch_number,
            'batchNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $batch_id,
            'batchId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_type,
            'transactionType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $customer_id,
            'customerId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_total,
            'includeTotal', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_field_fields,
            'customField.Fields', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_field_operator,
            'customField.Operator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_before,
            'modifiedBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modified_on_or_after,
            'modifiedOnOrAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'createdBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_on_or_after,
            'createdOnOrAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsUpdate
     *
     * Updates specified payment in \&quot;patch\&quot; mode
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentUpdateRequest $accounting_v2_payment_update_request accounting_v2_payment_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdate'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\AccountingV2PaymentResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function paymentsUpdate($id, $tenant, $accounting_v2_payment_update_request = null, string $contentType = self::contentTypes['paymentsUpdate'][0])
    {
        list($response) = $this->paymentsUpdateWithHttpInfo($id, $tenant, $accounting_v2_payment_update_request, $contentType);
        return $response;
    }

    /**
     * Operation paymentsUpdateWithHttpInfo
     *
     * Updates specified payment in \&quot;patch\&quot; mode
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentUpdateRequest $accounting_v2_payment_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdate'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\AccountingV2PaymentResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsUpdateWithHttpInfo($id, $tenant, $accounting_v2_payment_update_request = null, string $contentType = self::contentTypes['paymentsUpdate'][0])
    {
        $request = $this->paymentsUpdateRequest($id, $tenant, $accounting_v2_payment_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentsUpdateAsync
     *
     * Updates specified payment in \&quot;patch\&quot; mode
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentUpdateRequest $accounting_v2_payment_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsUpdateAsync($id, $tenant, $accounting_v2_payment_update_request = null, string $contentType = self::contentTypes['paymentsUpdate'][0])
    {
        return $this->paymentsUpdateAsyncWithHttpInfo($id, $tenant, $accounting_v2_payment_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsUpdateAsyncWithHttpInfo
     *
     * Updates specified payment in \&quot;patch\&quot; mode
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentUpdateRequest $accounting_v2_payment_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsUpdateAsyncWithHttpInfo($id, $tenant, $accounting_v2_payment_update_request = null, string $contentType = self::contentTypes['paymentsUpdate'][0])
    {
        $returnType = '\CompWright\ServiceTitan\Model\AccountingV2PaymentResponse';
        $request = $this->paymentsUpdateRequest($id, $tenant, $accounting_v2_payment_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsUpdate'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentUpdateRequest $accounting_v2_payment_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsUpdateRequest($id, $tenant, $accounting_v2_payment_update_request = null, string $contentType = self::contentTypes['paymentsUpdate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling paymentsUpdate'
            );
        }

        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling paymentsUpdate'
            );
        }



        $resourcePath = '/accounting/v2/tenant/{tenant}/payments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accounting_v2_payment_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accounting_v2_payment_update_request));
            } else {
                $httpBody = $accounting_v2_payment_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsUpdateCustomFields
     *
     * Update custom fields for specified payments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request accounting_v2_custom_field_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateCustomFields'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function paymentsUpdateCustomFields($tenant, $accounting_v2_custom_field_update_request = null, string $contentType = self::contentTypes['paymentsUpdateCustomFields'][0])
    {
        $this->paymentsUpdateCustomFieldsWithHttpInfo($tenant, $accounting_v2_custom_field_update_request, $contentType);
    }

    /**
     * Operation paymentsUpdateCustomFieldsWithHttpInfo
     *
     * Update custom fields for specified payments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateCustomFields'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsUpdateCustomFieldsWithHttpInfo($tenant, $accounting_v2_custom_field_update_request = null, string $contentType = self::contentTypes['paymentsUpdateCustomFields'][0])
    {
        $request = $this->paymentsUpdateCustomFieldsRequest($tenant, $accounting_v2_custom_field_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentsUpdateCustomFieldsAsync
     *
     * Update custom fields for specified payments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsUpdateCustomFieldsAsync($tenant, $accounting_v2_custom_field_update_request = null, string $contentType = self::contentTypes['paymentsUpdateCustomFields'][0])
    {
        return $this->paymentsUpdateCustomFieldsAsyncWithHttpInfo($tenant, $accounting_v2_custom_field_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsUpdateCustomFieldsAsyncWithHttpInfo
     *
     * Update custom fields for specified payments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsUpdateCustomFieldsAsyncWithHttpInfo($tenant, $accounting_v2_custom_field_update_request = null, string $contentType = self::contentTypes['paymentsUpdateCustomFields'][0])
    {
        $returnType = '';
        $request = $this->paymentsUpdateCustomFieldsRequest($tenant, $accounting_v2_custom_field_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsUpdateCustomFields'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsUpdateCustomFieldsRequest($tenant, $accounting_v2_custom_field_update_request = null, string $contentType = self::contentTypes['paymentsUpdateCustomFields'][0])
    {

        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling paymentsUpdateCustomFields'
            );
        }



        $resourcePath = '/accounting/v2/tenant/{tenant}/payments/custom-fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accounting_v2_custom_field_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accounting_v2_custom_field_update_request));
            } else {
                $httpBody = $accounting_v2_custom_field_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsUpdateStatus
     *
     * Updates payment status
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentStatusBatchRequest $accounting_v2_payment_status_batch_request accounting_v2_payment_status_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateStatus'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function paymentsUpdateStatus($tenant, $accounting_v2_payment_status_batch_request = null, string $contentType = self::contentTypes['paymentsUpdateStatus'][0])
    {
        $this->paymentsUpdateStatusWithHttpInfo($tenant, $accounting_v2_payment_status_batch_request, $contentType);
    }

    /**
     * Operation paymentsUpdateStatusWithHttpInfo
     *
     * Updates payment status
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentStatusBatchRequest $accounting_v2_payment_status_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateStatus'] to see the possible values for this operation
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsUpdateStatusWithHttpInfo($tenant, $accounting_v2_payment_status_batch_request = null, string $contentType = self::contentTypes['paymentsUpdateStatus'][0])
    {
        $request = $this->paymentsUpdateStatusRequest($tenant, $accounting_v2_payment_status_batch_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentsUpdateStatusAsync
     *
     * Updates payment status
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentStatusBatchRequest $accounting_v2_payment_status_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsUpdateStatusAsync($tenant, $accounting_v2_payment_status_batch_request = null, string $contentType = self::contentTypes['paymentsUpdateStatus'][0])
    {
        return $this->paymentsUpdateStatusAsyncWithHttpInfo($tenant, $accounting_v2_payment_status_batch_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsUpdateStatusAsyncWithHttpInfo
     *
     * Updates payment status
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentStatusBatchRequest $accounting_v2_payment_status_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsUpdateStatusAsyncWithHttpInfo($tenant, $accounting_v2_payment_status_batch_request = null, string $contentType = self::contentTypes['paymentsUpdateStatus'][0])
    {
        $returnType = '';
        $request = $this->paymentsUpdateStatusRequest($tenant, $accounting_v2_payment_status_batch_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsUpdateStatus'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2PaymentStatusBatchRequest $accounting_v2_payment_status_batch_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsUpdateStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsUpdateStatusRequest($tenant, $accounting_v2_payment_status_batch_request = null, string $contentType = self::contentTypes['paymentsUpdateStatus'][0])
    {

        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling paymentsUpdateStatus'
            );
        }



        $resourcePath = '/accounting/v2/tenant/{tenant}/payments/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accounting_v2_payment_status_batch_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accounting_v2_payment_status_batch_request));
            } else {
                $httpBody = $accounting_v2_payment_status_batch_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
