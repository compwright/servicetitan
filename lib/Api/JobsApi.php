<?php
/**
 * JobsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Job Planning and Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CompWright\ServiceTitan\ApiException;
use CompWright\ServiceTitan\Configuration;
use CompWright\ServiceTitan\HeaderSelector;
use CompWright\ServiceTitan\ObjectSerializer;

/**
 * JobsApi Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JobsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation jobsCancel
     *
     * Cancels a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CancelJobRequest $crm_v2_cancel_job_request crm_v2_cancel_job_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function jobsCancel($id, $tenant, $crm_v2_cancel_job_request = null)
    {
        $this->jobsCancelWithHttpInfo($id, $tenant, $crm_v2_cancel_job_request);
    }

    /**
     * Operation jobsCancelWithHttpInfo
     *
     * Cancels a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CancelJobRequest $crm_v2_cancel_job_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsCancelWithHttpInfo($id, $tenant, $crm_v2_cancel_job_request = null)
    {
        $request = $this->jobsCancelRequest($id, $tenant, $crm_v2_cancel_job_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsCancelAsync
     *
     * Cancels a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CancelJobRequest $crm_v2_cancel_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsCancelAsync($id, $tenant, $crm_v2_cancel_job_request = null)
    {
        return $this->jobsCancelAsyncWithHttpInfo($id, $tenant, $crm_v2_cancel_job_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsCancelAsyncWithHttpInfo
     *
     * Cancels a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CancelJobRequest $crm_v2_cancel_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsCancelAsyncWithHttpInfo($id, $tenant, $crm_v2_cancel_job_request = null)
    {
        $returnType = '';
        $request = $this->jobsCancelRequest($id, $tenant, $crm_v2_cancel_job_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsCancel'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CancelJobRequest $crm_v2_cancel_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsCancelRequest($id, $tenant, $crm_v2_cancel_job_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsCancel'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsCancel'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($crm_v2_cancel_job_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($crm_v2_cancel_job_request));
            } else {
                $httpBody = $crm_v2_cancel_job_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsComplete
     *
     * Completes a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CompleteJobRequest $crm_v2_complete_job_request crm_v2_complete_job_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function jobsComplete($id, $tenant, $crm_v2_complete_job_request = null)
    {
        $this->jobsCompleteWithHttpInfo($id, $tenant, $crm_v2_complete_job_request);
    }

    /**
     * Operation jobsCompleteWithHttpInfo
     *
     * Completes a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CompleteJobRequest $crm_v2_complete_job_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsCompleteWithHttpInfo($id, $tenant, $crm_v2_complete_job_request = null)
    {
        $request = $this->jobsCompleteRequest($id, $tenant, $crm_v2_complete_job_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsCompleteAsync
     *
     * Completes a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CompleteJobRequest $crm_v2_complete_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsCompleteAsync($id, $tenant, $crm_v2_complete_job_request = null)
    {
        return $this->jobsCompleteAsyncWithHttpInfo($id, $tenant, $crm_v2_complete_job_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsCompleteAsyncWithHttpInfo
     *
     * Completes a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CompleteJobRequest $crm_v2_complete_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsCompleteAsyncWithHttpInfo($id, $tenant, $crm_v2_complete_job_request = null)
    {
        $returnType = '';
        $request = $this->jobsCompleteRequest($id, $tenant, $crm_v2_complete_job_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsComplete'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CompleteJobRequest $crm_v2_complete_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsCompleteRequest($id, $tenant, $crm_v2_complete_job_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsComplete'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsComplete'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}/complete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($crm_v2_complete_job_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($crm_v2_complete_job_request));
            } else {
                $httpBody = $crm_v2_complete_job_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsCreate
     *
     * Creates a job
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobCreateRequest $crm_v2_job_create_request crm_v2_job_create_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\CrmV2JobResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobsCreate($tenant, $crm_v2_job_create_request = null)
    {
        list($response) = $this->jobsCreateWithHttpInfo($tenant, $crm_v2_job_create_request);
        return $response;
    }

    /**
     * Operation jobsCreateWithHttpInfo
     *
     * Creates a job
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobCreateRequest $crm_v2_job_create_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\CrmV2JobResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsCreateWithHttpInfo($tenant, $crm_v2_job_create_request = null)
    {
        $request = $this->jobsCreateRequest($tenant, $crm_v2_job_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\CrmV2JobResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\CrmV2JobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\CrmV2JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsCreateAsync
     *
     * Creates a job
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobCreateRequest $crm_v2_job_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsCreateAsync($tenant, $crm_v2_job_create_request = null)
    {
        return $this->jobsCreateAsyncWithHttpInfo($tenant, $crm_v2_job_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsCreateAsyncWithHttpInfo
     *
     * Creates a job
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobCreateRequest $crm_v2_job_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsCreateAsyncWithHttpInfo($tenant, $crm_v2_job_create_request = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobResponse';
        $request = $this->jobsCreateRequest($tenant, $crm_v2_job_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsCreate'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobCreateRequest $crm_v2_job_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsCreateRequest($tenant, $crm_v2_job_create_request = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsCreate'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($crm_v2_job_create_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($crm_v2_job_create_request));
            } else {
                $httpBody = $crm_v2_job_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsCreateNote
     *
     * Creates a note on the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobNoteCreateRequest $crm_v2_job_note_create_request crm_v2_job_note_create_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\CrmV2NoteResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobsCreateNote($id, $tenant, $crm_v2_job_note_create_request = null)
    {
        list($response) = $this->jobsCreateNoteWithHttpInfo($id, $tenant, $crm_v2_job_note_create_request);
        return $response;
    }

    /**
     * Operation jobsCreateNoteWithHttpInfo
     *
     * Creates a note on the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobNoteCreateRequest $crm_v2_job_note_create_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\CrmV2NoteResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsCreateNoteWithHttpInfo($id, $tenant, $crm_v2_job_note_create_request = null)
    {
        $request = $this->jobsCreateNoteRequest($id, $tenant, $crm_v2_job_note_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\CrmV2NoteResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\CrmV2NoteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\CrmV2NoteResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\CrmV2NoteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsCreateNoteAsync
     *
     * Creates a note on the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobNoteCreateRequest $crm_v2_job_note_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsCreateNoteAsync($id, $tenant, $crm_v2_job_note_create_request = null)
    {
        return $this->jobsCreateNoteAsyncWithHttpInfo($id, $tenant, $crm_v2_job_note_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsCreateNoteAsyncWithHttpInfo
     *
     * Creates a note on the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobNoteCreateRequest $crm_v2_job_note_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsCreateNoteAsyncWithHttpInfo($id, $tenant, $crm_v2_job_note_create_request = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\CrmV2NoteResponse';
        $request = $this->jobsCreateNoteRequest($id, $tenant, $crm_v2_job_note_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsCreateNote'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2JobNoteCreateRequest $crm_v2_job_note_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsCreateNoteRequest($id, $tenant, $crm_v2_job_note_create_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsCreateNote'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsCreateNote'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($crm_v2_job_note_create_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($crm_v2_job_note_create_request));
            } else {
                $httpBody = $crm_v2_job_note_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsGet
     *
     * Gets a job by ID
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\CrmV2JobResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobsGet($id, $tenant, $external_data_application_guid = null)
    {
        list($response) = $this->jobsGetWithHttpInfo($id, $tenant, $external_data_application_guid);
        return $response;
    }

    /**
     * Operation jobsGetWithHttpInfo
     *
     * Gets a job by ID
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\CrmV2JobResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsGetWithHttpInfo($id, $tenant, $external_data_application_guid = null)
    {
        $request = $this->jobsGetRequest($id, $tenant, $external_data_application_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\CrmV2JobResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\CrmV2JobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\CrmV2JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsGetAsync
     *
     * Gets a job by ID
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetAsync($id, $tenant, $external_data_application_guid = null)
    {
        return $this->jobsGetAsyncWithHttpInfo($id, $tenant, $external_data_application_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsGetAsyncWithHttpInfo
     *
     * Gets a job by ID
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetAsyncWithHttpInfo($id, $tenant, $external_data_application_guid = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobResponse';
        $request = $this->jobsGetRequest($id, $tenant, $external_data_application_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsGet'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsGetRequest($id, $tenant, $external_data_application_guid = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsGet'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsGet'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($external_data_application_guid !== null) {
            if('form' === 'form' && is_array($external_data_application_guid)) {
                foreach($external_data_application_guid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['externalDataApplicationGuid'] = $external_data_application_guid;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsGetCancelReasons
     *
     * Gets a list of cancel reasons for specific jobs
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (required)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CancelReasonResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobsGetCancelReasons($tenant, $ids)
    {
        list($response) = $this->jobsGetCancelReasonsWithHttpInfo($tenant, $ids);
        return $response;
    }

    /**
     * Operation jobsGetCancelReasonsWithHttpInfo
     *
     * Gets a list of cancel reasons for specific jobs
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (required)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CancelReasonResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsGetCancelReasonsWithHttpInfo($tenant, $ids)
    {
        $request = $this->jobsGetCancelReasonsRequest($tenant, $ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CancelReasonResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CancelReasonResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CancelReasonResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CancelReasonResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsGetCancelReasonsAsync
     *
     * Gets a list of cancel reasons for specific jobs
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetCancelReasonsAsync($tenant, $ids)
    {
        return $this->jobsGetCancelReasonsAsyncWithHttpInfo($tenant, $ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsGetCancelReasonsAsyncWithHttpInfo
     *
     * Gets a list of cancel reasons for specific jobs
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetCancelReasonsAsyncWithHttpInfo($tenant, $ids)
    {
        $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CancelReasonResponse';
        $request = $this->jobsGetCancelReasonsRequest($tenant, $ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsGetCancelReasons'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsGetCancelReasonsRequest($tenant, $ids)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsGetCancelReasons'
            );
        }
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling jobsGetCancelReasons'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/cancel-reasons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ids !== null) {
            if('form' === 'form' && is_array($ids)) {
                foreach($ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ids'] = $ids;
            }
        }


        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsGetHistory
     *
     * Gets a list of history entries for the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\CrmV2JobHistoryResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobsGetHistory($id, $tenant)
    {
        list($response) = $this->jobsGetHistoryWithHttpInfo($id, $tenant);
        return $response;
    }

    /**
     * Operation jobsGetHistoryWithHttpInfo
     *
     * Gets a list of history entries for the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\CrmV2JobHistoryResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsGetHistoryWithHttpInfo($id, $tenant)
    {
        $request = $this->jobsGetHistoryRequest($id, $tenant);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\CrmV2JobHistoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\CrmV2JobHistoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobHistoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\CrmV2JobHistoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsGetHistoryAsync
     *
     * Gets a list of history entries for the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetHistoryAsync($id, $tenant)
    {
        return $this->jobsGetHistoryAsyncWithHttpInfo($id, $tenant)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsGetHistoryAsyncWithHttpInfo
     *
     * Gets a list of history entries for the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetHistoryAsyncWithHttpInfo($id, $tenant)
    {
        $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobHistoryResponse';
        $request = $this->jobsGetHistoryRequest($id, $tenant);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsGetHistory'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsGetHistoryRequest($id, $tenant)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsGetHistory'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsGetHistory'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsGetList
     *
     * Gets a list of jobs
     *
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  string $number Filters by job number (optional)
     * @param  int $project_id Format - int64. Filters by project ID (optional)
     * @param  int $booking_id Format - int64. Filters by booking ID that resulted in this job (optional)
     * @param  string $job_status Filters by job status. Supported statuses are \&quot;Scheduled\&quot;, \&quot;InProgress\&quot;, \&quot;Hold\&quot;, \&quot;Completed\&quot;, and \&quot;Canceled\&quot; (optional)
     * @param  string $appointment_status Filters by appointment status. Return a job if it has any appointment with the specified status. Supported statues are \&quot;Scheduled\&quot;, \&quot;Dispatched\&quot;, \&quot;Working\&quot;, \&quot;Hold\&quot;, \&quot;Done\&quot;, \&quot;Canceled\&quot;, \&quot;Unused\&quot; (optional)
     * @param  \DateTime $first_appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts on or after date/time (in UTC). Use with \&quot;firstAppointmentStartsBefore\&quot; to find jobs whose first appointment is within the specified date range. (optional)
     * @param  \DateTime $first_appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts before date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  int $technician_id Format - int64. Return jobs if technician is assigned to any appointment (optional)
     * @param  int $customer_id Format - int64. Filters by job&#39;s customer ID (optional)
     * @param  int $location_id Format - int64. Filters by job&#39;s location ID (optional)
     * @param  int $sold_by_id Format - int64. Filters by the technician who sold the job (optional)
     * @param  int $job_type_id Format - int64. Filters by job type ID (optional)
     * @param  int $campaign_id Format - int64. Filters by job&#39;s campaign ID (optional)
     * @param  int $business_unit_id Format - int64. Filters by job&#39;s business unit ID (optional)
     * @param  int $invoice_id Format - int64. Filters by job&#39;s invoice ID (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_on_or_after Format - date-time (as date-time in RFC3339). Return jobs that are completed after a certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_before Format - date-time (as date-time in RFC3339). Return jobs that are completed before a certain date/time (in UTC) (optional)
     * @param  string $sort Applies sorting by the specified field:\\ \&quot;?sort&#x3D;+FieldName\&quot; for ascending order,\\ \&quot;?sort&#x3D;-FieldName\&quot; for descending order.\\ \\ Available fields are: Id, ModifiedOn, CreatedOn. (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobsGetList($tenant, $page = null, $page_size = null, $include_total = null, $ids = null, $number = null, $project_id = null, $booking_id = null, $job_status = null, $appointment_status = null, $first_appointment_starts_on_or_after = null, $first_appointment_starts_before = null, $appointment_starts_on_or_after = null, $appointment_starts_before = null, $technician_id = null, $customer_id = null, $location_id = null, $sold_by_id = null, $job_type_id = null, $campaign_id = null, $business_unit_id = null, $invoice_id = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $completed_on_or_after = null, $completed_before = null, $sort = null, $external_data_application_guid = null)
    {
        list($response) = $this->jobsGetListWithHttpInfo($tenant, $page, $page_size, $include_total, $ids, $number, $project_id, $booking_id, $job_status, $appointment_status, $first_appointment_starts_on_or_after, $first_appointment_starts_before, $appointment_starts_on_or_after, $appointment_starts_before, $technician_id, $customer_id, $location_id, $sold_by_id, $job_type_id, $campaign_id, $business_unit_id, $invoice_id, $created_before, $created_on_or_after, $modified_before, $modified_on_or_after, $completed_on_or_after, $completed_before, $sort, $external_data_application_guid);
        return $response;
    }

    /**
     * Operation jobsGetListWithHttpInfo
     *
     * Gets a list of jobs
     *
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  string $number Filters by job number (optional)
     * @param  int $project_id Format - int64. Filters by project ID (optional)
     * @param  int $booking_id Format - int64. Filters by booking ID that resulted in this job (optional)
     * @param  string $job_status Filters by job status. Supported statuses are \&quot;Scheduled\&quot;, \&quot;InProgress\&quot;, \&quot;Hold\&quot;, \&quot;Completed\&quot;, and \&quot;Canceled\&quot; (optional)
     * @param  string $appointment_status Filters by appointment status. Return a job if it has any appointment with the specified status. Supported statues are \&quot;Scheduled\&quot;, \&quot;Dispatched\&quot;, \&quot;Working\&quot;, \&quot;Hold\&quot;, \&quot;Done\&quot;, \&quot;Canceled\&quot;, \&quot;Unused\&quot; (optional)
     * @param  \DateTime $first_appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts on or after date/time (in UTC). Use with \&quot;firstAppointmentStartsBefore\&quot; to find jobs whose first appointment is within the specified date range. (optional)
     * @param  \DateTime $first_appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts before date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  int $technician_id Format - int64. Return jobs if technician is assigned to any appointment (optional)
     * @param  int $customer_id Format - int64. Filters by job&#39;s customer ID (optional)
     * @param  int $location_id Format - int64. Filters by job&#39;s location ID (optional)
     * @param  int $sold_by_id Format - int64. Filters by the technician who sold the job (optional)
     * @param  int $job_type_id Format - int64. Filters by job type ID (optional)
     * @param  int $campaign_id Format - int64. Filters by job&#39;s campaign ID (optional)
     * @param  int $business_unit_id Format - int64. Filters by job&#39;s business unit ID (optional)
     * @param  int $invoice_id Format - int64. Filters by job&#39;s invoice ID (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_on_or_after Format - date-time (as date-time in RFC3339). Return jobs that are completed after a certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_before Format - date-time (as date-time in RFC3339). Return jobs that are completed before a certain date/time (in UTC) (optional)
     * @param  string $sort Applies sorting by the specified field:\\ \&quot;?sort&#x3D;+FieldName\&quot; for ascending order,\\ \&quot;?sort&#x3D;-FieldName\&quot; for descending order.\\ \\ Available fields are: Id, ModifiedOn, CreatedOn. (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsGetListWithHttpInfo($tenant, $page = null, $page_size = null, $include_total = null, $ids = null, $number = null, $project_id = null, $booking_id = null, $job_status = null, $appointment_status = null, $first_appointment_starts_on_or_after = null, $first_appointment_starts_before = null, $appointment_starts_on_or_after = null, $appointment_starts_before = null, $technician_id = null, $customer_id = null, $location_id = null, $sold_by_id = null, $job_type_id = null, $campaign_id = null, $business_unit_id = null, $invoice_id = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $completed_on_or_after = null, $completed_before = null, $sort = null, $external_data_application_guid = null)
    {
        $request = $this->jobsGetListRequest($tenant, $page, $page_size, $include_total, $ids, $number, $project_id, $booking_id, $job_status, $appointment_status, $first_appointment_starts_on_or_after, $first_appointment_starts_before, $appointment_starts_on_or_after, $appointment_starts_before, $technician_id, $customer_id, $location_id, $sold_by_id, $job_type_id, $campaign_id, $business_unit_id, $invoice_id, $created_before, $created_on_or_after, $modified_before, $modified_on_or_after, $completed_on_or_after, $completed_before, $sort, $external_data_application_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsGetListAsync
     *
     * Gets a list of jobs
     *
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  string $number Filters by job number (optional)
     * @param  int $project_id Format - int64. Filters by project ID (optional)
     * @param  int $booking_id Format - int64. Filters by booking ID that resulted in this job (optional)
     * @param  string $job_status Filters by job status. Supported statuses are \&quot;Scheduled\&quot;, \&quot;InProgress\&quot;, \&quot;Hold\&quot;, \&quot;Completed\&quot;, and \&quot;Canceled\&quot; (optional)
     * @param  string $appointment_status Filters by appointment status. Return a job if it has any appointment with the specified status. Supported statues are \&quot;Scheduled\&quot;, \&quot;Dispatched\&quot;, \&quot;Working\&quot;, \&quot;Hold\&quot;, \&quot;Done\&quot;, \&quot;Canceled\&quot;, \&quot;Unused\&quot; (optional)
     * @param  \DateTime $first_appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts on or after date/time (in UTC). Use with \&quot;firstAppointmentStartsBefore\&quot; to find jobs whose first appointment is within the specified date range. (optional)
     * @param  \DateTime $first_appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts before date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  int $technician_id Format - int64. Return jobs if technician is assigned to any appointment (optional)
     * @param  int $customer_id Format - int64. Filters by job&#39;s customer ID (optional)
     * @param  int $location_id Format - int64. Filters by job&#39;s location ID (optional)
     * @param  int $sold_by_id Format - int64. Filters by the technician who sold the job (optional)
     * @param  int $job_type_id Format - int64. Filters by job type ID (optional)
     * @param  int $campaign_id Format - int64. Filters by job&#39;s campaign ID (optional)
     * @param  int $business_unit_id Format - int64. Filters by job&#39;s business unit ID (optional)
     * @param  int $invoice_id Format - int64. Filters by job&#39;s invoice ID (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_on_or_after Format - date-time (as date-time in RFC3339). Return jobs that are completed after a certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_before Format - date-time (as date-time in RFC3339). Return jobs that are completed before a certain date/time (in UTC) (optional)
     * @param  string $sort Applies sorting by the specified field:\\ \&quot;?sort&#x3D;+FieldName\&quot; for ascending order,\\ \&quot;?sort&#x3D;-FieldName\&quot; for descending order.\\ \\ Available fields are: Id, ModifiedOn, CreatedOn. (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetListAsync($tenant, $page = null, $page_size = null, $include_total = null, $ids = null, $number = null, $project_id = null, $booking_id = null, $job_status = null, $appointment_status = null, $first_appointment_starts_on_or_after = null, $first_appointment_starts_before = null, $appointment_starts_on_or_after = null, $appointment_starts_before = null, $technician_id = null, $customer_id = null, $location_id = null, $sold_by_id = null, $job_type_id = null, $campaign_id = null, $business_unit_id = null, $invoice_id = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $completed_on_or_after = null, $completed_before = null, $sort = null, $external_data_application_guid = null)
    {
        return $this->jobsGetListAsyncWithHttpInfo($tenant, $page, $page_size, $include_total, $ids, $number, $project_id, $booking_id, $job_status, $appointment_status, $first_appointment_starts_on_or_after, $first_appointment_starts_before, $appointment_starts_on_or_after, $appointment_starts_before, $technician_id, $customer_id, $location_id, $sold_by_id, $job_type_id, $campaign_id, $business_unit_id, $invoice_id, $created_before, $created_on_or_after, $modified_before, $modified_on_or_after, $completed_on_or_after, $completed_before, $sort, $external_data_application_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsGetListAsyncWithHttpInfo
     *
     * Gets a list of jobs
     *
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  string $number Filters by job number (optional)
     * @param  int $project_id Format - int64. Filters by project ID (optional)
     * @param  int $booking_id Format - int64. Filters by booking ID that resulted in this job (optional)
     * @param  string $job_status Filters by job status. Supported statuses are \&quot;Scheduled\&quot;, \&quot;InProgress\&quot;, \&quot;Hold\&quot;, \&quot;Completed\&quot;, and \&quot;Canceled\&quot; (optional)
     * @param  string $appointment_status Filters by appointment status. Return a job if it has any appointment with the specified status. Supported statues are \&quot;Scheduled\&quot;, \&quot;Dispatched\&quot;, \&quot;Working\&quot;, \&quot;Hold\&quot;, \&quot;Done\&quot;, \&quot;Canceled\&quot;, \&quot;Unused\&quot; (optional)
     * @param  \DateTime $first_appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts on or after date/time (in UTC). Use with \&quot;firstAppointmentStartsBefore\&quot; to find jobs whose first appointment is within the specified date range. (optional)
     * @param  \DateTime $first_appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts before date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  int $technician_id Format - int64. Return jobs if technician is assigned to any appointment (optional)
     * @param  int $customer_id Format - int64. Filters by job&#39;s customer ID (optional)
     * @param  int $location_id Format - int64. Filters by job&#39;s location ID (optional)
     * @param  int $sold_by_id Format - int64. Filters by the technician who sold the job (optional)
     * @param  int $job_type_id Format - int64. Filters by job type ID (optional)
     * @param  int $campaign_id Format - int64. Filters by job&#39;s campaign ID (optional)
     * @param  int $business_unit_id Format - int64. Filters by job&#39;s business unit ID (optional)
     * @param  int $invoice_id Format - int64. Filters by job&#39;s invoice ID (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_on_or_after Format - date-time (as date-time in RFC3339). Return jobs that are completed after a certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_before Format - date-time (as date-time in RFC3339). Return jobs that are completed before a certain date/time (in UTC) (optional)
     * @param  string $sort Applies sorting by the specified field:\\ \&quot;?sort&#x3D;+FieldName\&quot; for ascending order,\\ \&quot;?sort&#x3D;-FieldName\&quot; for descending order.\\ \\ Available fields are: Id, ModifiedOn, CreatedOn. (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetListAsyncWithHttpInfo($tenant, $page = null, $page_size = null, $include_total = null, $ids = null, $number = null, $project_id = null, $booking_id = null, $job_status = null, $appointment_status = null, $first_appointment_starts_on_or_after = null, $first_appointment_starts_before = null, $appointment_starts_on_or_after = null, $appointment_starts_before = null, $technician_id = null, $customer_id = null, $location_id = null, $sold_by_id = null, $job_type_id = null, $campaign_id = null, $business_unit_id = null, $invoice_id = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $completed_on_or_after = null, $completed_before = null, $sort = null, $external_data_application_guid = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse';
        $request = $this->jobsGetListRequest($tenant, $page, $page_size, $include_total, $ids, $number, $project_id, $booking_id, $job_status, $appointment_status, $first_appointment_starts_on_or_after, $first_appointment_starts_before, $appointment_starts_on_or_after, $appointment_starts_before, $technician_id, $customer_id, $location_id, $sold_by_id, $job_type_id, $campaign_id, $business_unit_id, $invoice_id, $created_before, $created_on_or_after, $modified_before, $modified_on_or_after, $completed_on_or_after, $completed_before, $sort, $external_data_application_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsGetList'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  string $number Filters by job number (optional)
     * @param  int $project_id Format - int64. Filters by project ID (optional)
     * @param  int $booking_id Format - int64. Filters by booking ID that resulted in this job (optional)
     * @param  string $job_status Filters by job status. Supported statuses are \&quot;Scheduled\&quot;, \&quot;InProgress\&quot;, \&quot;Hold\&quot;, \&quot;Completed\&quot;, and \&quot;Canceled\&quot; (optional)
     * @param  string $appointment_status Filters by appointment status. Return a job if it has any appointment with the specified status. Supported statues are \&quot;Scheduled\&quot;, \&quot;Dispatched\&quot;, \&quot;Working\&quot;, \&quot;Hold\&quot;, \&quot;Done\&quot;, \&quot;Canceled\&quot;, \&quot;Unused\&quot; (optional)
     * @param  \DateTime $first_appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts on or after date/time (in UTC). Use with \&quot;firstAppointmentStartsBefore\&quot; to find jobs whose first appointment is within the specified date range. (optional)
     * @param  \DateTime $first_appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts before date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_on_or_after Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  \DateTime $appointment_starts_before Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC) (optional)
     * @param  int $technician_id Format - int64. Return jobs if technician is assigned to any appointment (optional)
     * @param  int $customer_id Format - int64. Filters by job&#39;s customer ID (optional)
     * @param  int $location_id Format - int64. Filters by job&#39;s location ID (optional)
     * @param  int $sold_by_id Format - int64. Filters by the technician who sold the job (optional)
     * @param  int $job_type_id Format - int64. Filters by job type ID (optional)
     * @param  int $campaign_id Format - int64. Filters by job&#39;s campaign ID (optional)
     * @param  int $business_unit_id Format - int64. Filters by job&#39;s business unit ID (optional)
     * @param  int $invoice_id Format - int64. Filters by job&#39;s invoice ID (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_on_or_after Format - date-time (as date-time in RFC3339). Return jobs that are completed after a certain date/time (in UTC) (optional)
     * @param  \DateTime $completed_before Format - date-time (as date-time in RFC3339). Return jobs that are completed before a certain date/time (in UTC) (optional)
     * @param  string $sort Applies sorting by the specified field:\\ \&quot;?sort&#x3D;+FieldName\&quot; for ascending order,\\ \&quot;?sort&#x3D;-FieldName\&quot; for descending order.\\ \\ Available fields are: Id, ModifiedOn, CreatedOn. (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsGetListRequest($tenant, $page = null, $page_size = null, $include_total = null, $ids = null, $number = null, $project_id = null, $booking_id = null, $job_status = null, $appointment_status = null, $first_appointment_starts_on_or_after = null, $first_appointment_starts_before = null, $appointment_starts_on_or_after = null, $appointment_starts_before = null, $technician_id = null, $customer_id = null, $location_id = null, $sold_by_id = null, $job_type_id = null, $campaign_id = null, $business_unit_id = null, $invoice_id = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $completed_on_or_after = null, $completed_before = null, $sort = null, $external_data_application_guid = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsGetList'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }
        // query params
        if ($include_total !== null) {
            if('form' === 'form' && is_array($include_total)) {
                foreach($include_total as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeTotal'] = $include_total;
            }
        }
        // query params
        if ($ids !== null) {
            if('form' === 'form' && is_array($ids)) {
                foreach($ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ids'] = $ids;
            }
        }
        // query params
        if ($number !== null) {
            if('form' === 'form' && is_array($number)) {
                foreach($number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['number'] = $number;
            }
        }
        // query params
        if ($project_id !== null) {
            if('form' === 'form' && is_array($project_id)) {
                foreach($project_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['projectId'] = $project_id;
            }
        }
        // query params
        if ($booking_id !== null) {
            if('form' === 'form' && is_array($booking_id)) {
                foreach($booking_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bookingId'] = $booking_id;
            }
        }
        // query params
        if ($job_status !== null) {
            if('form' === 'form' && is_array($job_status)) {
                foreach($job_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobStatus'] = $job_status;
            }
        }
        // query params
        if ($appointment_status !== null) {
            if('form' === 'form' && is_array($appointment_status)) {
                foreach($appointment_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['appointmentStatus'] = $appointment_status;
            }
        }
        // query params
        if ($first_appointment_starts_on_or_after !== null) {
            if('form' === 'form' && is_array($first_appointment_starts_on_or_after)) {
                foreach($first_appointment_starts_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstAppointmentStartsOnOrAfter'] = $first_appointment_starts_on_or_after;
            }
        }
        // query params
        if ($first_appointment_starts_before !== null) {
            if('form' === 'form' && is_array($first_appointment_starts_before)) {
                foreach($first_appointment_starts_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstAppointmentStartsBefore'] = $first_appointment_starts_before;
            }
        }
        // query params
        if ($appointment_starts_on_or_after !== null) {
            if('form' === 'form' && is_array($appointment_starts_on_or_after)) {
                foreach($appointment_starts_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['appointmentStartsOnOrAfter'] = $appointment_starts_on_or_after;
            }
        }
        // query params
        if ($appointment_starts_before !== null) {
            if('form' === 'form' && is_array($appointment_starts_before)) {
                foreach($appointment_starts_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['appointmentStartsBefore'] = $appointment_starts_before;
            }
        }
        // query params
        if ($technician_id !== null) {
            if('form' === 'form' && is_array($technician_id)) {
                foreach($technician_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['technicianId'] = $technician_id;
            }
        }
        // query params
        if ($customer_id !== null) {
            if('form' === 'form' && is_array($customer_id)) {
                foreach($customer_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customerId'] = $customer_id;
            }
        }
        // query params
        if ($location_id !== null) {
            if('form' === 'form' && is_array($location_id)) {
                foreach($location_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locationId'] = $location_id;
            }
        }
        // query params
        if ($sold_by_id !== null) {
            if('form' === 'form' && is_array($sold_by_id)) {
                foreach($sold_by_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['soldById'] = $sold_by_id;
            }
        }
        // query params
        if ($job_type_id !== null) {
            if('form' === 'form' && is_array($job_type_id)) {
                foreach($job_type_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobTypeId'] = $job_type_id;
            }
        }
        // query params
        if ($campaign_id !== null) {
            if('form' === 'form' && is_array($campaign_id)) {
                foreach($campaign_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['campaignId'] = $campaign_id;
            }
        }
        // query params
        if ($business_unit_id !== null) {
            if('form' === 'form' && is_array($business_unit_id)) {
                foreach($business_unit_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['businessUnitId'] = $business_unit_id;
            }
        }
        // query params
        if ($invoice_id !== null) {
            if('form' === 'form' && is_array($invoice_id)) {
                foreach($invoice_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['invoiceId'] = $invoice_id;
            }
        }
        // query params
        if ($created_before !== null) {
            if('form' === 'form' && is_array($created_before)) {
                foreach($created_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdBefore'] = $created_before;
            }
        }
        // query params
        if ($created_on_or_after !== null) {
            if('form' === 'form' && is_array($created_on_or_after)) {
                foreach($created_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdOnOrAfter'] = $created_on_or_after;
            }
        }
        // query params
        if ($modified_before !== null) {
            if('form' === 'form' && is_array($modified_before)) {
                foreach($modified_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedBefore'] = $modified_before;
            }
        }
        // query params
        if ($modified_on_or_after !== null) {
            if('form' === 'form' && is_array($modified_on_or_after)) {
                foreach($modified_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedOnOrAfter'] = $modified_on_or_after;
            }
        }
        // query params
        if ($completed_on_or_after !== null) {
            if('form' === 'form' && is_array($completed_on_or_after)) {
                foreach($completed_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['completedOnOrAfter'] = $completed_on_or_after;
            }
        }
        // query params
        if ($completed_before !== null) {
            if('form' === 'form' && is_array($completed_before)) {
                foreach($completed_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['completedBefore'] = $completed_before;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($external_data_application_guid !== null) {
            if('form' === 'form' && is_array($external_data_application_guid)) {
                foreach($external_data_application_guid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['externalDataApplicationGuid'] = $external_data_application_guid;
            }
        }


        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsGetNotes
     *
     * Gets a list of notes on the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobsGetNotes($id, $tenant, $page = null, $page_size = null, $include_total = null)
    {
        list($response) = $this->jobsGetNotesWithHttpInfo($id, $tenant, $page, $page_size, $include_total);
        return $response;
    }

    /**
     * Operation jobsGetNotesWithHttpInfo
     *
     * Gets a list of notes on the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsGetNotesWithHttpInfo($id, $tenant, $page = null, $page_size = null, $include_total = null)
    {
        $request = $this->jobsGetNotesRequest($id, $tenant, $page, $page_size, $include_total);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsGetNotesAsync
     *
     * Gets a list of notes on the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetNotesAsync($id, $tenant, $page = null, $page_size = null, $include_total = null)
    {
        return $this->jobsGetNotesAsyncWithHttpInfo($id, $tenant, $page, $page_size, $include_total)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsGetNotesAsyncWithHttpInfo
     *
     * Gets a list of notes on the specified job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsGetNotesAsyncWithHttpInfo($id, $tenant, $page = null, $page_size = null, $include_total = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse';
        $request = $this->jobsGetNotesRequest($id, $tenant, $page, $page_size, $include_total);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsGetNotes'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsGetNotesRequest($id, $tenant, $page = null, $page_size = null, $include_total = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsGetNotes'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsGetNotes'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }
        // query params
        if ($include_total !== null) {
            if('form' === 'form' && is_array($include_total)) {
                foreach($include_total as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeTotal'] = $include_total;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsHold
     *
     * Puts a job on hold
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2HoldJobRequest $crm_v2_hold_job_request crm_v2_hold_job_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function jobsHold($id, $tenant, $crm_v2_hold_job_request = null)
    {
        $this->jobsHoldWithHttpInfo($id, $tenant, $crm_v2_hold_job_request);
    }

    /**
     * Operation jobsHoldWithHttpInfo
     *
     * Puts a job on hold
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2HoldJobRequest $crm_v2_hold_job_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsHoldWithHttpInfo($id, $tenant, $crm_v2_hold_job_request = null)
    {
        $request = $this->jobsHoldRequest($id, $tenant, $crm_v2_hold_job_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsHoldAsync
     *
     * Puts a job on hold
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2HoldJobRequest $crm_v2_hold_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsHoldAsync($id, $tenant, $crm_v2_hold_job_request = null)
    {
        return $this->jobsHoldAsyncWithHttpInfo($id, $tenant, $crm_v2_hold_job_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsHoldAsyncWithHttpInfo
     *
     * Puts a job on hold
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2HoldJobRequest $crm_v2_hold_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsHoldAsyncWithHttpInfo($id, $tenant, $crm_v2_hold_job_request = null)
    {
        $returnType = '';
        $request = $this->jobsHoldRequest($id, $tenant, $crm_v2_hold_job_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsHold'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2HoldJobRequest $crm_v2_hold_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsHoldRequest($id, $tenant, $crm_v2_hold_job_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsHold'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsHold'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}/hold';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($crm_v2_hold_job_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($crm_v2_hold_job_request));
            } else {
                $httpBody = $crm_v2_hold_job_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsRemoveCancellation
     *
     * Removes cancellation from a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function jobsRemoveCancellation($id, $tenant)
    {
        $this->jobsRemoveCancellationWithHttpInfo($id, $tenant);
    }

    /**
     * Operation jobsRemoveCancellationWithHttpInfo
     *
     * Removes cancellation from a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsRemoveCancellationWithHttpInfo($id, $tenant)
    {
        $request = $this->jobsRemoveCancellationRequest($id, $tenant);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsRemoveCancellationAsync
     *
     * Removes cancellation from a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsRemoveCancellationAsync($id, $tenant)
    {
        return $this->jobsRemoveCancellationAsyncWithHttpInfo($id, $tenant)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsRemoveCancellationAsyncWithHttpInfo
     *
     * Removes cancellation from a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsRemoveCancellationAsyncWithHttpInfo($id, $tenant)
    {
        $returnType = '';
        $request = $this->jobsRemoveCancellationRequest($id, $tenant);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsRemoveCancellation'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsRemoveCancellationRequest($id, $tenant)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsRemoveCancellation'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsRemoveCancellation'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}/remove-cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobsUpdate
     *
     * Updates a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobRequest $crm_v2_update_job_request crm_v2_update_job_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\CrmV2JobResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobsUpdate($id, $tenant, $crm_v2_update_job_request = null)
    {
        list($response) = $this->jobsUpdateWithHttpInfo($id, $tenant, $crm_v2_update_job_request);
        return $response;
    }

    /**
     * Operation jobsUpdateWithHttpInfo
     *
     * Updates a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobRequest $crm_v2_update_job_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\CrmV2JobResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobsUpdateWithHttpInfo($id, $tenant, $crm_v2_update_job_request = null)
    {
        $request = $this->jobsUpdateRequest($id, $tenant, $crm_v2_update_job_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\CrmV2JobResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\CrmV2JobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\CrmV2JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobsUpdateAsync
     *
     * Updates a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobRequest $crm_v2_update_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsUpdateAsync($id, $tenant, $crm_v2_update_job_request = null)
    {
        return $this->jobsUpdateAsyncWithHttpInfo($id, $tenant, $crm_v2_update_job_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobsUpdateAsyncWithHttpInfo
     *
     * Updates a job
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobRequest $crm_v2_update_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobsUpdateAsyncWithHttpInfo($id, $tenant, $crm_v2_update_job_request = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobResponse';
        $request = $this->jobsUpdateRequest($id, $tenant, $crm_v2_update_job_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobsUpdate'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobRequest $crm_v2_update_job_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobsUpdateRequest($id, $tenant, $crm_v2_update_job_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobsUpdate'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobsUpdate'
            );
        }

        $resourcePath = '/tenant/{tenant}/jobs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($crm_v2_update_job_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($crm_v2_update_job_request));
            } else {
                $httpBody = $crm_v2_update_job_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
