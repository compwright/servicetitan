<?php
/**
 * DispatchV2GetNonJobAppointmentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dispatch
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * DispatchV2GetNonJobAppointmentResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DispatchV2GetNonJobAppointmentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dispatch.V2.GetNonJobAppointmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'technician_id' => 'int',
        'start' => '\DateTime',
        'name' => 'string',
        'duration' => 'string',
        'timesheet_code_id' => 'int',
        'summary' => 'string',
        'clear_dispatch_board' => 'bool',
        'clear_technician_view' => 'bool',
        'remove_technician_from_capacity_planning' => 'bool',
        'all_day' => 'bool',
        'active' => 'bool',
        'created_on' => '\DateTime',
        'created_by_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'technician_id' => 'int64',
        'start' => 'date-time',
        'name' => null,
        'duration' => 'time-span',
        'timesheet_code_id' => 'int64',
        'summary' => null,
        'clear_dispatch_board' => null,
        'clear_technician_view' => null,
        'remove_technician_from_capacity_planning' => null,
        'all_day' => null,
        'active' => null,
        'created_on' => 'date-time',
        'created_by_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'technician_id' => false,
        'start' => false,
        'name' => false,
        'duration' => false,
        'timesheet_code_id' => false,
        'summary' => false,
        'clear_dispatch_board' => false,
        'clear_technician_view' => false,
        'remove_technician_from_capacity_planning' => false,
        'all_day' => false,
        'active' => false,
        'created_on' => false,
        'created_by_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'technician_id' => 'technicianId',
        'start' => 'start',
        'name' => 'name',
        'duration' => 'duration',
        'timesheet_code_id' => 'timesheetCodeId',
        'summary' => 'summary',
        'clear_dispatch_board' => 'clearDispatchBoard',
        'clear_technician_view' => 'clearTechnicianView',
        'remove_technician_from_capacity_planning' => 'removeTechnicianFromCapacityPlanning',
        'all_day' => 'allDay',
        'active' => 'active',
        'created_on' => 'createdOn',
        'created_by_id' => 'createdById'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'technician_id' => 'setTechnicianId',
        'start' => 'setStart',
        'name' => 'setName',
        'duration' => 'setDuration',
        'timesheet_code_id' => 'setTimesheetCodeId',
        'summary' => 'setSummary',
        'clear_dispatch_board' => 'setClearDispatchBoard',
        'clear_technician_view' => 'setClearTechnicianView',
        'remove_technician_from_capacity_planning' => 'setRemoveTechnicianFromCapacityPlanning',
        'all_day' => 'setAllDay',
        'active' => 'setActive',
        'created_on' => 'setCreatedOn',
        'created_by_id' => 'setCreatedById'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'technician_id' => 'getTechnicianId',
        'start' => 'getStart',
        'name' => 'getName',
        'duration' => 'getDuration',
        'timesheet_code_id' => 'getTimesheetCodeId',
        'summary' => 'getSummary',
        'clear_dispatch_board' => 'getClearDispatchBoard',
        'clear_technician_view' => 'getClearTechnicianView',
        'remove_technician_from_capacity_planning' => 'getRemoveTechnicianFromCapacityPlanning',
        'all_day' => 'getAllDay',
        'active' => 'getActive',
        'created_on' => 'getCreatedOn',
        'created_by_id' => 'getCreatedById'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('technician_id', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('timesheet_code_id', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('clear_dispatch_board', $data ?? [], null);
        $this->setIfExists('clear_technician_view', $data ?? [], null);
        $this->setIfExists('remove_technician_from_capacity_planning', $data ?? [], null);
        $this->setIfExists('all_day', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
        $this->setIfExists('created_by_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['technician_id'] === null) {
            $invalidProperties[] = "'technician_id' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['timesheet_code_id'] === null) {
            $invalidProperties[] = "'timesheet_code_id' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['clear_dispatch_board'] === null) {
            $invalidProperties[] = "'clear_dispatch_board' can't be null";
        }
        if ($this->container['clear_technician_view'] === null) {
            $invalidProperties[] = "'clear_technician_view' can't be null";
        }
        if ($this->container['remove_technician_from_capacity_planning'] === null) {
            $invalidProperties[] = "'remove_technician_from_capacity_planning' can't be null";
        }
        if ($this->container['all_day'] === null) {
            $invalidProperties[] = "'all_day' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['created_by_id'] === null) {
            $invalidProperties[] = "'created_by_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets technician_id
     *
     * @return int
     */
    public function getTechnicianId()
    {
        return $this->container['technician_id'];
    }

    /**
     * Sets technician_id
     *
     * @param int $technician_id technician_id
     *
     * @return self
     */
    public function setTechnicianId($technician_id)
    {
        if (is_null($technician_id)) {
            throw new \InvalidArgumentException('non-nullable technician_id cannot be null');
        }
        $this->container['technician_id'] = $technician_id;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start start
     *
     * @return self
     */
    public function setStart($start)
    {
        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets timesheet_code_id
     *
     * @return int
     */
    public function getTimesheetCodeId()
    {
        return $this->container['timesheet_code_id'];
    }

    /**
     * Sets timesheet_code_id
     *
     * @param int $timesheet_code_id timesheet_code_id
     *
     * @return self
     */
    public function setTimesheetCodeId($timesheet_code_id)
    {
        if (is_null($timesheet_code_id)) {
            throw new \InvalidArgumentException('non-nullable timesheet_code_id cannot be null');
        }
        $this->container['timesheet_code_id'] = $timesheet_code_id;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets clear_dispatch_board
     *
     * @return bool
     */
    public function getClearDispatchBoard()
    {
        return $this->container['clear_dispatch_board'];
    }

    /**
     * Sets clear_dispatch_board
     *
     * @param bool $clear_dispatch_board clear_dispatch_board
     *
     * @return self
     */
    public function setClearDispatchBoard($clear_dispatch_board)
    {
        if (is_null($clear_dispatch_board)) {
            throw new \InvalidArgumentException('non-nullable clear_dispatch_board cannot be null');
        }
        $this->container['clear_dispatch_board'] = $clear_dispatch_board;

        return $this;
    }

    /**
     * Gets clear_technician_view
     *
     * @return bool
     */
    public function getClearTechnicianView()
    {
        return $this->container['clear_technician_view'];
    }

    /**
     * Sets clear_technician_view
     *
     * @param bool $clear_technician_view clear_technician_view
     *
     * @return self
     */
    public function setClearTechnicianView($clear_technician_view)
    {
        if (is_null($clear_technician_view)) {
            throw new \InvalidArgumentException('non-nullable clear_technician_view cannot be null');
        }
        $this->container['clear_technician_view'] = $clear_technician_view;

        return $this;
    }

    /**
     * Gets remove_technician_from_capacity_planning
     *
     * @return bool
     */
    public function getRemoveTechnicianFromCapacityPlanning()
    {
        return $this->container['remove_technician_from_capacity_planning'];
    }

    /**
     * Sets remove_technician_from_capacity_planning
     *
     * @param bool $remove_technician_from_capacity_planning remove_technician_from_capacity_planning
     *
     * @return self
     */
    public function setRemoveTechnicianFromCapacityPlanning($remove_technician_from_capacity_planning)
    {
        if (is_null($remove_technician_from_capacity_planning)) {
            throw new \InvalidArgumentException('non-nullable remove_technician_from_capacity_planning cannot be null');
        }
        $this->container['remove_technician_from_capacity_planning'] = $remove_technician_from_capacity_planning;

        return $this;
    }

    /**
     * Gets all_day
     *
     * @return bool
     */
    public function getAllDay()
    {
        return $this->container['all_day'];
    }

    /**
     * Sets all_day
     *
     * @param bool $all_day all_day
     *
     * @return self
     */
    public function setAllDay($all_day)
    {
        if (is_null($all_day)) {
            throw new \InvalidArgumentException('non-nullable all_day cannot be null');
        }
        $this->container['all_day'] = $all_day;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            throw new \InvalidArgumentException('non-nullable created_on cannot be null');
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int $created_by_id created_by_id
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        if (is_null($created_by_id)) {
            throw new \InvalidArgumentException('non-nullable created_by_id cannot be null');
        }
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


