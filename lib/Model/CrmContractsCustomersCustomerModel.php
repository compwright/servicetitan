<?php
/**
 * CrmContractsCustomersCustomerModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telecom
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * CrmContractsCustomersCustomerModel Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CrmContractsCustomersCustomerModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Crm.Contracts.Customers.CustomerModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'active' => 'bool',
        'name' => 'string',
        'email' => 'string',
        'balance' => 'float',
        'do_not_mail' => 'bool',
        'address' => '\CompWright\ServiceTitan\Model\AddressOutput',
        'import_id' => 'string',
        'do_not_service' => 'bool',
        'type' => '\CompWright\ServiceTitan\Model\CrmCustomersCustomerType',
        'contacts' => '\CompWright\ServiceTitan\Model\ContactsContractsContactOutputModel[]',
        'merged_to_id' => 'int',
        'modified_on' => '\DateTime',
        'memberships' => '\CompWright\ServiceTitan\Model\MembershipsMembershipModel[]',
        'has_active_membership' => 'bool',
        'custom_fields' => '\CompWright\ServiceTitan\Model\CustomFieldApiModel[]',
        'created_on' => '\DateTime',
        'created_by' => 'int',
        'phone_settings' => '\CompWright\ServiceTitan\Model\CrmContractsCustomersCustomerPhoneModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'active' => null,
        'name' => null,
        'email' => null,
        'balance' => 'decimal',
        'do_not_mail' => null,
        'address' => null,
        'import_id' => null,
        'do_not_service' => null,
        'type' => null,
        'contacts' => null,
        'merged_to_id' => 'int64',
        'modified_on' => 'date-time',
        'memberships' => null,
        'has_active_membership' => null,
        'custom_fields' => null,
        'created_on' => 'date-time',
        'created_by' => 'int64',
        'phone_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'active' => false,
        'name' => false,
        'email' => false,
        'balance' => true,
        'do_not_mail' => false,
        'address' => false,
        'import_id' => false,
        'do_not_service' => false,
        'type' => false,
        'contacts' => false,
        'merged_to_id' => true,
        'modified_on' => false,
        'memberships' => false,
        'has_active_membership' => true,
        'custom_fields' => false,
        'created_on' => false,
        'created_by' => true,
        'phone_settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'active' => 'active',
        'name' => 'name',
        'email' => 'email',
        'balance' => 'balance',
        'do_not_mail' => 'doNotMail',
        'address' => 'address',
        'import_id' => 'importId',
        'do_not_service' => 'doNotService',
        'type' => 'type',
        'contacts' => 'contacts',
        'merged_to_id' => 'mergedToId',
        'modified_on' => 'modifiedOn',
        'memberships' => 'memberships',
        'has_active_membership' => 'hasActiveMembership',
        'custom_fields' => 'customFields',
        'created_on' => 'createdOn',
        'created_by' => 'createdBy',
        'phone_settings' => 'phoneSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'active' => 'setActive',
        'name' => 'setName',
        'email' => 'setEmail',
        'balance' => 'setBalance',
        'do_not_mail' => 'setDoNotMail',
        'address' => 'setAddress',
        'import_id' => 'setImportId',
        'do_not_service' => 'setDoNotService',
        'type' => 'setType',
        'contacts' => 'setContacts',
        'merged_to_id' => 'setMergedToId',
        'modified_on' => 'setModifiedOn',
        'memberships' => 'setMemberships',
        'has_active_membership' => 'setHasActiveMembership',
        'custom_fields' => 'setCustomFields',
        'created_on' => 'setCreatedOn',
        'created_by' => 'setCreatedBy',
        'phone_settings' => 'setPhoneSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'active' => 'getActive',
        'name' => 'getName',
        'email' => 'getEmail',
        'balance' => 'getBalance',
        'do_not_mail' => 'getDoNotMail',
        'address' => 'getAddress',
        'import_id' => 'getImportId',
        'do_not_service' => 'getDoNotService',
        'type' => 'getType',
        'contacts' => 'getContacts',
        'merged_to_id' => 'getMergedToId',
        'modified_on' => 'getModifiedOn',
        'memberships' => 'getMemberships',
        'has_active_membership' => 'getHasActiveMembership',
        'custom_fields' => 'getCustomFields',
        'created_on' => 'getCreatedOn',
        'created_by' => 'getCreatedBy',
        'phone_settings' => 'getPhoneSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('do_not_mail', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('import_id', $data ?? [], null);
        $this->setIfExists('do_not_service', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('merged_to_id', $data ?? [], null);
        $this->setIfExists('modified_on', $data ?? [], null);
        $this->setIfExists('memberships', $data ?? [], null);
        $this->setIfExists('has_active_membership', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('phone_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['do_not_mail'] === null) {
            $invalidProperties[] = "'do_not_mail' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['import_id'] === null) {
            $invalidProperties[] = "'import_id' can't be null";
        }
        if ($this->container['do_not_service'] === null) {
            $invalidProperties[] = "'do_not_service' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['contacts'] === null) {
            $invalidProperties[] = "'contacts' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['memberships'] === null) {
            $invalidProperties[] = "'memberships' can't be null";
        }
        if ($this->container['custom_fields'] === null) {
            $invalidProperties[] = "'custom_fields' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['phone_settings'] === null) {
            $invalidProperties[] = "'phone_settings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CrmContractsCustomersCustomerModel., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            array_push($this->openAPINullablesSetToNull, 'balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets do_not_mail
     *
     * @return bool
     */
    public function getDoNotMail()
    {
        return $this->container['do_not_mail'];
    }

    /**
     * Sets do_not_mail
     *
     * @param bool $do_not_mail do_not_mail
     *
     * @return self
     */
    public function setDoNotMail($do_not_mail)
    {
        if (is_null($do_not_mail)) {
            throw new \InvalidArgumentException('non-nullable do_not_mail cannot be null');
        }
        $this->container['do_not_mail'] = $do_not_mail;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \CompWright\ServiceTitan\Model\AddressOutput
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \CompWright\ServiceTitan\Model\AddressOutput $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets import_id
     *
     * @return string
     */
    public function getImportId()
    {
        return $this->container['import_id'];
    }

    /**
     * Sets import_id
     *
     * @param string $import_id import_id
     *
     * @return self
     */
    public function setImportId($import_id)
    {
        if (is_null($import_id)) {
            throw new \InvalidArgumentException('non-nullable import_id cannot be null');
        }
        $this->container['import_id'] = $import_id;

        return $this;
    }

    /**
     * Gets do_not_service
     *
     * @return bool
     */
    public function getDoNotService()
    {
        return $this->container['do_not_service'];
    }

    /**
     * Sets do_not_service
     *
     * @param bool $do_not_service do_not_service
     *
     * @return self
     */
    public function setDoNotService($do_not_service)
    {
        if (is_null($do_not_service)) {
            throw new \InvalidArgumentException('non-nullable do_not_service cannot be null');
        }
        $this->container['do_not_service'] = $do_not_service;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \CompWright\ServiceTitan\Model\CrmCustomersCustomerType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \CompWright\ServiceTitan\Model\CrmCustomersCustomerType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \CompWright\ServiceTitan\Model\ContactsContractsContactOutputModel[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \CompWright\ServiceTitan\Model\ContactsContractsContactOutputModel[] $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets merged_to_id
     *
     * @return int|null
     */
    public function getMergedToId()
    {
        return $this->container['merged_to_id'];
    }

    /**
     * Sets merged_to_id
     *
     * @param int|null $merged_to_id merged_to_id
     *
     * @return self
     */
    public function setMergedToId($merged_to_id)
    {
        if (is_null($merged_to_id)) {
            array_push($this->openAPINullablesSetToNull, 'merged_to_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merged_to_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merged_to_id'] = $merged_to_id;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        if (is_null($modified_on)) {
            throw new \InvalidArgumentException('non-nullable modified_on cannot be null');
        }
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets memberships
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsMembershipModel[]
     */
    public function getMemberships()
    {
        return $this->container['memberships'];
    }

    /**
     * Sets memberships
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsMembershipModel[] $memberships memberships
     *
     * @return self
     */
    public function setMemberships($memberships)
    {
        if (is_null($memberships)) {
            throw new \InvalidArgumentException('non-nullable memberships cannot be null');
        }
        $this->container['memberships'] = $memberships;

        return $this;
    }

    /**
     * Gets has_active_membership
     *
     * @return bool|null
     */
    public function getHasActiveMembership()
    {
        return $this->container['has_active_membership'];
    }

    /**
     * Sets has_active_membership
     *
     * @param bool|null $has_active_membership has_active_membership
     *
     * @return self
     */
    public function setHasActiveMembership($has_active_membership)
    {
        if (is_null($has_active_membership)) {
            array_push($this->openAPINullablesSetToNull, 'has_active_membership');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_active_membership', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_active_membership'] = $has_active_membership;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \CompWright\ServiceTitan\Model\CustomFieldApiModel[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \CompWright\ServiceTitan\Model\CustomFieldApiModel[] $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            throw new \InvalidArgumentException('non-nullable created_on cannot be null');
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            array_push($this->openAPINullablesSetToNull, 'created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets phone_settings
     *
     * @return \CompWright\ServiceTitan\Model\CrmContractsCustomersCustomerPhoneModel[]
     */
    public function getPhoneSettings()
    {
        return $this->container['phone_settings'];
    }

    /**
     * Sets phone_settings
     *
     * @param \CompWright\ServiceTitan\Model\CrmContractsCustomersCustomerPhoneModel[] $phone_settings phone_settings
     *
     * @return self
     */
    public function setPhoneSettings($phone_settings)
    {
        if (is_null($phone_settings)) {
            throw new \InvalidArgumentException('non-nullable phone_settings cannot be null');
        }
        $this->container['phone_settings'] = $phone_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


