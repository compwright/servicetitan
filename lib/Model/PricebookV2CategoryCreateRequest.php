<?php
/**
 * PricebookV2CategoryCreateRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pricebook
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * PricebookV2CategoryCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PricebookV2CategoryCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pricebook.V2.CategoryCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'active' => 'bool',
        'description' => 'string',
        'parent_id' => 'int',
        'position' => 'int',
        'image' => 'string',
        'category_type' => 'OneOfPricebookV2CategoryType',
        'business_unit_ids' => 'int[]',
        'sku_images' => 'string[]',
        'sku_videos' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'active' => null,
        'description' => null,
        'parent_id' => 'int64',
        'position' => 'int32',
        'image' => null,
        'category_type' => null,
        'business_unit_ids' => 'int64',
        'sku_images' => null,
        'sku_videos' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'active' => 'active',
        'description' => 'description',
        'parent_id' => 'parentId',
        'position' => 'position',
        'image' => 'image',
        'category_type' => 'categoryType',
        'business_unit_ids' => 'businessUnitIds',
        'sku_images' => 'skuImages',
        'sku_videos' => 'skuVideos'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'active' => 'setActive',
        'description' => 'setDescription',
        'parent_id' => 'setParentId',
        'position' => 'setPosition',
        'image' => 'setImage',
        'category_type' => 'setCategoryType',
        'business_unit_ids' => 'setBusinessUnitIds',
        'sku_images' => 'setSkuImages',
        'sku_videos' => 'setSkuVideos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'active' => 'getActive',
        'description' => 'getDescription',
        'parent_id' => 'getParentId',
        'position' => 'getPosition',
        'image' => 'getImage',
        'category_type' => 'getCategoryType',
        'business_unit_ids' => 'getBusinessUnitIds',
        'sku_images' => 'getSkuImages',
        'sku_videos' => 'getSkuVideos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['parent_id'] = $data['parent_id'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['category_type'] = $data['category_type'] ?? null;
        $this->container['business_unit_ids'] = $data['business_unit_ids'] ?? null;
        $this->container['sku_images'] = $data['sku_images'] ?? null;
        $this->container['sku_videos'] = $data['sku_videos'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['category_type'] === null) {
            $invalidProperties[] = "'category_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the category
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Active shows if this category is currently active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description that described the category
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id The id of the category that is the parent of this item
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position location of this item
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image The image to display as the category
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return OneOfPricebookV2CategoryType
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param OneOfPricebookV2CategoryType $category_type The category type. This field can be Service or Material.
     *
     * @return self
     */
    public function setCategoryType($category_type)
    {
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets business_unit_ids
     *
     * @return int[]|null
     */
    public function getBusinessUnitIds()
    {
        return $this->container['business_unit_ids'];
    }

    /**
     * Sets business_unit_ids
     *
     * @param int[]|null $business_unit_ids The business units that are associated with this category
     *
     * @return self
     */
    public function setBusinessUnitIds($business_unit_ids)
    {
        $this->container['business_unit_ids'] = $business_unit_ids;

        return $this;
    }

    /**
     * Gets sku_images
     *
     * @return string[]|null
     */
    public function getSkuImages()
    {
        return $this->container['sku_images'];
    }

    /**
     * Sets sku_images
     *
     * @param string[]|null $sku_images The images that will be used for the SKUs under this category
     *
     * @return self
     */
    public function setSkuImages($sku_images)
    {
        $this->container['sku_images'] = $sku_images;

        return $this;
    }

    /**
     * Gets sku_videos
     *
     * @return string[]|null
     */
    public function getSkuVideos()
    {
        return $this->container['sku_videos'];
    }

    /**
     * Sets sku_videos
     *
     * @param string[]|null $sku_videos The videos that will be used for the videos under this category
     *
     * @return self
     */
    public function setSkuVideos($sku_videos)
    {
        $this->container['sku_videos'] = $sku_videos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


