<?php
/**
 * AccountingV2InventoryBillResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * AccountingV2InventoryBillResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountingV2InventoryBillResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Accounting.V2.InventoryBillResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'purchase_order_id' => 'int',
        'sync_status' => 'string',
        'reference_number' => 'string',
        'vendor_number' => 'string',
        'summary' => 'string',
        'bill_date' => '\DateTime',
        'bill_amount' => 'string',
        'tax_amount' => 'string',
        'shipping_amount' => 'string',
        'created_by' => 'string',
        'created_on' => '\DateTime',
        'term_name' => 'string',
        'due_date' => '\DateTime',
        'ship_to_description' => 'string',
        'batch' => '\CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBatch',
        'business_unit' => '\CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBusinessUnit',
        'vendor' => '\CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBusinessUnit',
        'ship_to' => '\CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseShipTo',
        'items' => '\CompWright\ServiceTitan\Model\AccountingV2InventoryBillItemResponse[]',
        'custom_fields' => '\CompWright\ServiceTitan\Model\AccountingV2CustomFieldResponse[]',
        'job_id' => 'int',
        'job_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'purchase_order_id' => 'int64',
        'sync_status' => null,
        'reference_number' => null,
        'vendor_number' => null,
        'summary' => null,
        'bill_date' => 'date-time',
        'bill_amount' => null,
        'tax_amount' => null,
        'shipping_amount' => null,
        'created_by' => null,
        'created_on' => 'date-time',
        'term_name' => null,
        'due_date' => 'date-time',
        'ship_to_description' => null,
        'batch' => null,
        'business_unit' => null,
        'vendor' => null,
        'ship_to' => null,
        'items' => null,
        'custom_fields' => null,
        'job_id' => 'int64',
        'job_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'purchase_order_id' => true,
        'sync_status' => true,
        'reference_number' => true,
        'vendor_number' => true,
        'summary' => true,
        'bill_date' => true,
        'bill_amount' => true,
        'tax_amount' => true,
        'shipping_amount' => true,
        'created_by' => true,
        'created_on' => true,
        'term_name' => true,
        'due_date' => true,
        'ship_to_description' => true,
        'batch' => true,
        'business_unit' => true,
        'vendor' => true,
        'ship_to' => true,
        'items' => true,
        'custom_fields' => true,
        'job_id' => true,
        'job_number' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'purchase_order_id' => 'purchaseOrderId',
        'sync_status' => 'syncStatus',
        'reference_number' => 'referenceNumber',
        'vendor_number' => 'vendorNumber',
        'summary' => 'summary',
        'bill_date' => 'billDate',
        'bill_amount' => 'billAmount',
        'tax_amount' => 'taxAmount',
        'shipping_amount' => 'shippingAmount',
        'created_by' => 'createdBy',
        'created_on' => 'createdOn',
        'term_name' => 'termName',
        'due_date' => 'dueDate',
        'ship_to_description' => 'shipToDescription',
        'batch' => 'batch',
        'business_unit' => 'businessUnit',
        'vendor' => 'vendor',
        'ship_to' => 'shipTo',
        'items' => 'items',
        'custom_fields' => 'customFields',
        'job_id' => 'jobId',
        'job_number' => 'jobNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'purchase_order_id' => 'setPurchaseOrderId',
        'sync_status' => 'setSyncStatus',
        'reference_number' => 'setReferenceNumber',
        'vendor_number' => 'setVendorNumber',
        'summary' => 'setSummary',
        'bill_date' => 'setBillDate',
        'bill_amount' => 'setBillAmount',
        'tax_amount' => 'setTaxAmount',
        'shipping_amount' => 'setShippingAmount',
        'created_by' => 'setCreatedBy',
        'created_on' => 'setCreatedOn',
        'term_name' => 'setTermName',
        'due_date' => 'setDueDate',
        'ship_to_description' => 'setShipToDescription',
        'batch' => 'setBatch',
        'business_unit' => 'setBusinessUnit',
        'vendor' => 'setVendor',
        'ship_to' => 'setShipTo',
        'items' => 'setItems',
        'custom_fields' => 'setCustomFields',
        'job_id' => 'setJobId',
        'job_number' => 'setJobNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'purchase_order_id' => 'getPurchaseOrderId',
        'sync_status' => 'getSyncStatus',
        'reference_number' => 'getReferenceNumber',
        'vendor_number' => 'getVendorNumber',
        'summary' => 'getSummary',
        'bill_date' => 'getBillDate',
        'bill_amount' => 'getBillAmount',
        'tax_amount' => 'getTaxAmount',
        'shipping_amount' => 'getShippingAmount',
        'created_by' => 'getCreatedBy',
        'created_on' => 'getCreatedOn',
        'term_name' => 'getTermName',
        'due_date' => 'getDueDate',
        'ship_to_description' => 'getShipToDescription',
        'batch' => 'getBatch',
        'business_unit' => 'getBusinessUnit',
        'vendor' => 'getVendor',
        'ship_to' => 'getShipTo',
        'items' => 'getItems',
        'custom_fields' => 'getCustomFields',
        'job_id' => 'getJobId',
        'job_number' => 'getJobNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('purchase_order_id', $data ?? [], null);
        $this->setIfExists('sync_status', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('vendor_number', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('bill_date', $data ?? [], null);
        $this->setIfExists('bill_amount', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
        $this->setIfExists('term_name', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('ship_to_description', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('business_unit', $data ?? [], null);
        $this->setIfExists('vendor', $data ?? [], null);
        $this->setIfExists('ship_to', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('job_id', $data ?? [], null);
        $this->setIfExists('job_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets purchase_order_id
     *
     * @return int|null
     */
    public function getPurchaseOrderId()
    {
        return $this->container['purchase_order_id'];
    }

    /**
     * Sets purchase_order_id
     *
     * @param int|null $purchase_order_id purchase_order_id
     *
     * @return self
     */
    public function setPurchaseOrderId($purchase_order_id)
    {
        if (is_null($purchase_order_id)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_order_id'] = $purchase_order_id;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return string|null
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param string|null $sync_status sync_status
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {
        if (is_null($sync_status)) {
            array_push($this->openAPINullablesSetToNull, 'sync_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number reference_number
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        if (is_null($reference_number)) {
            array_push($this->openAPINullablesSetToNull, 'reference_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets vendor_number
     *
     * @return string|null
     */
    public function getVendorNumber()
    {
        return $this->container['vendor_number'];
    }

    /**
     * Sets vendor_number
     *
     * @param string|null $vendor_number vendor_number
     *
     * @return self
     */
    public function setVendorNumber($vendor_number)
    {
        if (is_null($vendor_number)) {
            array_push($this->openAPINullablesSetToNull, 'vendor_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor_number'] = $vendor_number;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets bill_date
     *
     * @return \DateTime|null
     */
    public function getBillDate()
    {
        return $this->container['bill_date'];
    }

    /**
     * Sets bill_date
     *
     * @param \DateTime|null $bill_date bill_date
     *
     * @return self
     */
    public function setBillDate($bill_date)
    {
        if (is_null($bill_date)) {
            array_push($this->openAPINullablesSetToNull, 'bill_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bill_date'] = $bill_date;

        return $this;
    }

    /**
     * Gets bill_amount
     *
     * @return string|null
     */
    public function getBillAmount()
    {
        return $this->container['bill_amount'];
    }

    /**
     * Sets bill_amount
     *
     * @param string|null $bill_amount bill_amount
     *
     * @return self
     */
    public function setBillAmount($bill_amount)
    {
        if (is_null($bill_amount)) {
            array_push($this->openAPINullablesSetToNull, 'bill_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bill_amount'] = $bill_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return string|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param string|null $tax_amount tax_amount
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            array_push($this->openAPINullablesSetToNull, 'tax_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return string|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param string|null $shipping_amount shipping_amount
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            array_push($this->openAPINullablesSetToNull, 'created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime|null $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            array_push($this->openAPINullablesSetToNull, 'created_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets term_name
     *
     * @return string|null
     */
    public function getTermName()
    {
        return $this->container['term_name'];
    }

    /**
     * Sets term_name
     *
     * @param string|null $term_name term_name
     *
     * @return self
     */
    public function setTermName($term_name)
    {
        if (is_null($term_name)) {
            array_push($this->openAPINullablesSetToNull, 'term_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('term_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['term_name'] = $term_name;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            array_push($this->openAPINullablesSetToNull, 'due_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('due_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets ship_to_description
     *
     * @return string|null
     */
    public function getShipToDescription()
    {
        return $this->container['ship_to_description'];
    }

    /**
     * Sets ship_to_description
     *
     * @param string|null $ship_to_description ship_to_description
     *
     * @return self
     */
    public function setShipToDescription($ship_to_description)
    {
        if (is_null($ship_to_description)) {
            array_push($this->openAPINullablesSetToNull, 'ship_to_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_to_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_to_description'] = $ship_to_description;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBatch|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBatch|null $batch batch
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBusinessUnit|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBusinessUnit|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        if (is_null($business_unit)) {
            array_push($this->openAPINullablesSetToNull, 'business_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBusinessUnit|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseBusinessUnit|null $vendor vendor
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        if (is_null($vendor)) {
            array_push($this->openAPINullablesSetToNull, 'vendor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseShipTo|null
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2InventoryBillResponseShipTo|null $ship_to ship_to
     *
     * @return self
     */
    public function setShipTo($ship_to)
    {
        if (is_null($ship_to)) {
            array_push($this->openAPINullablesSetToNull, 'ship_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2InventoryBillItemResponse[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2InventoryBillItemResponse[]|null $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            array_push($this->openAPINullablesSetToNull, 'items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2CustomFieldResponse[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2CustomFieldResponse[]|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return int|null
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param int|null $job_id job_id
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        if (is_null($job_id)) {
            array_push($this->openAPINullablesSetToNull, 'job_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets job_number
     *
     * @return string|null
     */
    public function getJobNumber()
    {
        return $this->container['job_number'];
    }

    /**
     * Sets job_number
     *
     * @param string|null $job_number job_number
     *
     * @return self
     */
    public function setJobNumber($job_number)
    {
        if (is_null($job_number)) {
            array_push($this->openAPINullablesSetToNull, 'job_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_number'] = $job_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


