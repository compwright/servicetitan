<?php
/**
 * MembershipsV2MembershipSaleInvoiceCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Memberships
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * MembershipsV2MembershipSaleInvoiceCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MembershipsV2MembershipSaleInvoiceCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Memberships.V2.MembershipSaleInvoiceCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_id' => 'int',
        'business_unit_id' => 'int',
        'sale_task_id' => 'int',
        'duration_billing_id' => 'int',
        'location_id' => 'int',
        'recurring_service_action' => '\CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipUpdateRequestRecurringServiceAction',
        'recurring_location_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_id' => 'int64',
        'business_unit_id' => 'int64',
        'sale_task_id' => 'int64',
        'duration_billing_id' => 'int64',
        'location_id' => 'int64',
        'recurring_service_action' => null,
        'recurring_location_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer_id' => false,
        'business_unit_id' => false,
        'sale_task_id' => false,
        'duration_billing_id' => false,
        'location_id' => true,
        'recurring_service_action' => false,
        'recurring_location_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customerId',
        'business_unit_id' => 'businessUnitId',
        'sale_task_id' => 'saleTaskId',
        'duration_billing_id' => 'durationBillingId',
        'location_id' => 'locationId',
        'recurring_service_action' => 'recurringServiceAction',
        'recurring_location_id' => 'recurringLocationId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'business_unit_id' => 'setBusinessUnitId',
        'sale_task_id' => 'setSaleTaskId',
        'duration_billing_id' => 'setDurationBillingId',
        'location_id' => 'setLocationId',
        'recurring_service_action' => 'setRecurringServiceAction',
        'recurring_location_id' => 'setRecurringLocationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'business_unit_id' => 'getBusinessUnitId',
        'sale_task_id' => 'getSaleTaskId',
        'duration_billing_id' => 'getDurationBillingId',
        'location_id' => 'getLocationId',
        'recurring_service_action' => 'getRecurringServiceAction',
        'recurring_location_id' => 'getRecurringLocationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('business_unit_id', $data ?? [], null);
        $this->setIfExists('sale_task_id', $data ?? [], null);
        $this->setIfExists('duration_billing_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('recurring_service_action', $data ?? [], null);
        $this->setIfExists('recurring_location_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['business_unit_id'] === null) {
            $invalidProperties[] = "'business_unit_id' can't be null";
        }
        if ($this->container['sale_task_id'] === null) {
            $invalidProperties[] = "'sale_task_id' can't be null";
        }
        if ($this->container['duration_billing_id'] === null) {
            $invalidProperties[] = "'duration_billing_id' can't be null";
        }
        if ($this->container['recurring_service_action'] === null) {
            $invalidProperties[] = "'recurring_service_action' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id ID of the customer you are creating the Membership Sale Invoice for
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int $business_unit_id Business unit ID
     *
     * @return self
     */
    public function setBusinessUnitId($business_unit_id)
    {
        if (is_null($business_unit_id)) {
            throw new \InvalidArgumentException('non-nullable business_unit_id cannot be null');
        }
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets sale_task_id
     *
     * @return int
     */
    public function getSaleTaskId()
    {
        return $this->container['sale_task_id'];
    }

    /**
     * Sets sale_task_id
     *
     * @param int $sale_task_id ID of the sale task that is creating the membership
     *
     * @return self
     */
    public function setSaleTaskId($sale_task_id)
    {
        if (is_null($sale_task_id)) {
            throw new \InvalidArgumentException('non-nullable sale_task_id cannot be null');
        }
        $this->container['sale_task_id'] = $sale_task_id;

        return $this;
    }

    /**
     * Gets duration_billing_id
     *
     * @return int
     */
    public function getDurationBillingId()
    {
        return $this->container['duration_billing_id'];
    }

    /**
     * Sets duration_billing_id
     *
     * @param int $duration_billing_id ID of the duration/billing option to be used
     *
     * @return self
     */
    public function setDurationBillingId($duration_billing_id)
    {
        if (is_null($duration_billing_id)) {
            throw new \InvalidArgumentException('non-nullable duration_billing_id cannot be null');
        }
        $this->container['duration_billing_id'] = $duration_billing_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id Discount location ID of this membership (null if all locations)
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets recurring_service_action
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipUpdateRequestRecurringServiceAction
     */
    public function getRecurringServiceAction()
    {
        return $this->container['recurring_service_action'];
    }

    /**
     * Sets recurring_service_action
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipUpdateRequestRecurringServiceAction $recurring_service_action recurring_service_action
     *
     * @return self
     */
    public function setRecurringServiceAction($recurring_service_action)
    {
        if (is_null($recurring_service_action)) {
            throw new \InvalidArgumentException('non-nullable recurring_service_action cannot be null');
        }
        $this->container['recurring_service_action'] = $recurring_service_action;

        return $this;
    }

    /**
     * Gets recurring_location_id
     *
     * @return int|null
     */
    public function getRecurringLocationId()
    {
        return $this->container['recurring_location_id'];
    }

    /**
     * Sets recurring_location_id
     *
     * @param int|null $recurring_location_id The location at which recurring services are scheduled (null if all locations)
     *
     * @return self
     */
    public function setRecurringLocationId($recurring_location_id)
    {
        if (is_null($recurring_location_id)) {
            array_push($this->openAPINullablesSetToNull, 'recurring_location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recurring_location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recurring_location_id'] = $recurring_location_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


