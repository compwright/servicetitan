<?php
/**
 * AccountingV2PaymentTermPenaltyAPIModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * AccountingV2PaymentTermPenaltyAPIModel Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountingV2PaymentTermPenaltyAPIModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Accounting.V2.PaymentTermPenaltyAPIModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'penalty_apply_to' => '\CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyApplyTo',
        'penalty' => 'float',
        'penalty_type' => '\CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyType',
        'max_penalty_amount' => 'float',
        'penalty_frequency' => '\CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyFrequency',
        'service_task_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'penalty_apply_to' => null,
        'penalty' => 'decimal',
        'penalty_type' => null,
        'max_penalty_amount' => 'decimal',
        'penalty_frequency' => null,
        'service_task_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'penalty_apply_to' => true,
        'penalty' => true,
        'penalty_type' => true,
        'max_penalty_amount' => true,
        'penalty_frequency' => true,
        'service_task_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'penalty_apply_to' => 'penaltyApplyTo',
        'penalty' => 'penalty',
        'penalty_type' => 'penaltyType',
        'max_penalty_amount' => 'maxPenaltyAmount',
        'penalty_frequency' => 'penaltyFrequency',
        'service_task_id' => 'serviceTaskId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'penalty_apply_to' => 'setPenaltyApplyTo',
        'penalty' => 'setPenalty',
        'penalty_type' => 'setPenaltyType',
        'max_penalty_amount' => 'setMaxPenaltyAmount',
        'penalty_frequency' => 'setPenaltyFrequency',
        'service_task_id' => 'setServiceTaskId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'penalty_apply_to' => 'getPenaltyApplyTo',
        'penalty' => 'getPenalty',
        'penalty_type' => 'getPenaltyType',
        'max_penalty_amount' => 'getMaxPenaltyAmount',
        'penalty_frequency' => 'getPenaltyFrequency',
        'service_task_id' => 'getServiceTaskId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('penalty_apply_to', $data ?? [], null);
        $this->setIfExists('penalty', $data ?? [], null);
        $this->setIfExists('penalty_type', $data ?? [], null);
        $this->setIfExists('max_penalty_amount', $data ?? [], null);
        $this->setIfExists('penalty_frequency', $data ?? [], null);
        $this->setIfExists('service_task_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets penalty_apply_to
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyApplyTo|null
     */
    public function getPenaltyApplyTo()
    {
        return $this->container['penalty_apply_to'];
    }

    /**
     * Sets penalty_apply_to
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyApplyTo|null $penalty_apply_to penalty_apply_to
     *
     * @return self
     */
    public function setPenaltyApplyTo($penalty_apply_to)
    {
        if (is_null($penalty_apply_to)) {
            array_push($this->openAPINullablesSetToNull, 'penalty_apply_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('penalty_apply_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['penalty_apply_to'] = $penalty_apply_to;

        return $this;
    }

    /**
     * Gets penalty
     *
     * @return float|null
     */
    public function getPenalty()
    {
        return $this->container['penalty'];
    }

    /**
     * Sets penalty
     *
     * @param float|null $penalty penalty
     *
     * @return self
     */
    public function setPenalty($penalty)
    {
        if (is_null($penalty)) {
            array_push($this->openAPINullablesSetToNull, 'penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['penalty'] = $penalty;

        return $this;
    }

    /**
     * Gets penalty_type
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyType|null
     */
    public function getPenaltyType()
    {
        return $this->container['penalty_type'];
    }

    /**
     * Sets penalty_type
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyType|null $penalty_type penalty_type
     *
     * @return self
     */
    public function setPenaltyType($penalty_type)
    {
        if (is_null($penalty_type)) {
            array_push($this->openAPINullablesSetToNull, 'penalty_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('penalty_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['penalty_type'] = $penalty_type;

        return $this;
    }

    /**
     * Gets max_penalty_amount
     *
     * @return float|null
     */
    public function getMaxPenaltyAmount()
    {
        return $this->container['max_penalty_amount'];
    }

    /**
     * Sets max_penalty_amount
     *
     * @param float|null $max_penalty_amount max_penalty_amount
     *
     * @return self
     */
    public function setMaxPenaltyAmount($max_penalty_amount)
    {
        if (is_null($max_penalty_amount)) {
            array_push($this->openAPINullablesSetToNull, 'max_penalty_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_penalty_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_penalty_amount'] = $max_penalty_amount;

        return $this;
    }

    /**
     * Gets penalty_frequency
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyFrequency|null
     */
    public function getPenaltyFrequency()
    {
        return $this->container['penalty_frequency'];
    }

    /**
     * Sets penalty_frequency
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2PaymentTermPenaltyAPIModelPenaltyFrequency|null $penalty_frequency penalty_frequency
     *
     * @return self
     */
    public function setPenaltyFrequency($penalty_frequency)
    {
        if (is_null($penalty_frequency)) {
            array_push($this->openAPINullablesSetToNull, 'penalty_frequency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('penalty_frequency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['penalty_frequency'] = $penalty_frequency;

        return $this;
    }

    /**
     * Gets service_task_id
     *
     * @return int|null
     */
    public function getServiceTaskId()
    {
        return $this->container['service_task_id'];
    }

    /**
     * Sets service_task_id
     *
     * @param int|null $service_task_id service_task_id
     *
     * @return self
     */
    public function setServiceTaskId($service_task_id)
    {
        if (is_null($service_task_id)) {
            array_push($this->openAPINullablesSetToNull, 'service_task_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_task_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_task_id'] = $service_task_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


