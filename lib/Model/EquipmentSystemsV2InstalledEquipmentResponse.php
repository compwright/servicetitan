<?php
/**
 * EquipmentSystemsV2InstalledEquipmentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Equipment Systems
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * EquipmentSystemsV2InstalledEquipmentResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EquipmentSystemsV2InstalledEquipmentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EquipmentSystems.V2.InstalledEquipmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'location_id' => 'int',
        'customer_id' => 'int',
        'name' => 'string',
        'installed_on' => '\DateTime',
        'serial_number' => 'string',
        'memo' => 'string',
        'manufacturer' => 'string',
        'model' => 'string',
        'cost' => 'float',
        'manufacturer_warranty_start' => '\DateTime',
        'manufacturer_warranty_end' => '\DateTime',
        'service_provider_warranty_start' => '\DateTime',
        'service_provider_warranty_end' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'location_id' => 'int64',
        'customer_id' => 'int64',
        'name' => null,
        'installed_on' => 'date-time',
        'serial_number' => null,
        'memo' => null,
        'manufacturer' => null,
        'model' => null,
        'cost' => 'decimal',
        'manufacturer_warranty_start' => 'date-time',
        'manufacturer_warranty_end' => 'date-time',
        'service_provider_warranty_start' => 'date-time',
        'service_provider_warranty_end' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'location_id' => false,
        'customer_id' => false,
        'name' => false,
        'installed_on' => true,
        'serial_number' => false,
        'memo' => false,
        'manufacturer' => false,
        'model' => false,
        'cost' => false,
        'manufacturer_warranty_start' => true,
        'manufacturer_warranty_end' => true,
        'service_provider_warranty_start' => true,
        'service_provider_warranty_end' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'location_id' => 'locationId',
        'customer_id' => 'customerId',
        'name' => 'name',
        'installed_on' => 'installedOn',
        'serial_number' => 'serialNumber',
        'memo' => 'memo',
        'manufacturer' => 'manufacturer',
        'model' => 'model',
        'cost' => 'cost',
        'manufacturer_warranty_start' => 'manufacturerWarrantyStart',
        'manufacturer_warranty_end' => 'manufacturerWarrantyEnd',
        'service_provider_warranty_start' => 'serviceProviderWarrantyStart',
        'service_provider_warranty_end' => 'serviceProviderWarrantyEnd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'location_id' => 'setLocationId',
        'customer_id' => 'setCustomerId',
        'name' => 'setName',
        'installed_on' => 'setInstalledOn',
        'serial_number' => 'setSerialNumber',
        'memo' => 'setMemo',
        'manufacturer' => 'setManufacturer',
        'model' => 'setModel',
        'cost' => 'setCost',
        'manufacturer_warranty_start' => 'setManufacturerWarrantyStart',
        'manufacturer_warranty_end' => 'setManufacturerWarrantyEnd',
        'service_provider_warranty_start' => 'setServiceProviderWarrantyStart',
        'service_provider_warranty_end' => 'setServiceProviderWarrantyEnd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'location_id' => 'getLocationId',
        'customer_id' => 'getCustomerId',
        'name' => 'getName',
        'installed_on' => 'getInstalledOn',
        'serial_number' => 'getSerialNumber',
        'memo' => 'getMemo',
        'manufacturer' => 'getManufacturer',
        'model' => 'getModel',
        'cost' => 'getCost',
        'manufacturer_warranty_start' => 'getManufacturerWarrantyStart',
        'manufacturer_warranty_end' => 'getManufacturerWarrantyEnd',
        'service_provider_warranty_start' => 'getServiceProviderWarrantyStart',
        'service_provider_warranty_end' => 'getServiceProviderWarrantyEnd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('installed_on', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('manufacturer_warranty_start', $data ?? [], null);
        $this->setIfExists('manufacturer_warranty_end', $data ?? [], null);
        $this->setIfExists('service_provider_warranty_start', $data ?? [], null);
        $this->setIfExists('service_provider_warranty_end', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['location_id'] === null) {
            $invalidProperties[] = "'location_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['serial_number'] === null) {
            $invalidProperties[] = "'serial_number' can't be null";
        }
        if ($this->container['memo'] === null) {
            $invalidProperties[] = "'memo' can't be null";
        }
        if ($this->container['manufacturer'] === null) {
            $invalidProperties[] = "'manufacturer' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id location_id
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets installed_on
     *
     * @return \DateTime|null
     */
    public function getInstalledOn()
    {
        return $this->container['installed_on'];
    }

    /**
     * Sets installed_on
     *
     * @param \DateTime|null $installed_on installed_on
     *
     * @return self
     */
    public function setInstalledOn($installed_on)
    {
        if (is_null($installed_on)) {
            array_push($this->openAPINullablesSetToNull, 'installed_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('installed_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['installed_on'] = $installed_on;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets manufacturer_warranty_start
     *
     * @return \DateTime|null
     */
    public function getManufacturerWarrantyStart()
    {
        return $this->container['manufacturer_warranty_start'];
    }

    /**
     * Sets manufacturer_warranty_start
     *
     * @param \DateTime|null $manufacturer_warranty_start manufacturer_warranty_start
     *
     * @return self
     */
    public function setManufacturerWarrantyStart($manufacturer_warranty_start)
    {
        if (is_null($manufacturer_warranty_start)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturer_warranty_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturer_warranty_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacturer_warranty_start'] = $manufacturer_warranty_start;

        return $this;
    }

    /**
     * Gets manufacturer_warranty_end
     *
     * @return \DateTime|null
     */
    public function getManufacturerWarrantyEnd()
    {
        return $this->container['manufacturer_warranty_end'];
    }

    /**
     * Sets manufacturer_warranty_end
     *
     * @param \DateTime|null $manufacturer_warranty_end manufacturer_warranty_end
     *
     * @return self
     */
    public function setManufacturerWarrantyEnd($manufacturer_warranty_end)
    {
        if (is_null($manufacturer_warranty_end)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturer_warranty_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturer_warranty_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manufacturer_warranty_end'] = $manufacturer_warranty_end;

        return $this;
    }

    /**
     * Gets service_provider_warranty_start
     *
     * @return \DateTime|null
     */
    public function getServiceProviderWarrantyStart()
    {
        return $this->container['service_provider_warranty_start'];
    }

    /**
     * Sets service_provider_warranty_start
     *
     * @param \DateTime|null $service_provider_warranty_start service_provider_warranty_start
     *
     * @return self
     */
    public function setServiceProviderWarrantyStart($service_provider_warranty_start)
    {
        if (is_null($service_provider_warranty_start)) {
            array_push($this->openAPINullablesSetToNull, 'service_provider_warranty_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_provider_warranty_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_provider_warranty_start'] = $service_provider_warranty_start;

        return $this;
    }

    /**
     * Gets service_provider_warranty_end
     *
     * @return \DateTime|null
     */
    public function getServiceProviderWarrantyEnd()
    {
        return $this->container['service_provider_warranty_end'];
    }

    /**
     * Sets service_provider_warranty_end
     *
     * @param \DateTime|null $service_provider_warranty_end service_provider_warranty_end
     *
     * @return self
     */
    public function setServiceProviderWarrantyEnd($service_provider_warranty_end)
    {
        if (is_null($service_provider_warranty_end)) {
            array_push($this->openAPINullablesSetToNull, 'service_provider_warranty_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_provider_warranty_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_provider_warranty_end'] = $service_provider_warranty_end;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


