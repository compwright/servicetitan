<?php
/**
 * MembershipsV2LocationRecurringServiceEventResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Memberships
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * MembershipsV2LocationRecurringServiceEventResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MembershipsV2LocationRecurringServiceEventResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Memberships.V2.LocationRecurringServiceEventResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'location_recurring_service_id' => 'int',
        'location_recurring_service_name' => 'string',
        'membership_id' => 'int',
        'membership_name' => 'string',
        'status' => 'OneOfMembershipsV2OpportunityStatus',
        'date' => '\DateTime',
        'created_on' => '\DateTime',
        'created_by_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'location_recurring_service_id' => 'int64',
        'location_recurring_service_name' => null,
        'membership_id' => 'int64',
        'membership_name' => null,
        'status' => null,
        'date' => 'date-time',
        'created_on' => 'date-time',
        'created_by_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'location_recurring_service_id' => 'locationRecurringServiceId',
        'location_recurring_service_name' => 'locationRecurringServiceName',
        'membership_id' => 'membershipId',
        'membership_name' => 'membershipName',
        'status' => 'status',
        'date' => 'date',
        'created_on' => 'createdOn',
        'created_by_id' => 'createdById'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'location_recurring_service_id' => 'setLocationRecurringServiceId',
        'location_recurring_service_name' => 'setLocationRecurringServiceName',
        'membership_id' => 'setMembershipId',
        'membership_name' => 'setMembershipName',
        'status' => 'setStatus',
        'date' => 'setDate',
        'created_on' => 'setCreatedOn',
        'created_by_id' => 'setCreatedById'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'location_recurring_service_id' => 'getLocationRecurringServiceId',
        'location_recurring_service_name' => 'getLocationRecurringServiceName',
        'membership_id' => 'getMembershipId',
        'membership_name' => 'getMembershipName',
        'status' => 'getStatus',
        'date' => 'getDate',
        'created_on' => 'getCreatedOn',
        'created_by_id' => 'getCreatedById'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['location_recurring_service_id'] = $data['location_recurring_service_id'] ?? null;
        $this->container['location_recurring_service_name'] = $data['location_recurring_service_name'] ?? null;
        $this->container['membership_id'] = $data['membership_id'] ?? null;
        $this->container['membership_name'] = $data['membership_name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['created_by_id'] = $data['created_by_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['location_recurring_service_id'] === null) {
            $invalidProperties[] = "'location_recurring_service_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Recurring service event ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_recurring_service_id
     *
     * @return int
     */
    public function getLocationRecurringServiceId()
    {
        return $this->container['location_recurring_service_id'];
    }

    /**
     * Sets location_recurring_service_id
     *
     * @param int $location_recurring_service_id Location ID
     *
     * @return self
     */
    public function setLocationRecurringServiceId($location_recurring_service_id)
    {
        $this->container['location_recurring_service_id'] = $location_recurring_service_id;

        return $this;
    }

    /**
     * Gets location_recurring_service_name
     *
     * @return string|null
     */
    public function getLocationRecurringServiceName()
    {
        return $this->container['location_recurring_service_name'];
    }

    /**
     * Sets location_recurring_service_name
     *
     * @param string|null $location_recurring_service_name Location Name
     *
     * @return self
     */
    public function setLocationRecurringServiceName($location_recurring_service_name)
    {
        $this->container['location_recurring_service_name'] = $location_recurring_service_name;

        return $this;
    }

    /**
     * Gets membership_id
     *
     * @return int|null
     */
    public function getMembershipId()
    {
        return $this->container['membership_id'];
    }

    /**
     * Sets membership_id
     *
     * @param int|null $membership_id Membership ID
     *
     * @return self
     */
    public function setMembershipId($membership_id)
    {
        $this->container['membership_id'] = $membership_id;

        return $this;
    }

    /**
     * Gets membership_name
     *
     * @return string|null
     */
    public function getMembershipName()
    {
        return $this->container['membership_name'];
    }

    /**
     * Sets membership_name
     *
     * @param string|null $membership_name Membership ID
     *
     * @return self
     */
    public function setMembershipName($membership_name)
    {
        $this->container['membership_name'] = $membership_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return OneOfMembershipsV2OpportunityStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param OneOfMembershipsV2OpportunityStatus $status Opportunity status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Event date
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on Event creation date
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int|null
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int|null $created_by_id ID of the user that created this event (could happen as a result of editing recurring service, selling a new membership, etc.)
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


