<?php
/**
 * InventoryV2CreateVendorRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inventory
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * InventoryV2CreateVendorRequest Class Doc Comment
 *
 * @category Class
 * @description Request model to create vendor
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InventoryV2CreateVendorRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Inventory.V2.CreateVendorRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'active' => 'bool',
        'memo' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'fax' => 'string',
        'is_truck_replenishment' => 'bool',
        'delivery_option' => '\CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestDeliveryOption',
        'tax_rate' => 'float',
        'restricted_mobile_creation' => 'bool',
        'vendor_quickbooks_item' => 'string',
        'payment_term_id' => 'int',
        'remittance_vendor_id' => 'int',
        'address' => '\CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestAddress',
        'external_data' => '\CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestExternalData',
        'tags' => '\CompWright\ServiceTitan\Model\InventoryV2TagRequest[]',
        'vendor_contacts' => '\CompWright\ServiceTitan\Model\InventoryV2CreateVendorContactRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'active' => null,
        'memo' => null,
        'first_name' => null,
        'last_name' => null,
        'phone' => null,
        'email' => null,
        'fax' => null,
        'is_truck_replenishment' => null,
        'delivery_option' => null,
        'tax_rate' => 'decimal',
        'restricted_mobile_creation' => null,
        'vendor_quickbooks_item' => null,
        'payment_term_id' => 'int64',
        'remittance_vendor_id' => 'int64',
        'address' => null,
        'external_data' => null,
        'tags' => null,
        'vendor_contacts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'active' => false,
        'memo' => true,
        'first_name' => true,
        'last_name' => true,
        'phone' => true,
        'email' => true,
        'fax' => true,
        'is_truck_replenishment' => false,
        'delivery_option' => true,
        'tax_rate' => false,
        'restricted_mobile_creation' => false,
        'vendor_quickbooks_item' => true,
        'payment_term_id' => true,
        'remittance_vendor_id' => true,
        'address' => false,
        'external_data' => true,
        'tags' => true,
        'vendor_contacts' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'active' => 'active',
        'memo' => 'memo',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'phone' => 'phone',
        'email' => 'email',
        'fax' => 'fax',
        'is_truck_replenishment' => 'isTruckReplenishment',
        'delivery_option' => 'deliveryOption',
        'tax_rate' => 'taxRate',
        'restricted_mobile_creation' => 'restrictedMobileCreation',
        'vendor_quickbooks_item' => 'vendorQuickbooksItem',
        'payment_term_id' => 'paymentTermId',
        'remittance_vendor_id' => 'remittanceVendorId',
        'address' => 'address',
        'external_data' => 'externalData',
        'tags' => 'tags',
        'vendor_contacts' => 'vendorContacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'active' => 'setActive',
        'memo' => 'setMemo',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'fax' => 'setFax',
        'is_truck_replenishment' => 'setIsTruckReplenishment',
        'delivery_option' => 'setDeliveryOption',
        'tax_rate' => 'setTaxRate',
        'restricted_mobile_creation' => 'setRestrictedMobileCreation',
        'vendor_quickbooks_item' => 'setVendorQuickbooksItem',
        'payment_term_id' => 'setPaymentTermId',
        'remittance_vendor_id' => 'setRemittanceVendorId',
        'address' => 'setAddress',
        'external_data' => 'setExternalData',
        'tags' => 'setTags',
        'vendor_contacts' => 'setVendorContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'active' => 'getActive',
        'memo' => 'getMemo',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'fax' => 'getFax',
        'is_truck_replenishment' => 'getIsTruckReplenishment',
        'delivery_option' => 'getDeliveryOption',
        'tax_rate' => 'getTaxRate',
        'restricted_mobile_creation' => 'getRestrictedMobileCreation',
        'vendor_quickbooks_item' => 'getVendorQuickbooksItem',
        'payment_term_id' => 'getPaymentTermId',
        'remittance_vendor_id' => 'getRemittanceVendorId',
        'address' => 'getAddress',
        'external_data' => 'getExternalData',
        'tags' => 'getTags',
        'vendor_contacts' => 'getVendorContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('is_truck_replenishment', $data ?? [], null);
        $this->setIfExists('delivery_option', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('restricted_mobile_creation', $data ?? [], null);
        $this->setIfExists('vendor_quickbooks_item', $data ?? [], null);
        $this->setIfExists('payment_term_id', $data ?? [], null);
        $this->setIfExists('remittance_vendor_id', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('external_data', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('vendor_contacts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['is_truck_replenishment'] === null) {
            $invalidProperties[] = "'is_truck_replenishment' can't be null";
        }
        if ($this->container['tax_rate'] === null) {
            $invalidProperties[] = "'tax_rate' can't be null";
        }
        if ($this->container['restricted_mobile_creation'] === null) {
            $invalidProperties[] = "'restricted_mobile_creation' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            array_push($this->openAPINullablesSetToNull, 'memo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('memo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Contact First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Contact Last Name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Contact Phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Contact Email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax Contact Fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets is_truck_replenishment
     *
     * @return bool
     */
    public function getIsTruckReplenishment()
    {
        return $this->container['is_truck_replenishment'];
    }

    /**
     * Sets is_truck_replenishment
     *
     * @param bool $is_truck_replenishment Replenishment Vendor
     *
     * @return self
     */
    public function setIsTruckReplenishment($is_truck_replenishment)
    {
        if (is_null($is_truck_replenishment)) {
            throw new \InvalidArgumentException('non-nullable is_truck_replenishment cannot be null');
        }
        $this->container['is_truck_replenishment'] = $is_truck_replenishment;

        return $this;
    }

    /**
     * Gets delivery_option
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestDeliveryOption|null
     */
    public function getDeliveryOption()
    {
        return $this->container['delivery_option'];
    }

    /**
     * Sets delivery_option
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestDeliveryOption|null $delivery_option delivery_option
     *
     * @return self
     */
    public function setDeliveryOption($delivery_option)
    {
        if (is_null($delivery_option)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_option');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_option', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_option'] = $delivery_option;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate Default Tax Rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets restricted_mobile_creation
     *
     * @return bool
     */
    public function getRestrictedMobileCreation()
    {
        return $this->container['restricted_mobile_creation'];
    }

    /**
     * Sets restricted_mobile_creation
     *
     * @param bool $restricted_mobile_creation Restrict PO Creation in Mobile
     *
     * @return self
     */
    public function setRestrictedMobileCreation($restricted_mobile_creation)
    {
        if (is_null($restricted_mobile_creation)) {
            throw new \InvalidArgumentException('non-nullable restricted_mobile_creation cannot be null');
        }
        $this->container['restricted_mobile_creation'] = $restricted_mobile_creation;

        return $this;
    }

    /**
     * Gets vendor_quickbooks_item
     *
     * @return string|null
     */
    public function getVendorQuickbooksItem()
    {
        return $this->container['vendor_quickbooks_item'];
    }

    /**
     * Sets vendor_quickbooks_item
     *
     * @param string|null $vendor_quickbooks_item Vendor Quickbooks Item
     *
     * @return self
     */
    public function setVendorQuickbooksItem($vendor_quickbooks_item)
    {
        if (is_null($vendor_quickbooks_item)) {
            array_push($this->openAPINullablesSetToNull, 'vendor_quickbooks_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor_quickbooks_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor_quickbooks_item'] = $vendor_quickbooks_item;

        return $this;
    }

    /**
     * Gets payment_term_id
     *
     * @return int|null
     */
    public function getPaymentTermId()
    {
        return $this->container['payment_term_id'];
    }

    /**
     * Sets payment_term_id
     *
     * @param int|null $payment_term_id Payment Term Id
     *
     * @return self
     */
    public function setPaymentTermId($payment_term_id)
    {
        if (is_null($payment_term_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_term_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_term_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_term_id'] = $payment_term_id;

        return $this;
    }

    /**
     * Gets remittance_vendor_id
     *
     * @return int|null
     */
    public function getRemittanceVendorId()
    {
        return $this->container['remittance_vendor_id'];
    }

    /**
     * Sets remittance_vendor_id
     *
     * @param int|null $remittance_vendor_id Remittance Vendor Id
     *
     * @return self
     */
    public function setRemittanceVendorId($remittance_vendor_id)
    {
        if (is_null($remittance_vendor_id)) {
            array_push($this->openAPINullablesSetToNull, 'remittance_vendor_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remittance_vendor_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remittance_vendor_id'] = $remittance_vendor_id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets external_data
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestExternalData|null
     */
    public function getExternalData()
    {
        return $this->container['external_data'];
    }

    /**
     * Sets external_data
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequestExternalData|null $external_data external_data
     *
     * @return self
     */
    public function setExternalData($external_data)
    {
        if (is_null($external_data)) {
            array_push($this->openAPINullablesSetToNull, 'external_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_data'] = $external_data;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2TagRequest[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2TagRequest[]|null $tags Tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets vendor_contacts
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2CreateVendorContactRequest[]|null
     */
    public function getVendorContacts()
    {
        return $this->container['vendor_contacts'];
    }

    /**
     * Sets vendor_contacts
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2CreateVendorContactRequest[]|null $vendor_contacts Email Recipients
     *
     * @return self
     */
    public function setVendorContacts($vendor_contacts)
    {
        if (is_null($vendor_contacts)) {
            array_push($this->openAPINullablesSetToNull, 'vendor_contacts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor_contacts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor_contacts'] = $vendor_contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


