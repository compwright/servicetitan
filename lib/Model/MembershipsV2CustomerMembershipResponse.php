<?php
/**
 * MembershipsV2CustomerMembershipResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Memberships
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * MembershipsV2CustomerMembershipResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MembershipsV2CustomerMembershipResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Memberships.V2.CustomerMembershipResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created_on' => '\DateTime',
        'created_by_id' => 'int',
        'modified_on' => '\DateTime',
        'follow_up_on' => '\DateTime',
        'cancellation_date' => '\DateTime',
        'from' => '\DateTime',
        'next_scheduled_bill_date' => '\DateTime',
        'to' => '\DateTime',
        'billing_frequency' => '\CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseBillingFrequency',
        'renewal_billing_frequency' => '\CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseRenewalBillingFrequency',
        'status' => '\CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseStatus',
        'follow_up_status' => '\CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseFollowUpStatus',
        'active' => 'bool',
        'initial_deferred_revenue' => 'float',
        'duration' => 'int',
        'renewal_duration' => 'int',
        'business_unit_id' => 'int',
        'customer_id' => 'int',
        'membership_type_id' => 'int',
        'activated_by_id' => 'int',
        'activated_from_id' => 'int',
        'billing_template_id' => 'int',
        'cancellation_balance_invoice_id' => 'int',
        'cancellation_invoice_id' => 'int',
        'follow_up_custom_status_id' => 'int',
        'location_id' => 'int',
        'payment_method_id' => 'int',
        'payment_type_id' => 'int',
        'recurring_location_id' => 'int',
        'renewal_membership_task_id' => 'int',
        'renewed_by_id' => 'int',
        'sold_by_id' => 'int',
        'customer_po' => 'string',
        'import_id' => 'string',
        'memo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'created_on' => 'date-time',
        'created_by_id' => 'int64',
        'modified_on' => 'date-time',
        'follow_up_on' => 'date-time',
        'cancellation_date' => 'date-time',
        'from' => 'date-time',
        'next_scheduled_bill_date' => 'date-time',
        'to' => 'date-time',
        'billing_frequency' => null,
        'renewal_billing_frequency' => null,
        'status' => null,
        'follow_up_status' => null,
        'active' => null,
        'initial_deferred_revenue' => 'decimal',
        'duration' => 'int32',
        'renewal_duration' => 'int32',
        'business_unit_id' => 'int64',
        'customer_id' => 'int64',
        'membership_type_id' => 'int64',
        'activated_by_id' => 'int64',
        'activated_from_id' => 'int64',
        'billing_template_id' => 'int64',
        'cancellation_balance_invoice_id' => 'int64',
        'cancellation_invoice_id' => 'int64',
        'follow_up_custom_status_id' => 'int64',
        'location_id' => 'int64',
        'payment_method_id' => 'int64',
        'payment_type_id' => 'int64',
        'recurring_location_id' => 'int64',
        'renewal_membership_task_id' => 'int64',
        'renewed_by_id' => 'int64',
        'sold_by_id' => 'int64',
        'customer_po' => null,
        'import_id' => null,
        'memo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_on' => false,
        'created_by_id' => true,
        'modified_on' => false,
        'follow_up_on' => false,
        'cancellation_date' => true,
        'from' => true,
        'next_scheduled_bill_date' => true,
        'to' => true,
        'billing_frequency' => false,
        'renewal_billing_frequency' => true,
        'status' => false,
        'follow_up_status' => false,
        'active' => false,
        'initial_deferred_revenue' => false,
        'duration' => true,
        'renewal_duration' => true,
        'business_unit_id' => false,
        'customer_id' => false,
        'membership_type_id' => false,
        'activated_by_id' => true,
        'activated_from_id' => true,
        'billing_template_id' => true,
        'cancellation_balance_invoice_id' => true,
        'cancellation_invoice_id' => true,
        'follow_up_custom_status_id' => true,
        'location_id' => true,
        'payment_method_id' => true,
        'payment_type_id' => true,
        'recurring_location_id' => true,
        'renewal_membership_task_id' => true,
        'renewed_by_id' => true,
        'sold_by_id' => true,
        'customer_po' => true,
        'import_id' => true,
        'memo' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_on' => 'createdOn',
        'created_by_id' => 'createdById',
        'modified_on' => 'modifiedOn',
        'follow_up_on' => 'followUpOn',
        'cancellation_date' => 'cancellationDate',
        'from' => 'from',
        'next_scheduled_bill_date' => 'nextScheduledBillDate',
        'to' => 'to',
        'billing_frequency' => 'billingFrequency',
        'renewal_billing_frequency' => 'renewalBillingFrequency',
        'status' => 'status',
        'follow_up_status' => 'followUpStatus',
        'active' => 'active',
        'initial_deferred_revenue' => 'initialDeferredRevenue',
        'duration' => 'duration',
        'renewal_duration' => 'renewalDuration',
        'business_unit_id' => 'businessUnitId',
        'customer_id' => 'customerId',
        'membership_type_id' => 'membershipTypeId',
        'activated_by_id' => 'activatedById',
        'activated_from_id' => 'activatedFromId',
        'billing_template_id' => 'billingTemplateId',
        'cancellation_balance_invoice_id' => 'cancellationBalanceInvoiceId',
        'cancellation_invoice_id' => 'cancellationInvoiceId',
        'follow_up_custom_status_id' => 'followUpCustomStatusId',
        'location_id' => 'locationId',
        'payment_method_id' => 'paymentMethodId',
        'payment_type_id' => 'paymentTypeId',
        'recurring_location_id' => 'recurringLocationId',
        'renewal_membership_task_id' => 'renewalMembershipTaskId',
        'renewed_by_id' => 'renewedById',
        'sold_by_id' => 'soldById',
        'customer_po' => 'customerPo',
        'import_id' => 'importId',
        'memo' => 'memo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_on' => 'setCreatedOn',
        'created_by_id' => 'setCreatedById',
        'modified_on' => 'setModifiedOn',
        'follow_up_on' => 'setFollowUpOn',
        'cancellation_date' => 'setCancellationDate',
        'from' => 'setFrom',
        'next_scheduled_bill_date' => 'setNextScheduledBillDate',
        'to' => 'setTo',
        'billing_frequency' => 'setBillingFrequency',
        'renewal_billing_frequency' => 'setRenewalBillingFrequency',
        'status' => 'setStatus',
        'follow_up_status' => 'setFollowUpStatus',
        'active' => 'setActive',
        'initial_deferred_revenue' => 'setInitialDeferredRevenue',
        'duration' => 'setDuration',
        'renewal_duration' => 'setRenewalDuration',
        'business_unit_id' => 'setBusinessUnitId',
        'customer_id' => 'setCustomerId',
        'membership_type_id' => 'setMembershipTypeId',
        'activated_by_id' => 'setActivatedById',
        'activated_from_id' => 'setActivatedFromId',
        'billing_template_id' => 'setBillingTemplateId',
        'cancellation_balance_invoice_id' => 'setCancellationBalanceInvoiceId',
        'cancellation_invoice_id' => 'setCancellationInvoiceId',
        'follow_up_custom_status_id' => 'setFollowUpCustomStatusId',
        'location_id' => 'setLocationId',
        'payment_method_id' => 'setPaymentMethodId',
        'payment_type_id' => 'setPaymentTypeId',
        'recurring_location_id' => 'setRecurringLocationId',
        'renewal_membership_task_id' => 'setRenewalMembershipTaskId',
        'renewed_by_id' => 'setRenewedById',
        'sold_by_id' => 'setSoldById',
        'customer_po' => 'setCustomerPo',
        'import_id' => 'setImportId',
        'memo' => 'setMemo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_on' => 'getCreatedOn',
        'created_by_id' => 'getCreatedById',
        'modified_on' => 'getModifiedOn',
        'follow_up_on' => 'getFollowUpOn',
        'cancellation_date' => 'getCancellationDate',
        'from' => 'getFrom',
        'next_scheduled_bill_date' => 'getNextScheduledBillDate',
        'to' => 'getTo',
        'billing_frequency' => 'getBillingFrequency',
        'renewal_billing_frequency' => 'getRenewalBillingFrequency',
        'status' => 'getStatus',
        'follow_up_status' => 'getFollowUpStatus',
        'active' => 'getActive',
        'initial_deferred_revenue' => 'getInitialDeferredRevenue',
        'duration' => 'getDuration',
        'renewal_duration' => 'getRenewalDuration',
        'business_unit_id' => 'getBusinessUnitId',
        'customer_id' => 'getCustomerId',
        'membership_type_id' => 'getMembershipTypeId',
        'activated_by_id' => 'getActivatedById',
        'activated_from_id' => 'getActivatedFromId',
        'billing_template_id' => 'getBillingTemplateId',
        'cancellation_balance_invoice_id' => 'getCancellationBalanceInvoiceId',
        'cancellation_invoice_id' => 'getCancellationInvoiceId',
        'follow_up_custom_status_id' => 'getFollowUpCustomStatusId',
        'location_id' => 'getLocationId',
        'payment_method_id' => 'getPaymentMethodId',
        'payment_type_id' => 'getPaymentTypeId',
        'recurring_location_id' => 'getRecurringLocationId',
        'renewal_membership_task_id' => 'getRenewalMembershipTaskId',
        'renewed_by_id' => 'getRenewedById',
        'sold_by_id' => 'getSoldById',
        'customer_po' => 'getCustomerPo',
        'import_id' => 'getImportId',
        'memo' => 'getMemo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
        $this->setIfExists('created_by_id', $data ?? [], null);
        $this->setIfExists('modified_on', $data ?? [], null);
        $this->setIfExists('follow_up_on', $data ?? [], null);
        $this->setIfExists('cancellation_date', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('next_scheduled_bill_date', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('billing_frequency', $data ?? [], null);
        $this->setIfExists('renewal_billing_frequency', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('follow_up_status', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('initial_deferred_revenue', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('renewal_duration', $data ?? [], null);
        $this->setIfExists('business_unit_id', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('membership_type_id', $data ?? [], null);
        $this->setIfExists('activated_by_id', $data ?? [], null);
        $this->setIfExists('activated_from_id', $data ?? [], null);
        $this->setIfExists('billing_template_id', $data ?? [], null);
        $this->setIfExists('cancellation_balance_invoice_id', $data ?? [], null);
        $this->setIfExists('cancellation_invoice_id', $data ?? [], null);
        $this->setIfExists('follow_up_custom_status_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('payment_type_id', $data ?? [], null);
        $this->setIfExists('recurring_location_id', $data ?? [], null);
        $this->setIfExists('renewal_membership_task_id', $data ?? [], null);
        $this->setIfExists('renewed_by_id', $data ?? [], null);
        $this->setIfExists('sold_by_id', $data ?? [], null);
        $this->setIfExists('customer_po', $data ?? [], null);
        $this->setIfExists('import_id', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['follow_up_on'] === null) {
            $invalidProperties[] = "'follow_up_on' can't be null";
        }
        if ($this->container['billing_frequency'] === null) {
            $invalidProperties[] = "'billing_frequency' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['follow_up_status'] === null) {
            $invalidProperties[] = "'follow_up_status' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['initial_deferred_revenue'] === null) {
            $invalidProperties[] = "'initial_deferred_revenue' can't be null";
        }
        if ($this->container['business_unit_id'] === null) {
            $invalidProperties[] = "'business_unit_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['membership_type_id'] === null) {
            $invalidProperties[] = "'membership_type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Customer membership ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on When customer membership was created
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            throw new \InvalidArgumentException('non-nullable created_on cannot be null');
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int|null
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int|null $created_by_id ID of the user that created this membership
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        if (is_null($created_by_id)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on When customer membership was last modified
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        if (is_null($modified_on)) {
            throw new \InvalidArgumentException('non-nullable modified_on cannot be null');
        }
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets follow_up_on
     *
     * @return \DateTime
     */
    public function getFollowUpOn()
    {
        return $this->container['follow_up_on'];
    }

    /**
     * Sets follow_up_on
     *
     * @param \DateTime $follow_up_on Follow up on date
     *
     * @return self
     */
    public function setFollowUpOn($follow_up_on)
    {
        if (is_null($follow_up_on)) {
            throw new \InvalidArgumentException('non-nullable follow_up_on cannot be null');
        }
        $this->container['follow_up_on'] = $follow_up_on;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return \DateTime|null
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param \DateTime|null $cancellation_date When customer membership was or will be cancelled
     *
     * @return self
     */
    public function setCancellationDate($cancellation_date)
    {
        if (is_null($cancellation_date)) {
            array_push($this->openAPINullablesSetToNull, 'cancellation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancellation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \DateTime|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \DateTime|null $from Beginning date of customer membership
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            array_push($this->openAPINullablesSetToNull, 'from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets next_scheduled_bill_date
     *
     * @return \DateTime|null
     */
    public function getNextScheduledBillDate()
    {
        return $this->container['next_scheduled_bill_date'];
    }

    /**
     * Sets next_scheduled_bill_date
     *
     * @param \DateTime|null $next_scheduled_bill_date Next scheduled billing date
     *
     * @return self
     */
    public function setNextScheduledBillDate($next_scheduled_bill_date)
    {
        if (is_null($next_scheduled_bill_date)) {
            array_push($this->openAPINullablesSetToNull, 'next_scheduled_bill_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_scheduled_bill_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['next_scheduled_bill_date'] = $next_scheduled_bill_date;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \DateTime|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \DateTime|null $to End date of customer membership
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            array_push($this->openAPINullablesSetToNull, 'to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets billing_frequency
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseBillingFrequency
     */
    public function getBillingFrequency()
    {
        return $this->container['billing_frequency'];
    }

    /**
     * Sets billing_frequency
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseBillingFrequency $billing_frequency billing_frequency
     *
     * @return self
     */
    public function setBillingFrequency($billing_frequency)
    {
        if (is_null($billing_frequency)) {
            throw new \InvalidArgumentException('non-nullable billing_frequency cannot be null');
        }
        $this->container['billing_frequency'] = $billing_frequency;

        return $this;
    }

    /**
     * Gets renewal_billing_frequency
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseRenewalBillingFrequency|null
     */
    public function getRenewalBillingFrequency()
    {
        return $this->container['renewal_billing_frequency'];
    }

    /**
     * Sets renewal_billing_frequency
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseRenewalBillingFrequency|null $renewal_billing_frequency renewal_billing_frequency
     *
     * @return self
     */
    public function setRenewalBillingFrequency($renewal_billing_frequency)
    {
        if (is_null($renewal_billing_frequency)) {
            array_push($this->openAPINullablesSetToNull, 'renewal_billing_frequency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renewal_billing_frequency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renewal_billing_frequency'] = $renewal_billing_frequency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets follow_up_status
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseFollowUpStatus
     */
    public function getFollowUpStatus()
    {
        return $this->container['follow_up_status'];
    }

    /**
     * Sets follow_up_status
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsV2CustomerMembershipResponseFollowUpStatus $follow_up_status follow_up_status
     *
     * @return self
     */
    public function setFollowUpStatus($follow_up_status)
    {
        if (is_null($follow_up_status)) {
            throw new \InvalidArgumentException('non-nullable follow_up_status cannot be null');
        }
        $this->container['follow_up_status'] = $follow_up_status;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Whether customer membership is active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets initial_deferred_revenue
     *
     * @return float
     */
    public function getInitialDeferredRevenue()
    {
        return $this->container['initial_deferred_revenue'];
    }

    /**
     * Sets initial_deferred_revenue
     *
     * @param float $initial_deferred_revenue Initial deferred revenue
     *
     * @return self
     */
    public function setInitialDeferredRevenue($initial_deferred_revenue)
    {
        if (is_null($initial_deferred_revenue)) {
            throw new \InvalidArgumentException('non-nullable initial_deferred_revenue cannot be null');
        }
        $this->container['initial_deferred_revenue'] = $initial_deferred_revenue;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Duration of customer membership in months
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            array_push($this->openAPINullablesSetToNull, 'duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets renewal_duration
     *
     * @return int|null
     */
    public function getRenewalDuration()
    {
        return $this->container['renewal_duration'];
    }

    /**
     * Sets renewal_duration
     *
     * @param int|null $renewal_duration Renewal duration
     *
     * @return self
     */
    public function setRenewalDuration($renewal_duration)
    {
        if (is_null($renewal_duration)) {
            array_push($this->openAPINullablesSetToNull, 'renewal_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renewal_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renewal_duration'] = $renewal_duration;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int $business_unit_id Business unit ID
     *
     * @return self
     */
    public function setBusinessUnitId($business_unit_id)
    {
        if (is_null($business_unit_id)) {
            throw new \InvalidArgumentException('non-nullable business_unit_id cannot be null');
        }
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id Customer ID of membership
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets membership_type_id
     *
     * @return int
     */
    public function getMembershipTypeId()
    {
        return $this->container['membership_type_id'];
    }

    /**
     * Sets membership_type_id
     *
     * @param int $membership_type_id The membership type ID of the customer membership
     *
     * @return self
     */
    public function setMembershipTypeId($membership_type_id)
    {
        if (is_null($membership_type_id)) {
            throw new \InvalidArgumentException('non-nullable membership_type_id cannot be null');
        }
        $this->container['membership_type_id'] = $membership_type_id;

        return $this;
    }

    /**
     * Gets activated_by_id
     *
     * @return int|null
     */
    public function getActivatedById()
    {
        return $this->container['activated_by_id'];
    }

    /**
     * Sets activated_by_id
     *
     * @param int|null $activated_by_id ID of the user that activated this membership
     *
     * @return self
     */
    public function setActivatedById($activated_by_id)
    {
        if (is_null($activated_by_id)) {
            array_push($this->openAPINullablesSetToNull, 'activated_by_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activated_by_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activated_by_id'] = $activated_by_id;

        return $this;
    }

    /**
     * Gets activated_from_id
     *
     * @return int|null
     */
    public function getActivatedFromId()
    {
        return $this->container['activated_from_id'];
    }

    /**
     * Sets activated_from_id
     *
     * @param int|null $activated_from_id ID of the invoice item that is the sale task of this membership
     *
     * @return self
     */
    public function setActivatedFromId($activated_from_id)
    {
        if (is_null($activated_from_id)) {
            array_push($this->openAPINullablesSetToNull, 'activated_from_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activated_from_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activated_from_id'] = $activated_from_id;

        return $this;
    }

    /**
     * Gets billing_template_id
     *
     * @return int|null
     */
    public function getBillingTemplateId()
    {
        return $this->container['billing_template_id'];
    }

    /**
     * Sets billing_template_id
     *
     * @param int|null $billing_template_id ID of the invoice template used for membership billing
     *
     * @return self
     */
    public function setBillingTemplateId($billing_template_id)
    {
        if (is_null($billing_template_id)) {
            array_push($this->openAPINullablesSetToNull, 'billing_template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_template_id'] = $billing_template_id;

        return $this;
    }

    /**
     * Gets cancellation_balance_invoice_id
     *
     * @return int|null
     */
    public function getCancellationBalanceInvoiceId()
    {
        return $this->container['cancellation_balance_invoice_id'];
    }

    /**
     * Sets cancellation_balance_invoice_id
     *
     * @param int|null $cancellation_balance_invoice_id Cancellation balance invoice ID
     *
     * @return self
     */
    public function setCancellationBalanceInvoiceId($cancellation_balance_invoice_id)
    {
        if (is_null($cancellation_balance_invoice_id)) {
            array_push($this->openAPINullablesSetToNull, 'cancellation_balance_invoice_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancellation_balance_invoice_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancellation_balance_invoice_id'] = $cancellation_balance_invoice_id;

        return $this;
    }

    /**
     * Gets cancellation_invoice_id
     *
     * @return int|null
     */
    public function getCancellationInvoiceId()
    {
        return $this->container['cancellation_invoice_id'];
    }

    /**
     * Sets cancellation_invoice_id
     *
     * @param int|null $cancellation_invoice_id ID of the invoice that either charged or refunded the deferred revenue balance of the customer membership
     *
     * @return self
     */
    public function setCancellationInvoiceId($cancellation_invoice_id)
    {
        if (is_null($cancellation_invoice_id)) {
            array_push($this->openAPINullablesSetToNull, 'cancellation_invoice_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancellation_invoice_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancellation_invoice_id'] = $cancellation_invoice_id;

        return $this;
    }

    /**
     * Gets follow_up_custom_status_id
     *
     * @return int|null
     */
    public function getFollowUpCustomStatusId()
    {
        return $this->container['follow_up_custom_status_id'];
    }

    /**
     * Sets follow_up_custom_status_id
     *
     * @param int|null $follow_up_custom_status_id ID of custom followup status
     *
     * @return self
     */
    public function setFollowUpCustomStatusId($follow_up_custom_status_id)
    {
        if (is_null($follow_up_custom_status_id)) {
            array_push($this->openAPINullablesSetToNull, 'follow_up_custom_status_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('follow_up_custom_status_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['follow_up_custom_status_id'] = $follow_up_custom_status_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id ID of location for this customer membership
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return int|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param int|null $payment_method_id Preferred payment method ID
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_method_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_method_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets payment_type_id
     *
     * @return int|null
     */
    public function getPaymentTypeId()
    {
        return $this->container['payment_type_id'];
    }

    /**
     * Sets payment_type_id
     *
     * @param int|null $payment_type_id ID of payment type
     *
     * @return self
     */
    public function setPaymentTypeId($payment_type_id)
    {
        if (is_null($payment_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_type_id'] = $payment_type_id;

        return $this;
    }

    /**
     * Gets recurring_location_id
     *
     * @return int|null
     */
    public function getRecurringLocationId()
    {
        return $this->container['recurring_location_id'];
    }

    /**
     * Sets recurring_location_id
     *
     * @param int|null $recurring_location_id Recurring Location ID
     *
     * @return self
     */
    public function setRecurringLocationId($recurring_location_id)
    {
        if (is_null($recurring_location_id)) {
            array_push($this->openAPINullablesSetToNull, 'recurring_location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recurring_location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recurring_location_id'] = $recurring_location_id;

        return $this;
    }

    /**
     * Gets renewal_membership_task_id
     *
     * @return int|null
     */
    public function getRenewalMembershipTaskId()
    {
        return $this->container['renewal_membership_task_id'];
    }

    /**
     * Sets renewal_membership_task_id
     *
     * @param int|null $renewal_membership_task_id Task ID that renews this membership
     *
     * @return self
     */
    public function setRenewalMembershipTaskId($renewal_membership_task_id)
    {
        if (is_null($renewal_membership_task_id)) {
            array_push($this->openAPINullablesSetToNull, 'renewal_membership_task_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renewal_membership_task_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renewal_membership_task_id'] = $renewal_membership_task_id;

        return $this;
    }

    /**
     * Gets renewed_by_id
     *
     * @return int|null
     */
    public function getRenewedById()
    {
        return $this->container['renewed_by_id'];
    }

    /**
     * Sets renewed_by_id
     *
     * @param int|null $renewed_by_id ID of the user that renewed this membership
     *
     * @return self
     */
    public function setRenewedById($renewed_by_id)
    {
        if (is_null($renewed_by_id)) {
            array_push($this->openAPINullablesSetToNull, 'renewed_by_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('renewed_by_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['renewed_by_id'] = $renewed_by_id;

        return $this;
    }

    /**
     * Gets sold_by_id
     *
     * @return int|null
     */
    public function getSoldById()
    {
        return $this->container['sold_by_id'];
    }

    /**
     * Sets sold_by_id
     *
     * @param int|null $sold_by_id ID of the user that was credited for the sale of this membership
     *
     * @return self
     */
    public function setSoldById($sold_by_id)
    {
        if (is_null($sold_by_id)) {
            array_push($this->openAPINullablesSetToNull, 'sold_by_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sold_by_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sold_by_id'] = $sold_by_id;

        return $this;
    }

    /**
     * Gets customer_po
     *
     * @return string|null
     */
    public function getCustomerPo()
    {
        return $this->container['customer_po'];
    }

    /**
     * Sets customer_po
     *
     * @param string|null $customer_po Customer Purchase Order
     *
     * @return self
     */
    public function setCustomerPo($customer_po)
    {
        if (is_null($customer_po)) {
            array_push($this->openAPINullablesSetToNull, 'customer_po');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_po', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_po'] = $customer_po;

        return $this;
    }

    /**
     * Gets import_id
     *
     * @return string|null
     */
    public function getImportId()
    {
        return $this->container['import_id'];
    }

    /**
     * Sets import_id
     *
     * @param string|null $import_id Internal import ID label
     *
     * @return self
     */
    public function setImportId($import_id)
    {
        if (is_null($import_id)) {
            array_push($this->openAPINullablesSetToNull, 'import_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('import_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['import_id'] = $import_id;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Memo for customer membership
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            array_push($this->openAPINullablesSetToNull, 'memo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('memo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['memo'] = $memo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


