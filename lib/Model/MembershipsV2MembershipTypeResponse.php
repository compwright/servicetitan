<?php
/**
 * MembershipsV2MembershipTypeResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Memberships
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * MembershipsV2MembershipTypeResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MembershipsV2MembershipTypeResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Memberships.V2.MembershipTypeResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'active' => 'bool',
        'discount_mode' => 'OneOfMembershipsV2DiscountMode',
        'location_target' => 'OneOfMembershipsV2MembershipLocationTarget',
        'revenue_recognition_mode' => 'OneOfMembershipsV2RevenueRecognitionMode',
        'auto_calculate_invoice_templates' => 'bool',
        'use_membership_pricing_table' => 'bool',
        'show_membership_savings' => 'bool',
        'id' => 'int',
        'created_on' => '\DateTime',
        'created_by_id' => 'int',
        'modified_on' => '\DateTime',
        'import_id' => 'string',
        'billing_template_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'active' => null,
        'discount_mode' => null,
        'location_target' => null,
        'revenue_recognition_mode' => null,
        'auto_calculate_invoice_templates' => null,
        'use_membership_pricing_table' => null,
        'show_membership_savings' => null,
        'id' => 'int64',
        'created_on' => 'date-time',
        'created_by_id' => 'int64',
        'modified_on' => 'date-time',
        'import_id' => null,
        'billing_template_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'active' => 'active',
        'discount_mode' => 'discountMode',
        'location_target' => 'locationTarget',
        'revenue_recognition_mode' => 'revenueRecognitionMode',
        'auto_calculate_invoice_templates' => 'autoCalculateInvoiceTemplates',
        'use_membership_pricing_table' => 'useMembershipPricingTable',
        'show_membership_savings' => 'showMembershipSavings',
        'id' => 'id',
        'created_on' => 'createdOn',
        'created_by_id' => 'createdById',
        'modified_on' => 'modifiedOn',
        'import_id' => 'importId',
        'billing_template_id' => 'billingTemplateId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'active' => 'setActive',
        'discount_mode' => 'setDiscountMode',
        'location_target' => 'setLocationTarget',
        'revenue_recognition_mode' => 'setRevenueRecognitionMode',
        'auto_calculate_invoice_templates' => 'setAutoCalculateInvoiceTemplates',
        'use_membership_pricing_table' => 'setUseMembershipPricingTable',
        'show_membership_savings' => 'setShowMembershipSavings',
        'id' => 'setId',
        'created_on' => 'setCreatedOn',
        'created_by_id' => 'setCreatedById',
        'modified_on' => 'setModifiedOn',
        'import_id' => 'setImportId',
        'billing_template_id' => 'setBillingTemplateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'active' => 'getActive',
        'discount_mode' => 'getDiscountMode',
        'location_target' => 'getLocationTarget',
        'revenue_recognition_mode' => 'getRevenueRecognitionMode',
        'auto_calculate_invoice_templates' => 'getAutoCalculateInvoiceTemplates',
        'use_membership_pricing_table' => 'getUseMembershipPricingTable',
        'show_membership_savings' => 'getShowMembershipSavings',
        'id' => 'getId',
        'created_on' => 'getCreatedOn',
        'created_by_id' => 'getCreatedById',
        'modified_on' => 'getModifiedOn',
        'import_id' => 'getImportId',
        'billing_template_id' => 'getBillingTemplateId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['discount_mode'] = $data['discount_mode'] ?? null;
        $this->container['location_target'] = $data['location_target'] ?? null;
        $this->container['revenue_recognition_mode'] = $data['revenue_recognition_mode'] ?? null;
        $this->container['auto_calculate_invoice_templates'] = $data['auto_calculate_invoice_templates'] ?? null;
        $this->container['use_membership_pricing_table'] = $data['use_membership_pricing_table'] ?? null;
        $this->container['show_membership_savings'] = $data['show_membership_savings'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['created_by_id'] = $data['created_by_id'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['import_id'] = $data['import_id'] ?? null;
        $this->container['billing_template_id'] = $data['billing_template_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['discount_mode'] === null) {
            $invalidProperties[] = "'discount_mode' can't be null";
        }
        if ($this->container['location_target'] === null) {
            $invalidProperties[] = "'location_target' can't be null";
        }
        if ($this->container['revenue_recognition_mode'] === null) {
            $invalidProperties[] = "'revenue_recognition_mode' can't be null";
        }
        if ($this->container['auto_calculate_invoice_templates'] === null) {
            $invalidProperties[] = "'auto_calculate_invoice_templates' can't be null";
        }
        if ($this->container['use_membership_pricing_table'] === null) {
            $invalidProperties[] = "'use_membership_pricing_table' can't be null";
        }
        if ($this->container['show_membership_savings'] === null) {
            $invalidProperties[] = "'show_membership_savings' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Membership type name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Whether membership type is active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets discount_mode
     *
     * @return OneOfMembershipsV2DiscountMode
     */
    public function getDiscountMode()
    {
        return $this->container['discount_mode'];
    }

    /**
     * Sets discount_mode
     *
     * @param OneOfMembershipsV2DiscountMode $discount_mode Membership discount mode
     *
     * @return self
     */
    public function setDiscountMode($discount_mode)
    {
        $this->container['discount_mode'] = $discount_mode;

        return $this;
    }

    /**
     * Gets location_target
     *
     * @return OneOfMembershipsV2MembershipLocationTarget
     */
    public function getLocationTarget()
    {
        return $this->container['location_target'];
    }

    /**
     * Sets location_target
     *
     * @param OneOfMembershipsV2MembershipLocationTarget $location_target Membership location target
     *
     * @return self
     */
    public function setLocationTarget($location_target)
    {
        $this->container['location_target'] = $location_target;

        return $this;
    }

    /**
     * Gets revenue_recognition_mode
     *
     * @return OneOfMembershipsV2RevenueRecognitionMode
     */
    public function getRevenueRecognitionMode()
    {
        return $this->container['revenue_recognition_mode'];
    }

    /**
     * Sets revenue_recognition_mode
     *
     * @param OneOfMembershipsV2RevenueRecognitionMode $revenue_recognition_mode Membership revenue recognition mode
     *
     * @return self
     */
    public function setRevenueRecognitionMode($revenue_recognition_mode)
    {
        $this->container['revenue_recognition_mode'] = $revenue_recognition_mode;

        return $this;
    }

    /**
     * Gets auto_calculate_invoice_templates
     *
     * @return bool
     */
    public function getAutoCalculateInvoiceTemplates()
    {
        return $this->container['auto_calculate_invoice_templates'];
    }

    /**
     * Sets auto_calculate_invoice_templates
     *
     * @param bool $auto_calculate_invoice_templates Whether invoice templates should be auto-calculated
     *
     * @return self
     */
    public function setAutoCalculateInvoiceTemplates($auto_calculate_invoice_templates)
    {
        $this->container['auto_calculate_invoice_templates'] = $auto_calculate_invoice_templates;

        return $this;
    }

    /**
     * Gets use_membership_pricing_table
     *
     * @return bool
     */
    public function getUseMembershipPricingTable()
    {
        return $this->container['use_membership_pricing_table'];
    }

    /**
     * Sets use_membership_pricing_table
     *
     * @param bool $use_membership_pricing_table Whether membership pricing table should be used
     *
     * @return self
     */
    public function setUseMembershipPricingTable($use_membership_pricing_table)
    {
        $this->container['use_membership_pricing_table'] = $use_membership_pricing_table;

        return $this;
    }

    /**
     * Gets show_membership_savings
     *
     * @return bool
     */
    public function getShowMembershipSavings()
    {
        return $this->container['show_membership_savings'];
    }

    /**
     * Sets show_membership_savings
     *
     * @param bool $show_membership_savings Whether membership savings should be displayed
     *
     * @return self
     */
    public function setShowMembershipSavings($show_membership_savings)
    {
        $this->container['show_membership_savings'] = $show_membership_savings;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Membership type ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on When membership type was created
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int|null
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int|null $created_by_id ID of the user that created this membership type
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on When membership type was modified
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets import_id
     *
     * @return string|null
     */
    public function getImportId()
    {
        return $this->container['import_id'];
    }

    /**
     * Sets import_id
     *
     * @param string|null $import_id Internal import ID label
     *
     * @return self
     */
    public function setImportId($import_id)
    {
        $this->container['import_id'] = $import_id;

        return $this;
    }

    /**
     * Gets billing_template_id
     *
     * @return int|null
     */
    public function getBillingTemplateId()
    {
        return $this->container['billing_template_id'];
    }

    /**
     * Sets billing_template_id
     *
     * @param int|null $billing_template_id Billing template ID
     *
     * @return self
     */
    public function setBillingTemplateId($billing_template_id)
    {
        $this->container['billing_template_id'] = $billing_template_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


