<?php
/**
 * MembershipsV2LocationRecurringServiceUpdateRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Memberships
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * MembershipsV2LocationRecurringServiceUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MembershipsV2LocationRecurringServiceUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Memberships.V2.LocationRecurringServiceUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'active' => 'bool',
        'recurring_service_type_id' => 'int',
        'duration_type' => 'OneOfMembershipsV2ServiceRecurrenceDuration',
        'duration_length' => 'int',
        'from' => '\DateTime',
        'memo' => 'string',
        'invoice_template_id' => 'int',
        'invoice_template_for_following_years_id' => 'int',
        'business_unit_id' => 'int',
        'job_type_id' => 'int',
        'campaign_id' => 'int',
        'priority' => 'OneOfMembershipsV2Priority',
        'job_summary' => 'string',
        'recurrence_type' => 'OneOfMembershipsV2ServiceRecurrenceType',
        'recurrence_interval' => 'int',
        'recurrence_months' => '\CompWright\ServiceTitan\Model\MembershipsV2Month[]',
        'recurrence_days_of_week' => '\CompWright\ServiceTitan\Model\MembershipsV2WeekDay[]',
        'recurrence_week' => 'OneOfMembershipsV2WeekOfMonth',
        'recurrence_day_of_nth_week' => 'OneOfMembershipsV2WeekDay',
        'job_start_time' => 'string',
        'estimated_payroll_cost' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'active' => null,
        'recurring_service_type_id' => 'int64',
        'duration_type' => null,
        'duration_length' => 'int32',
        'from' => 'date-time',
        'memo' => null,
        'invoice_template_id' => 'int64',
        'invoice_template_for_following_years_id' => 'int64',
        'business_unit_id' => 'int64',
        'job_type_id' => 'int64',
        'campaign_id' => 'int64',
        'priority' => null,
        'job_summary' => null,
        'recurrence_type' => null,
        'recurrence_interval' => 'int32',
        'recurrence_months' => null,
        'recurrence_days_of_week' => null,
        'recurrence_week' => null,
        'recurrence_day_of_nth_week' => null,
        'job_start_time' => 'time-span',
        'estimated_payroll_cost' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'active' => 'active',
        'recurring_service_type_id' => 'recurringServiceTypeId',
        'duration_type' => 'durationType',
        'duration_length' => 'durationLength',
        'from' => 'from',
        'memo' => 'memo',
        'invoice_template_id' => 'invoiceTemplateId',
        'invoice_template_for_following_years_id' => 'invoiceTemplateForFollowingYearsId',
        'business_unit_id' => 'businessUnitId',
        'job_type_id' => 'jobTypeId',
        'campaign_id' => 'campaignId',
        'priority' => 'priority',
        'job_summary' => 'jobSummary',
        'recurrence_type' => 'recurrenceType',
        'recurrence_interval' => 'recurrenceInterval',
        'recurrence_months' => 'recurrenceMonths',
        'recurrence_days_of_week' => 'recurrenceDaysOfWeek',
        'recurrence_week' => 'recurrenceWeek',
        'recurrence_day_of_nth_week' => 'recurrenceDayOfNthWeek',
        'job_start_time' => 'jobStartTime',
        'estimated_payroll_cost' => 'estimatedPayrollCost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'active' => 'setActive',
        'recurring_service_type_id' => 'setRecurringServiceTypeId',
        'duration_type' => 'setDurationType',
        'duration_length' => 'setDurationLength',
        'from' => 'setFrom',
        'memo' => 'setMemo',
        'invoice_template_id' => 'setInvoiceTemplateId',
        'invoice_template_for_following_years_id' => 'setInvoiceTemplateForFollowingYearsId',
        'business_unit_id' => 'setBusinessUnitId',
        'job_type_id' => 'setJobTypeId',
        'campaign_id' => 'setCampaignId',
        'priority' => 'setPriority',
        'job_summary' => 'setJobSummary',
        'recurrence_type' => 'setRecurrenceType',
        'recurrence_interval' => 'setRecurrenceInterval',
        'recurrence_months' => 'setRecurrenceMonths',
        'recurrence_days_of_week' => 'setRecurrenceDaysOfWeek',
        'recurrence_week' => 'setRecurrenceWeek',
        'recurrence_day_of_nth_week' => 'setRecurrenceDayOfNthWeek',
        'job_start_time' => 'setJobStartTime',
        'estimated_payroll_cost' => 'setEstimatedPayrollCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'active' => 'getActive',
        'recurring_service_type_id' => 'getRecurringServiceTypeId',
        'duration_type' => 'getDurationType',
        'duration_length' => 'getDurationLength',
        'from' => 'getFrom',
        'memo' => 'getMemo',
        'invoice_template_id' => 'getInvoiceTemplateId',
        'invoice_template_for_following_years_id' => 'getInvoiceTemplateForFollowingYearsId',
        'business_unit_id' => 'getBusinessUnitId',
        'job_type_id' => 'getJobTypeId',
        'campaign_id' => 'getCampaignId',
        'priority' => 'getPriority',
        'job_summary' => 'getJobSummary',
        'recurrence_type' => 'getRecurrenceType',
        'recurrence_interval' => 'getRecurrenceInterval',
        'recurrence_months' => 'getRecurrenceMonths',
        'recurrence_days_of_week' => 'getRecurrenceDaysOfWeek',
        'recurrence_week' => 'getRecurrenceWeek',
        'recurrence_day_of_nth_week' => 'getRecurrenceDayOfNthWeek',
        'job_start_time' => 'getJobStartTime',
        'estimated_payroll_cost' => 'getEstimatedPayrollCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['recurring_service_type_id'] = $data['recurring_service_type_id'] ?? null;
        $this->container['duration_type'] = $data['duration_type'] ?? null;
        $this->container['duration_length'] = $data['duration_length'] ?? null;
        $this->container['from'] = $data['from'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['invoice_template_id'] = $data['invoice_template_id'] ?? null;
        $this->container['invoice_template_for_following_years_id'] = $data['invoice_template_for_following_years_id'] ?? null;
        $this->container['business_unit_id'] = $data['business_unit_id'] ?? null;
        $this->container['job_type_id'] = $data['job_type_id'] ?? null;
        $this->container['campaign_id'] = $data['campaign_id'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['job_summary'] = $data['job_summary'] ?? null;
        $this->container['recurrence_type'] = $data['recurrence_type'] ?? null;
        $this->container['recurrence_interval'] = $data['recurrence_interval'] ?? null;
        $this->container['recurrence_months'] = $data['recurrence_months'] ?? null;
        $this->container['recurrence_days_of_week'] = $data['recurrence_days_of_week'] ?? null;
        $this->container['recurrence_week'] = $data['recurrence_week'] ?? null;
        $this->container['recurrence_day_of_nth_week'] = $data['recurrence_day_of_nth_week'] ?? null;
        $this->container['job_start_time'] = $data['job_start_time'] ?? null;
        $this->container['estimated_payroll_cost'] = $data['estimated_payroll_cost'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Recurring service name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Whether recurring service is active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets recurring_service_type_id
     *
     * @return int|null
     */
    public function getRecurringServiceTypeId()
    {
        return $this->container['recurring_service_type_id'];
    }

    /**
     * Sets recurring_service_type_id
     *
     * @param int|null $recurring_service_type_id Recurring Service Type ID
     *
     * @return self
     */
    public function setRecurringServiceTypeId($recurring_service_type_id)
    {
        $this->container['recurring_service_type_id'] = $recurring_service_type_id;

        return $this;
    }

    /**
     * Gets duration_type
     *
     * @return OneOfMembershipsV2ServiceRecurrenceDuration|null
     */
    public function getDurationType()
    {
        return $this->container['duration_type'];
    }

    /**
     * Sets duration_type
     *
     * @param OneOfMembershipsV2ServiceRecurrenceDuration|null $duration_type The recurrence duration type
     *
     * @return self
     */
    public function setDurationType($duration_type)
    {
        $this->container['duration_type'] = $duration_type;

        return $this;
    }

    /**
     * Gets duration_length
     *
     * @return int|null
     */
    public function getDurationLength()
    {
        return $this->container['duration_length'];
    }

    /**
     * Sets duration_length
     *
     * @param int|null $duration_length The duration length for the given duration type
     *
     * @return self
     */
    public function setDurationLength($duration_length)
    {
        $this->container['duration_length'] = $duration_length;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \DateTime|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \DateTime|null $from Beginning date of recurring service
     *
     * @return self
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets invoice_template_id
     *
     * @return int|null
     */
    public function getInvoiceTemplateId()
    {
        return $this->container['invoice_template_id'];
    }

    /**
     * Sets invoice_template_id
     *
     * @param int|null $invoice_template_id Invoice template ID
     *
     * @return self
     */
    public function setInvoiceTemplateId($invoice_template_id)
    {
        $this->container['invoice_template_id'] = $invoice_template_id;

        return $this;
    }

    /**
     * Gets invoice_template_for_following_years_id
     *
     * @return int|null
     */
    public function getInvoiceTemplateForFollowingYearsId()
    {
        return $this->container['invoice_template_for_following_years_id'];
    }

    /**
     * Sets invoice_template_for_following_years_id
     *
     * @param int|null $invoice_template_for_following_years_id Invoice template ID for the 2nd year and following (for ongoing memberships)
     *
     * @return self
     */
    public function setInvoiceTemplateForFollowingYearsId($invoice_template_for_following_years_id)
    {
        $this->container['invoice_template_for_following_years_id'] = $invoice_template_for_following_years_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int|null
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int|null $business_unit_id Business unit ID
     *
     * @return self
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets job_type_id
     *
     * @return int|null
     */
    public function getJobTypeId()
    {
        return $this->container['job_type_id'];
    }

    /**
     * Sets job_type_id
     *
     * @param int|null $job_type_id Job type ID
     *
     * @return self
     */
    public function setJobTypeId($job_type_id)
    {
        $this->container['job_type_id'] = $job_type_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return int|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param int|null $campaign_id Campaign ID
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return OneOfMembershipsV2Priority|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param OneOfMembershipsV2Priority|null $priority Recurring service priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets job_summary
     *
     * @return string|null
     */
    public function getJobSummary()
    {
        return $this->container['job_summary'];
    }

    /**
     * Sets job_summary
     *
     * @param string|null $job_summary Job summary
     *
     * @return self
     */
    public function setJobSummary($job_summary)
    {
        $this->container['job_summary'] = $job_summary;

        return $this;
    }

    /**
     * Gets recurrence_type
     *
     * @return OneOfMembershipsV2ServiceRecurrenceType|null
     */
    public function getRecurrenceType()
    {
        return $this->container['recurrence_type'];
    }

    /**
     * Sets recurrence_type
     *
     * @param OneOfMembershipsV2ServiceRecurrenceType|null $recurrence_type The recurrence type (e.g. Daily, Weekly, Monthly, etc.)
     *
     * @return self
     */
    public function setRecurrenceType($recurrence_type)
    {
        $this->container['recurrence_type'] = $recurrence_type;

        return $this;
    }

    /**
     * Gets recurrence_interval
     *
     * @return int|null
     */
    public function getRecurrenceInterval()
    {
        return $this->container['recurrence_interval'];
    }

    /**
     * Sets recurrence_interval
     *
     * @param int|null $recurrence_interval The recurrence interval for the given recurrence type. Can be 0 when RecurrenceType is Seasonal.
     *
     * @return self
     */
    public function setRecurrenceInterval($recurrence_interval)
    {
        $this->container['recurrence_interval'] = $recurrence_interval;

        return $this;
    }

    /**
     * Gets recurrence_months
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsV2Month[]|null
     */
    public function getRecurrenceMonths()
    {
        return $this->container['recurrence_months'];
    }

    /**
     * Sets recurrence_months
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsV2Month[]|null $recurrence_months A list of months when the recurring service occurs, if it is a seasonal recurrence type
     *
     * @return self
     */
    public function setRecurrenceMonths($recurrence_months)
    {
        $this->container['recurrence_months'] = $recurrence_months;

        return $this;
    }

    /**
     * Gets recurrence_days_of_week
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsV2WeekDay[]|null
     */
    public function getRecurrenceDaysOfWeek()
    {
        return $this->container['recurrence_days_of_week'];
    }

    /**
     * Sets recurrence_days_of_week
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsV2WeekDay[]|null $recurrence_days_of_week A list specifying which days of the week this recurring service recurs when RecurrenceType is Weekly
     *
     * @return self
     */
    public function setRecurrenceDaysOfWeek($recurrence_days_of_week)
    {
        $this->container['recurrence_days_of_week'] = $recurrence_days_of_week;

        return $this;
    }

    /**
     * Gets recurrence_week
     *
     * @return OneOfMembershipsV2WeekOfMonth|null
     */
    public function getRecurrenceWeek()
    {
        return $this->container['recurrence_week'];
    }

    /**
     * Sets recurrence_week
     *
     * @param OneOfMembershipsV2WeekOfMonth|null $recurrence_week Enum value corresponding to which week of the month this recurring service recurs when RecurrenceType is NthWeekdayOfMonth. Used with RecurrenceDayOfNthWeek.
     *
     * @return self
     */
    public function setRecurrenceWeek($recurrence_week)
    {
        $this->container['recurrence_week'] = $recurrence_week;

        return $this;
    }

    /**
     * Gets recurrence_day_of_nth_week
     *
     * @return OneOfMembershipsV2WeekDay|null
     */
    public function getRecurrenceDayOfNthWeek()
    {
        return $this->container['recurrence_day_of_nth_week'];
    }

    /**
     * Sets recurrence_day_of_nth_week
     *
     * @param OneOfMembershipsV2WeekDay|null $recurrence_day_of_nth_week Enum value corresponding to which day of the week this recurring service recurs when RecurrenceType is NthWeekdayOfMonth. Used with RecurrenceWeek.
     *
     * @return self
     */
    public function setRecurrenceDayOfNthWeek($recurrence_day_of_nth_week)
    {
        $this->container['recurrence_day_of_nth_week'] = $recurrence_day_of_nth_week;

        return $this;
    }

    /**
     * Gets job_start_time
     *
     * @return string|null
     */
    public function getJobStartTime()
    {
        return $this->container['job_start_time'];
    }

    /**
     * Sets job_start_time
     *
     * @param string|null $job_start_time Job start time
     *
     * @return self
     */
    public function setJobStartTime($job_start_time)
    {
        $this->container['job_start_time'] = $job_start_time;

        return $this;
    }

    /**
     * Gets estimated_payroll_cost
     *
     * @return float|null
     */
    public function getEstimatedPayrollCost()
    {
        return $this->container['estimated_payroll_cost'];
    }

    /**
     * Sets estimated_payroll_cost
     *
     * @param float|null $estimated_payroll_cost Estimated payroll cost
     *
     * @return self
     */
    public function setEstimatedPayrollCost($estimated_payroll_cost)
    {
        $this->container['estimated_payroll_cost'] = $estimated_payroll_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


