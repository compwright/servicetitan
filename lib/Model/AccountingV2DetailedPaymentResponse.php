<?php
/**
 * AccountingV2DetailedPaymentResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * AccountingV2DetailedPaymentResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccountingV2DetailedPaymentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Accounting.V2.DetailedPaymentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'sync_status' => 'string',
        'reference_number' => 'string',
        'date' => '\DateTime',
        'type' => 'string',
        'type_id' => 'string',
        'total' => 'string',
        'unapplied_amount' => 'string',
        'memo' => 'string',
        'customer' => 'OneOfAccountingV2NamedFieldResponse',
        'batch' => 'OneOfAccountingV2NamedFieldResponse',
        'created_by' => 'string',
        'general_ledger_account' => 'OneOfAccountingV2GLAccountResponse',
        'applied_to' => '\CompWright\ServiceTitan\Model\AccountingV2PaymentAppliedResponse[]',
        'custom_fields' => '\CompWright\ServiceTitan\Model\AccountingCustomFieldModel[]',
        'auth_code' => 'string',
        'check_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'sync_status' => null,
        'reference_number' => null,
        'date' => 'date-time',
        'type' => null,
        'type_id' => null,
        'total' => null,
        'unapplied_amount' => null,
        'memo' => null,
        'customer' => null,
        'batch' => null,
        'created_by' => null,
        'general_ledger_account' => null,
        'applied_to' => null,
        'custom_fields' => null,
        'auth_code' => null,
        'check_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sync_status' => 'syncStatus',
        'reference_number' => 'referenceNumber',
        'date' => 'date',
        'type' => 'type',
        'type_id' => 'typeId',
        'total' => 'total',
        'unapplied_amount' => 'unappliedAmount',
        'memo' => 'memo',
        'customer' => 'customer',
        'batch' => 'batch',
        'created_by' => 'createdBy',
        'general_ledger_account' => 'generalLedgerAccount',
        'applied_to' => 'appliedTo',
        'custom_fields' => 'customFields',
        'auth_code' => 'authCode',
        'check_number' => 'checkNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sync_status' => 'setSyncStatus',
        'reference_number' => 'setReferenceNumber',
        'date' => 'setDate',
        'type' => 'setType',
        'type_id' => 'setTypeId',
        'total' => 'setTotal',
        'unapplied_amount' => 'setUnappliedAmount',
        'memo' => 'setMemo',
        'customer' => 'setCustomer',
        'batch' => 'setBatch',
        'created_by' => 'setCreatedBy',
        'general_ledger_account' => 'setGeneralLedgerAccount',
        'applied_to' => 'setAppliedTo',
        'custom_fields' => 'setCustomFields',
        'auth_code' => 'setAuthCode',
        'check_number' => 'setCheckNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sync_status' => 'getSyncStatus',
        'reference_number' => 'getReferenceNumber',
        'date' => 'getDate',
        'type' => 'getType',
        'type_id' => 'getTypeId',
        'total' => 'getTotal',
        'unapplied_amount' => 'getUnappliedAmount',
        'memo' => 'getMemo',
        'customer' => 'getCustomer',
        'batch' => 'getBatch',
        'created_by' => 'getCreatedBy',
        'general_ledger_account' => 'getGeneralLedgerAccount',
        'applied_to' => 'getAppliedTo',
        'custom_fields' => 'getCustomFields',
        'auth_code' => 'getAuthCode',
        'check_number' => 'getCheckNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['sync_status'] = $data['sync_status'] ?? null;
        $this->container['reference_number'] = $data['reference_number'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['type_id'] = $data['type_id'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['unapplied_amount'] = $data['unapplied_amount'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['batch'] = $data['batch'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['general_ledger_account'] = $data['general_ledger_account'] ?? null;
        $this->container['applied_to'] = $data['applied_to'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
        $this->container['auth_code'] = $data['auth_code'] ?? null;
        $this->container['check_number'] = $data['check_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return string|null
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param string|null $sync_status sync_status
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number reference_number
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return string|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param string|null $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets unapplied_amount
     *
     * @return string|null
     */
    public function getUnappliedAmount()
    {
        return $this->container['unapplied_amount'];
    }

    /**
     * Sets unapplied_amount
     *
     * @param string|null $unapplied_amount unapplied_amount
     *
     * @return self
     */
    public function setUnappliedAmount($unapplied_amount)
    {
        $this->container['unapplied_amount'] = $unapplied_amount;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return OneOfAccountingV2NamedFieldResponse|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param OneOfAccountingV2NamedFieldResponse|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return OneOfAccountingV2NamedFieldResponse|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param OneOfAccountingV2NamedFieldResponse|null $batch batch
     *
     * @return self
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets general_ledger_account
     *
     * @return OneOfAccountingV2GLAccountResponse|null
     */
    public function getGeneralLedgerAccount()
    {
        return $this->container['general_ledger_account'];
    }

    /**
     * Sets general_ledger_account
     *
     * @param OneOfAccountingV2GLAccountResponse|null $general_ledger_account general_ledger_account
     *
     * @return self
     */
    public function setGeneralLedgerAccount($general_ledger_account)
    {
        $this->container['general_ledger_account'] = $general_ledger_account;

        return $this;
    }

    /**
     * Gets applied_to
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2PaymentAppliedResponse[]|null
     */
    public function getAppliedTo()
    {
        return $this->container['applied_to'];
    }

    /**
     * Sets applied_to
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2PaymentAppliedResponse[]|null $applied_to applied_to
     *
     * @return self
     */
    public function setAppliedTo($applied_to)
    {
        $this->container['applied_to'] = $applied_to;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \CompWright\ServiceTitan\Model\AccountingCustomFieldModel[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \CompWright\ServiceTitan\Model\AccountingCustomFieldModel[]|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string|null
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string|null $auth_code auth_code
     *
     * @return self
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string|null
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string|null $check_number check_number
     *
     * @return self
     */
    public function setCheckNumber($check_number)
    {
        $this->container['check_number'] = $check_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


