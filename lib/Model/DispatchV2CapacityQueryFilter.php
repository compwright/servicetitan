<?php
/**
 * DispatchV2CapacityQueryFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dispatch
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * DispatchV2CapacityQueryFilter Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DispatchV2CapacityQueryFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dispatch.V2.CapacityQueryFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'starts_on_or_after' => '\DateTime',
        'ends_on_or_before' => '\DateTime',
        'business_unit_ids' => 'int[]',
        'job_type_id' => 'int',
        'skill_based_availability' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'starts_on_or_after' => 'date-time',
        'ends_on_or_before' => 'date-time',
        'business_unit_ids' => 'int64',
        'job_type_id' => 'int64',
        'skill_based_availability' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'starts_on_or_after' => false,
        'ends_on_or_before' => false,
        'business_unit_ids' => true,
        'job_type_id' => true,
        'skill_based_availability' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'starts_on_or_after' => 'startsOnOrAfter',
        'ends_on_or_before' => 'endsOnOrBefore',
        'business_unit_ids' => 'businessUnitIds',
        'job_type_id' => 'jobTypeId',
        'skill_based_availability' => 'skillBasedAvailability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'starts_on_or_after' => 'setStartsOnOrAfter',
        'ends_on_or_before' => 'setEndsOnOrBefore',
        'business_unit_ids' => 'setBusinessUnitIds',
        'job_type_id' => 'setJobTypeId',
        'skill_based_availability' => 'setSkillBasedAvailability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'starts_on_or_after' => 'getStartsOnOrAfter',
        'ends_on_or_before' => 'getEndsOnOrBefore',
        'business_unit_ids' => 'getBusinessUnitIds',
        'job_type_id' => 'getJobTypeId',
        'skill_based_availability' => 'getSkillBasedAvailability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('starts_on_or_after', $data ?? [], null);
        $this->setIfExists('ends_on_or_before', $data ?? [], null);
        $this->setIfExists('business_unit_ids', $data ?? [], null);
        $this->setIfExists('job_type_id', $data ?? [], null);
        $this->setIfExists('skill_based_availability', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['starts_on_or_after'] === null) {
            $invalidProperties[] = "'starts_on_or_after' can't be null";
        }
        if ($this->container['ends_on_or_before'] === null) {
            $invalidProperties[] = "'ends_on_or_before' can't be null";
        }
        if ($this->container['skill_based_availability'] === null) {
            $invalidProperties[] = "'skill_based_availability' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets starts_on_or_after
     *
     * @return \DateTime
     */
    public function getStartsOnOrAfter()
    {
        return $this->container['starts_on_or_after'];
    }

    /**
     * Sets starts_on_or_after
     *
     * @param \DateTime $starts_on_or_after When the time frame should start at or after
     *
     * @return self
     */
    public function setStartsOnOrAfter($starts_on_or_after)
    {
        if (is_null($starts_on_or_after)) {
            throw new \InvalidArgumentException('non-nullable starts_on_or_after cannot be null');
        }
        $this->container['starts_on_or_after'] = $starts_on_or_after;

        return $this;
    }

    /**
     * Gets ends_on_or_before
     *
     * @return \DateTime
     */
    public function getEndsOnOrBefore()
    {
        return $this->container['ends_on_or_before'];
    }

    /**
     * Sets ends_on_or_before
     *
     * @param \DateTime $ends_on_or_before When the time frame should end at or before
     *
     * @return self
     */
    public function setEndsOnOrBefore($ends_on_or_before)
    {
        if (is_null($ends_on_or_before)) {
            throw new \InvalidArgumentException('non-nullable ends_on_or_before cannot be null');
        }
        $this->container['ends_on_or_before'] = $ends_on_or_before;

        return $this;
    }

    /**
     * Gets business_unit_ids
     *
     * @return int[]|null
     */
    public function getBusinessUnitIds()
    {
        return $this->container['business_unit_ids'];
    }

    /**
     * Sets business_unit_ids
     *
     * @param int[]|null $business_unit_ids Business units to calculate availability for
     *
     * @return self
     */
    public function setBusinessUnitIds($business_unit_ids)
    {
        if (is_null($business_unit_ids)) {
            array_push($this->openAPINullablesSetToNull, 'business_unit_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_unit_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_unit_ids'] = $business_unit_ids;

        return $this;
    }

    /**
     * Gets job_type_id
     *
     * @return int|null
     */
    public function getJobTypeId()
    {
        return $this->container['job_type_id'];
    }

    /**
     * Sets job_type_id
     *
     * @param int|null $job_type_id Job type whose duration should be used to calculate availability
     *
     * @return self
     */
    public function setJobTypeId($job_type_id)
    {
        if (is_null($job_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'job_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_type_id'] = $job_type_id;

        return $this;
    }

    /**
     * Gets skill_based_availability
     *
     * @return bool
     */
    public function getSkillBasedAvailability()
    {
        return $this->container['skill_based_availability'];
    }

    /**
     * Sets skill_based_availability
     *
     * @param bool $skill_based_availability Indicate whether to use skill-based availability matching
     *
     * @return self
     */
    public function setSkillBasedAvailability($skill_based_availability)
    {
        if (is_null($skill_based_availability)) {
            throw new \InvalidArgumentException('non-nullable skill_based_availability cannot be null');
        }
        $this->container['skill_based_availability'] = $skill_based_availability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


