<?php
/**
 * TaskManagementV2ClientSideDataResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Task Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * TaskManagementV2ClientSideDataResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskManagementV2ClientSideDataResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskManagement.V2.ClientSideDataResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employees' => '\CompWright\ServiceTitan\Model\TaskManagementV2ClientSideEmployeeResponse[]',
        'business_units' => '\CompWright\ServiceTitan\Model\TaskManagementV2ClientSideBusinessUnitResponse[]',
        'task_priorities' => '\CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskPriorityResponse[]',
        'task_resolution_types' => '\CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskResolutionTypeResponse[]',
        'task_statuses' => '\CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskStatusResponse[]',
        'task_types' => '\CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskTypeResponse[]',
        'task_sources' => '\CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskSourceResponse[]',
        'task_resolutions' => '\CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskResolutionResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employees' => null,
        'business_units' => null,
        'task_priorities' => null,
        'task_resolution_types' => null,
        'task_statuses' => null,
        'task_types' => null,
        'task_sources' => null,
        'task_resolutions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employees' => false,
        'business_units' => false,
        'task_priorities' => false,
        'task_resolution_types' => false,
        'task_statuses' => false,
        'task_types' => false,
        'task_sources' => false,
        'task_resolutions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employees' => 'employees',
        'business_units' => 'businessUnits',
        'task_priorities' => 'taskPriorities',
        'task_resolution_types' => 'taskResolutionTypes',
        'task_statuses' => 'taskStatuses',
        'task_types' => 'taskTypes',
        'task_sources' => 'taskSources',
        'task_resolutions' => 'taskResolutions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employees' => 'setEmployees',
        'business_units' => 'setBusinessUnits',
        'task_priorities' => 'setTaskPriorities',
        'task_resolution_types' => 'setTaskResolutionTypes',
        'task_statuses' => 'setTaskStatuses',
        'task_types' => 'setTaskTypes',
        'task_sources' => 'setTaskSources',
        'task_resolutions' => 'setTaskResolutions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employees' => 'getEmployees',
        'business_units' => 'getBusinessUnits',
        'task_priorities' => 'getTaskPriorities',
        'task_resolution_types' => 'getTaskResolutionTypes',
        'task_statuses' => 'getTaskStatuses',
        'task_types' => 'getTaskTypes',
        'task_sources' => 'getTaskSources',
        'task_resolutions' => 'getTaskResolutions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employees', $data ?? [], null);
        $this->setIfExists('business_units', $data ?? [], null);
        $this->setIfExists('task_priorities', $data ?? [], null);
        $this->setIfExists('task_resolution_types', $data ?? [], null);
        $this->setIfExists('task_statuses', $data ?? [], null);
        $this->setIfExists('task_types', $data ?? [], null);
        $this->setIfExists('task_sources', $data ?? [], null);
        $this->setIfExists('task_resolutions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['employees'] === null) {
            $invalidProperties[] = "'employees' can't be null";
        }
        if ($this->container['business_units'] === null) {
            $invalidProperties[] = "'business_units' can't be null";
        }
        if ($this->container['task_priorities'] === null) {
            $invalidProperties[] = "'task_priorities' can't be null";
        }
        if ($this->container['task_resolution_types'] === null) {
            $invalidProperties[] = "'task_resolution_types' can't be null";
        }
        if ($this->container['task_statuses'] === null) {
            $invalidProperties[] = "'task_statuses' can't be null";
        }
        if ($this->container['task_types'] === null) {
            $invalidProperties[] = "'task_types' can't be null";
        }
        if ($this->container['task_sources'] === null) {
            $invalidProperties[] = "'task_sources' can't be null";
        }
        if ($this->container['task_resolutions'] === null) {
            $invalidProperties[] = "'task_resolutions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employees
     *
     * @return \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideEmployeeResponse[]
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     *
     * @param \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideEmployeeResponse[] $employees employees
     *
     * @return self
     */
    public function setEmployees($employees)
    {
        if (is_null($employees)) {
            throw new \InvalidArgumentException('non-nullable employees cannot be null');
        }
        $this->container['employees'] = $employees;

        return $this;
    }

    /**
     * Gets business_units
     *
     * @return \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideBusinessUnitResponse[]
     */
    public function getBusinessUnits()
    {
        return $this->container['business_units'];
    }

    /**
     * Sets business_units
     *
     * @param \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideBusinessUnitResponse[] $business_units business_units
     *
     * @return self
     */
    public function setBusinessUnits($business_units)
    {
        if (is_null($business_units)) {
            throw new \InvalidArgumentException('non-nullable business_units cannot be null');
        }
        $this->container['business_units'] = $business_units;

        return $this;
    }

    /**
     * Gets task_priorities
     *
     * @return \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskPriorityResponse[]
     */
    public function getTaskPriorities()
    {
        return $this->container['task_priorities'];
    }

    /**
     * Sets task_priorities
     *
     * @param \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskPriorityResponse[] $task_priorities task_priorities
     *
     * @return self
     */
    public function setTaskPriorities($task_priorities)
    {
        if (is_null($task_priorities)) {
            throw new \InvalidArgumentException('non-nullable task_priorities cannot be null');
        }
        $this->container['task_priorities'] = $task_priorities;

        return $this;
    }

    /**
     * Gets task_resolution_types
     *
     * @return \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskResolutionTypeResponse[]
     */
    public function getTaskResolutionTypes()
    {
        return $this->container['task_resolution_types'];
    }

    /**
     * Sets task_resolution_types
     *
     * @param \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskResolutionTypeResponse[] $task_resolution_types task_resolution_types
     *
     * @return self
     */
    public function setTaskResolutionTypes($task_resolution_types)
    {
        if (is_null($task_resolution_types)) {
            throw new \InvalidArgumentException('non-nullable task_resolution_types cannot be null');
        }
        $this->container['task_resolution_types'] = $task_resolution_types;

        return $this;
    }

    /**
     * Gets task_statuses
     *
     * @return \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskStatusResponse[]
     */
    public function getTaskStatuses()
    {
        return $this->container['task_statuses'];
    }

    /**
     * Sets task_statuses
     *
     * @param \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskStatusResponse[] $task_statuses task_statuses
     *
     * @return self
     */
    public function setTaskStatuses($task_statuses)
    {
        if (is_null($task_statuses)) {
            throw new \InvalidArgumentException('non-nullable task_statuses cannot be null');
        }
        $this->container['task_statuses'] = $task_statuses;

        return $this;
    }

    /**
     * Gets task_types
     *
     * @return \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskTypeResponse[]
     */
    public function getTaskTypes()
    {
        return $this->container['task_types'];
    }

    /**
     * Sets task_types
     *
     * @param \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskTypeResponse[] $task_types task_types
     *
     * @return self
     */
    public function setTaskTypes($task_types)
    {
        if (is_null($task_types)) {
            throw new \InvalidArgumentException('non-nullable task_types cannot be null');
        }
        $this->container['task_types'] = $task_types;

        return $this;
    }

    /**
     * Gets task_sources
     *
     * @return \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskSourceResponse[]
     */
    public function getTaskSources()
    {
        return $this->container['task_sources'];
    }

    /**
     * Sets task_sources
     *
     * @param \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskSourceResponse[] $task_sources task_sources
     *
     * @return self
     */
    public function setTaskSources($task_sources)
    {
        if (is_null($task_sources)) {
            throw new \InvalidArgumentException('non-nullable task_sources cannot be null');
        }
        $this->container['task_sources'] = $task_sources;

        return $this;
    }

    /**
     * Gets task_resolutions
     *
     * @return \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskResolutionResponse[]
     */
    public function getTaskResolutions()
    {
        return $this->container['task_resolutions'];
    }

    /**
     * Sets task_resolutions
     *
     * @param \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideTaskResolutionResponse[] $task_resolutions task_resolutions
     *
     * @return self
     */
    public function setTaskResolutions($task_resolutions)
    {
        if (is_null($task_resolutions)) {
            throw new \InvalidArgumentException('non-nullable task_resolutions cannot be null');
        }
        $this->container['task_resolutions'] = $task_resolutions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


