<?php
/**
 * InventoryV2UpdatePurchaseOrderRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inventory
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * InventoryV2UpdatePurchaseOrderRequest Class Doc Comment
 *
 * @category Class
 * @description Represents a request to update single purchase order
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InventoryV2UpdatePurchaseOrderRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Inventory.V2.UpdatePurchaseOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vendor_id' => 'int',
        'type_id' => 'int',
        'business_unit_id' => 'int',
        'inventory_location_id' => 'int',
        'job_id' => 'int',
        'technician_id' => 'int',
        'project_id' => 'int',
        'ship_to' => '\CompWright\ServiceTitan\Model\InventoryV2UpdatePurchaseOrderRequestShipTo',
        'vendor_invoice_number' => 'string',
        'impacts_technician_payroll' => 'bool',
        'memo' => 'string',
        'date' => '\DateTime',
        'required_on' => '\DateTime',
        'tax' => 'float',
        'shipping' => 'float',
        'items' => '\CompWright\ServiceTitan\Model\InventoryV2UpdatePurchaseOrderItemRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vendor_id' => 'int64',
        'type_id' => 'int64',
        'business_unit_id' => 'int64',
        'inventory_location_id' => 'int64',
        'job_id' => 'int64',
        'technician_id' => 'int64',
        'project_id' => 'int64',
        'ship_to' => null,
        'vendor_invoice_number' => null,
        'impacts_technician_payroll' => null,
        'memo' => null,
        'date' => 'date-time',
        'required_on' => 'date-time',
        'tax' => 'decimal',
        'shipping' => 'decimal',
        'items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vendor_id' => false,
        'type_id' => false,
        'business_unit_id' => false,
        'inventory_location_id' => false,
        'job_id' => false,
        'technician_id' => false,
        'project_id' => false,
        'ship_to' => false,
        'vendor_invoice_number' => false,
        'impacts_technician_payroll' => false,
        'memo' => false,
        'date' => false,
        'required_on' => false,
        'tax' => false,
        'shipping' => false,
        'items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor_id' => 'vendorId',
        'type_id' => 'typeId',
        'business_unit_id' => 'businessUnitId',
        'inventory_location_id' => 'inventoryLocationId',
        'job_id' => 'jobId',
        'technician_id' => 'technicianId',
        'project_id' => 'projectId',
        'ship_to' => 'shipTo',
        'vendor_invoice_number' => 'vendorInvoiceNumber',
        'impacts_technician_payroll' => 'impactsTechnicianPayroll',
        'memo' => 'memo',
        'date' => 'date',
        'required_on' => 'requiredOn',
        'tax' => 'tax',
        'shipping' => 'shipping',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor_id' => 'setVendorId',
        'type_id' => 'setTypeId',
        'business_unit_id' => 'setBusinessUnitId',
        'inventory_location_id' => 'setInventoryLocationId',
        'job_id' => 'setJobId',
        'technician_id' => 'setTechnicianId',
        'project_id' => 'setProjectId',
        'ship_to' => 'setShipTo',
        'vendor_invoice_number' => 'setVendorInvoiceNumber',
        'impacts_technician_payroll' => 'setImpactsTechnicianPayroll',
        'memo' => 'setMemo',
        'date' => 'setDate',
        'required_on' => 'setRequiredOn',
        'tax' => 'setTax',
        'shipping' => 'setShipping',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor_id' => 'getVendorId',
        'type_id' => 'getTypeId',
        'business_unit_id' => 'getBusinessUnitId',
        'inventory_location_id' => 'getInventoryLocationId',
        'job_id' => 'getJobId',
        'technician_id' => 'getTechnicianId',
        'project_id' => 'getProjectId',
        'ship_to' => 'getShipTo',
        'vendor_invoice_number' => 'getVendorInvoiceNumber',
        'impacts_technician_payroll' => 'getImpactsTechnicianPayroll',
        'memo' => 'getMemo',
        'date' => 'getDate',
        'required_on' => 'getRequiredOn',
        'tax' => 'getTax',
        'shipping' => 'getShipping',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vendor_id', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('business_unit_id', $data ?? [], null);
        $this->setIfExists('inventory_location_id', $data ?? [], null);
        $this->setIfExists('job_id', $data ?? [], null);
        $this->setIfExists('technician_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('ship_to', $data ?? [], null);
        $this->setIfExists('vendor_invoice_number', $data ?? [], null);
        $this->setIfExists('impacts_technician_payroll', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('required_on', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor_id
     *
     * @return int|null
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int|null $vendor_id Id of the vendor for this PO
     *
     * @return self
     */
    public function setVendorId($vendor_id)
    {
        if (is_null($vendor_id)) {
            throw new \InvalidArgumentException('non-nullable vendor_id cannot be null');
        }
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id Id of the purchase order type for this PO
     *
     * @return self
     */
    public function setTypeId($type_id)
    {
        if (is_null($type_id)) {
            throw new \InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int|null
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int|null $business_unit_id Id of the business unit for this PO
     *
     * @return self
     */
    public function setBusinessUnitId($business_unit_id)
    {
        if (is_null($business_unit_id)) {
            throw new \InvalidArgumentException('non-nullable business_unit_id cannot be null');
        }
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets inventory_location_id
     *
     * @return int|null
     */
    public function getInventoryLocationId()
    {
        return $this->container['inventory_location_id'];
    }

    /**
     * Sets inventory_location_id
     *
     * @param int|null $inventory_location_id Id of the inventory location for this PO
     *
     * @return self
     */
    public function setInventoryLocationId($inventory_location_id)
    {
        if (is_null($inventory_location_id)) {
            throw new \InvalidArgumentException('non-nullable inventory_location_id cannot be null');
        }
        $this->container['inventory_location_id'] = $inventory_location_id;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return int|null
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param int|null $job_id Id of the job for this PO, if not specified non-job PO will be created
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        if (is_null($job_id)) {
            throw new \InvalidArgumentException('non-nullable job_id cannot be null');
        }
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets technician_id
     *
     * @return int|null
     */
    public function getTechnicianId()
    {
        return $this->container['technician_id'];
    }

    /**
     * Sets technician_id
     *
     * @param int|null $technician_id Id of the technician for this PO
     *
     * @return self
     */
    public function setTechnicianId($technician_id)
    {
        if (is_null($technician_id)) {
            throw new \InvalidArgumentException('non-nullable technician_id cannot be null');
        }
        $this->container['technician_id'] = $technician_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id Id of the project for this PO
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2UpdatePurchaseOrderRequestShipTo|null
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2UpdatePurchaseOrderRequestShipTo|null $ship_to ship_to
     *
     * @return self
     */
    public function setShipTo($ship_to)
    {
        if (is_null($ship_to)) {
            throw new \InvalidArgumentException('non-nullable ship_to cannot be null');
        }
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets vendor_invoice_number
     *
     * @return string|null
     */
    public function getVendorInvoiceNumber()
    {
        return $this->container['vendor_invoice_number'];
    }

    /**
     * Sets vendor_invoice_number
     *
     * @param string|null $vendor_invoice_number Vendor invoice number
     *
     * @return self
     */
    public function setVendorInvoiceNumber($vendor_invoice_number)
    {
        if (is_null($vendor_invoice_number)) {
            throw new \InvalidArgumentException('non-nullable vendor_invoice_number cannot be null');
        }
        $this->container['vendor_invoice_number'] = $vendor_invoice_number;

        return $this;
    }

    /**
     * Gets impacts_technician_payroll
     *
     * @return bool|null
     */
    public function getImpactsTechnicianPayroll()
    {
        return $this->container['impacts_technician_payroll'];
    }

    /**
     * Sets impacts_technician_payroll
     *
     * @param bool|null $impacts_technician_payroll Indicates whether this PO will impact technician's payroll
     *
     * @return self
     */
    public function setImpactsTechnicianPayroll($impacts_technician_payroll)
    {
        if (is_null($impacts_technician_payroll)) {
            throw new \InvalidArgumentException('non-nullable impacts_technician_payroll cannot be null');
        }
        $this->container['impacts_technician_payroll'] = $impacts_technician_payroll;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo Summary/memo for this PO
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            throw new \InvalidArgumentException('non-nullable memo cannot be null');
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date PO date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets required_on
     *
     * @return \DateTime|null
     */
    public function getRequiredOn()
    {
        return $this->container['required_on'];
    }

    /**
     * Sets required_on
     *
     * @param \DateTime|null $required_on PO Required On date
     *
     * @return self
     */
    public function setRequiredOn($required_on)
    {
        if (is_null($required_on)) {
            throw new \InvalidArgumentException('non-nullable required_on cannot be null');
        }
        $this->container['required_on'] = $required_on;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float|null $tax Tax
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return float|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param float|null $shipping Shipping cost
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        if (is_null($shipping)) {
            throw new \InvalidArgumentException('non-nullable shipping cannot be null');
        }
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2UpdatePurchaseOrderItemRequest[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2UpdatePurchaseOrderItemRequest[]|null $items List of new/updated PO items. Every active PO item that is not on this list will be marked as inactive
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


