<?php
/**
 * TaskManagementV2SubtaskCreateResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Task Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * TaskManagementV2SubtaskCreateResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskManagementV2SubtaskCreateResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskManagement.V2.SubtaskCreateResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_closed' => 'bool',
        'name' => 'string',
        'assigned_to_id' => 'int',
        'due_date_time' => '\DateTime',
        'parent_task_id' => 'int',
        'subtask_number' => 'string',
        'is_viewed' => 'bool',
        'assigned_date_time' => '\DateTime',
        'created_on' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_closed' => null,
        'name' => null,
        'assigned_to_id' => 'int64',
        'due_date_time' => 'date-time',
        'parent_task_id' => 'int64',
        'subtask_number' => null,
        'is_viewed' => null,
        'assigned_date_time' => 'date-time',
        'created_on' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_closed' => false,
        'name' => false,
        'assigned_to_id' => false,
        'due_date_time' => true,
        'parent_task_id' => false,
        'subtask_number' => false,
        'is_viewed' => false,
        'assigned_date_time' => false,
        'created_on' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_closed' => 'isClosed',
        'name' => 'name',
        'assigned_to_id' => 'assignedToId',
        'due_date_time' => 'dueDateTime',
        'parent_task_id' => 'parentTaskId',
        'subtask_number' => 'subtaskNumber',
        'is_viewed' => 'isViewed',
        'assigned_date_time' => 'assignedDateTime',
        'created_on' => 'createdOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_closed' => 'setIsClosed',
        'name' => 'setName',
        'assigned_to_id' => 'setAssignedToId',
        'due_date_time' => 'setDueDateTime',
        'parent_task_id' => 'setParentTaskId',
        'subtask_number' => 'setSubtaskNumber',
        'is_viewed' => 'setIsViewed',
        'assigned_date_time' => 'setAssignedDateTime',
        'created_on' => 'setCreatedOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_closed' => 'getIsClosed',
        'name' => 'getName',
        'assigned_to_id' => 'getAssignedToId',
        'due_date_time' => 'getDueDateTime',
        'parent_task_id' => 'getParentTaskId',
        'subtask_number' => 'getSubtaskNumber',
        'is_viewed' => 'getIsViewed',
        'assigned_date_time' => 'getAssignedDateTime',
        'created_on' => 'getCreatedOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_closed', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('assigned_to_id', $data ?? [], null);
        $this->setIfExists('due_date_time', $data ?? [], null);
        $this->setIfExists('parent_task_id', $data ?? [], null);
        $this->setIfExists('subtask_number', $data ?? [], null);
        $this->setIfExists('is_viewed', $data ?? [], null);
        $this->setIfExists('assigned_date_time', $data ?? [], null);
        $this->setIfExists('created_on', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_closed'] === null) {
            $invalidProperties[] = "'is_closed' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['assigned_to_id'] === null) {
            $invalidProperties[] = "'assigned_to_id' can't be null";
        }
        if ($this->container['parent_task_id'] === null) {
            $invalidProperties[] = "'parent_task_id' can't be null";
        }
        if ($this->container['subtask_number'] === null) {
            $invalidProperties[] = "'subtask_number' can't be null";
        }
        if ($this->container['is_viewed'] === null) {
            $invalidProperties[] = "'is_viewed' can't be null";
        }
        if ($this->container['assigned_date_time'] === null) {
            $invalidProperties[] = "'assigned_date_time' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_closed
     *
     * @return bool
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool $is_closed is_closed
     *
     * @return self
     */
    public function setIsClosed($is_closed)
    {
        if (is_null($is_closed)) {
            throw new \InvalidArgumentException('non-nullable is_closed cannot be null');
        }
        $this->container['is_closed'] = $is_closed;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets assigned_to_id
     *
     * @return int
     */
    public function getAssignedToId()
    {
        return $this->container['assigned_to_id'];
    }

    /**
     * Sets assigned_to_id
     *
     * @param int $assigned_to_id assigned_to_id
     *
     * @return self
     */
    public function setAssignedToId($assigned_to_id)
    {
        if (is_null($assigned_to_id)) {
            throw new \InvalidArgumentException('non-nullable assigned_to_id cannot be null');
        }
        $this->container['assigned_to_id'] = $assigned_to_id;

        return $this;
    }

    /**
     * Gets due_date_time
     *
     * @return \DateTime|null
     */
    public function getDueDateTime()
    {
        return $this->container['due_date_time'];
    }

    /**
     * Sets due_date_time
     *
     * @param \DateTime|null $due_date_time due_date_time
     *
     * @return self
     */
    public function setDueDateTime($due_date_time)
    {
        if (is_null($due_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'due_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('due_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['due_date_time'] = $due_date_time;

        return $this;
    }

    /**
     * Gets parent_task_id
     *
     * @return int
     */
    public function getParentTaskId()
    {
        return $this->container['parent_task_id'];
    }

    /**
     * Sets parent_task_id
     *
     * @param int $parent_task_id parent_task_id
     *
     * @return self
     */
    public function setParentTaskId($parent_task_id)
    {
        if (is_null($parent_task_id)) {
            throw new \InvalidArgumentException('non-nullable parent_task_id cannot be null');
        }
        $this->container['parent_task_id'] = $parent_task_id;

        return $this;
    }

    /**
     * Gets subtask_number
     *
     * @return string
     */
    public function getSubtaskNumber()
    {
        return $this->container['subtask_number'];
    }

    /**
     * Sets subtask_number
     *
     * @param string $subtask_number subtask_number
     *
     * @return self
     */
    public function setSubtaskNumber($subtask_number)
    {
        if (is_null($subtask_number)) {
            throw new \InvalidArgumentException('non-nullable subtask_number cannot be null');
        }
        $this->container['subtask_number'] = $subtask_number;

        return $this;
    }

    /**
     * Gets is_viewed
     *
     * @return bool
     */
    public function getIsViewed()
    {
        return $this->container['is_viewed'];
    }

    /**
     * Sets is_viewed
     *
     * @param bool $is_viewed is_viewed
     *
     * @return self
     */
    public function setIsViewed($is_viewed)
    {
        if (is_null($is_viewed)) {
            throw new \InvalidArgumentException('non-nullable is_viewed cannot be null');
        }
        $this->container['is_viewed'] = $is_viewed;

        return $this;
    }

    /**
     * Gets assigned_date_time
     *
     * @return \DateTime
     */
    public function getAssignedDateTime()
    {
        return $this->container['assigned_date_time'];
    }

    /**
     * Sets assigned_date_time
     *
     * @param \DateTime $assigned_date_time assigned_date_time
     *
     * @return self
     */
    public function setAssignedDateTime($assigned_date_time)
    {
        if (is_null($assigned_date_time)) {
            throw new \InvalidArgumentException('non-nullable assigned_date_time cannot be null');
        }
        $this->container['assigned_date_time'] = $assigned_date_time;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        if (is_null($created_on)) {
            throw new \InvalidArgumentException('non-nullable created_on cannot be null');
        }
        $this->container['created_on'] = $created_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


