<?php
/**
 * InventoryV2InventoryTransferResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inventory
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * InventoryV2InventoryTransferResponse Class Doc Comment
 *
 * @category Class
 * @description Inventory transfer response
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InventoryV2InventoryTransferResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Inventory.V2.InventoryTransferResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'transfer_type' => 'string',
        'status' => 'string',
        'number' => 'string',
        'reference_number' => 'string',
        'from_location_id' => 'int',
        'to_location_id' => 'int',
        'created_by_id' => 'int',
        'memo' => 'string',
        'date' => '\DateTime',
        'picked_date' => '\DateTime',
        'received_date' => '\DateTime',
        'created_on' => '\DateTime',
        'modified_on' => '\DateTime',
        'batch_id' => 'int',
        'sync_status' => 'OneOfInventoryV2SyncStatus',
        'items' => '\CompWright\ServiceTitan\Model\InventoryV2InventoryTransferItemResponse[]',
        'custom_fields' => '\CompWright\ServiceTitan\Model\InventoryV2CustomFieldResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'transfer_type' => null,
        'status' => null,
        'number' => null,
        'reference_number' => null,
        'from_location_id' => 'int64',
        'to_location_id' => 'int64',
        'created_by_id' => 'int64',
        'memo' => null,
        'date' => 'date-time',
        'picked_date' => 'date-time',
        'received_date' => 'date-time',
        'created_on' => 'date-time',
        'modified_on' => 'date-time',
        'batch_id' => 'int64',
        'sync_status' => null,
        'items' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'transfer_type' => 'transferType',
        'status' => 'status',
        'number' => 'number',
        'reference_number' => 'referenceNumber',
        'from_location_id' => 'fromLocationId',
        'to_location_id' => 'toLocationId',
        'created_by_id' => 'createdById',
        'memo' => 'memo',
        'date' => 'date',
        'picked_date' => 'pickedDate',
        'received_date' => 'receivedDate',
        'created_on' => 'createdOn',
        'modified_on' => 'modifiedOn',
        'batch_id' => 'batchId',
        'sync_status' => 'syncStatus',
        'items' => 'items',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'transfer_type' => 'setTransferType',
        'status' => 'setStatus',
        'number' => 'setNumber',
        'reference_number' => 'setReferenceNumber',
        'from_location_id' => 'setFromLocationId',
        'to_location_id' => 'setToLocationId',
        'created_by_id' => 'setCreatedById',
        'memo' => 'setMemo',
        'date' => 'setDate',
        'picked_date' => 'setPickedDate',
        'received_date' => 'setReceivedDate',
        'created_on' => 'setCreatedOn',
        'modified_on' => 'setModifiedOn',
        'batch_id' => 'setBatchId',
        'sync_status' => 'setSyncStatus',
        'items' => 'setItems',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'transfer_type' => 'getTransferType',
        'status' => 'getStatus',
        'number' => 'getNumber',
        'reference_number' => 'getReferenceNumber',
        'from_location_id' => 'getFromLocationId',
        'to_location_id' => 'getToLocationId',
        'created_by_id' => 'getCreatedById',
        'memo' => 'getMemo',
        'date' => 'getDate',
        'picked_date' => 'getPickedDate',
        'received_date' => 'getReceivedDate',
        'created_on' => 'getCreatedOn',
        'modified_on' => 'getModifiedOn',
        'batch_id' => 'getBatchId',
        'sync_status' => 'getSyncStatus',
        'items' => 'getItems',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['transfer_type'] = $data['transfer_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['reference_number'] = $data['reference_number'] ?? null;
        $this->container['from_location_id'] = $data['from_location_id'] ?? null;
        $this->container['to_location_id'] = $data['to_location_id'] ?? null;
        $this->container['created_by_id'] = $data['created_by_id'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['picked_date'] = $data['picked_date'] ?? null;
        $this->container['received_date'] = $data['received_date'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['batch_id'] = $data['batch_id'] ?? null;
        $this->container['sync_status'] = $data['sync_status'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['transfer_type'] === null) {
            $invalidProperties[] = "'transfer_type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['reference_number'] === null) {
            $invalidProperties[] = "'reference_number' can't be null";
        }
        if ($this->container['from_location_id'] === null) {
            $invalidProperties[] = "'from_location_id' can't be null";
        }
        if ($this->container['to_location_id'] === null) {
            $invalidProperties[] = "'to_location_id' can't be null";
        }
        if ($this->container['memo'] === null) {
            $invalidProperties[] = "'memo' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['sync_status'] === null) {
            $invalidProperties[] = "'sync_status' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['custom_fields'] === null) {
            $invalidProperties[] = "'custom_fields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Inventory transfer Id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transfer_type
     *
     * @return string
     */
    public function getTransferType()
    {
        return $this->container['transfer_type'];
    }

    /**
     * Sets transfer_type
     *
     * @param string $transfer_type Type
     *
     * @return self
     */
    public function setTransferType($transfer_type)
    {
        $this->container['transfer_type'] = $transfer_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Number
     *
     * @return self
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string $reference_number Reference number
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets from_location_id
     *
     * @return int
     */
    public function getFromLocationId()
    {
        return $this->container['from_location_id'];
    }

    /**
     * Sets from_location_id
     *
     * @param int $from_location_id Inventory location to transfer from
     *
     * @return self
     */
    public function setFromLocationId($from_location_id)
    {
        $this->container['from_location_id'] = $from_location_id;

        return $this;
    }

    /**
     * Gets to_location_id
     *
     * @return int
     */
    public function getToLocationId()
    {
        return $this->container['to_location_id'];
    }

    /**
     * Sets to_location_id
     *
     * @param int $to_location_id Inventory location where transfer is going
     *
     * @return self
     */
    public function setToLocationId($to_location_id)
    {
        $this->container['to_location_id'] = $to_location_id;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int|null
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int|null $created_by_id Employee who created this transfer
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string $memo Memo/summary field
     *
     * @return self
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Transfer date
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets picked_date
     *
     * @return \DateTime|null
     */
    public function getPickedDate()
    {
        return $this->container['picked_date'];
    }

    /**
     * Sets picked_date
     *
     * @param \DateTime|null $picked_date Transfer picked date
     *
     * @return self
     */
    public function setPickedDate($picked_date)
    {
        $this->container['picked_date'] = $picked_date;

        return $this;
    }

    /**
     * Gets received_date
     *
     * @return \DateTime|null
     */
    public function getReceivedDate()
    {
        return $this->container['received_date'];
    }

    /**
     * Sets received_date
     *
     * @param \DateTime|null $received_date Transfer recevived date
     *
     * @return self
     */
    public function setReceivedDate($received_date)
    {
        $this->container['received_date'] = $received_date;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on system created date
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on last time transfer was modified date
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return int|null
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param int|null $batch_id Batch
     *
     * @return self
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return OneOfInventoryV2SyncStatus
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param OneOfInventoryV2SyncStatus $sync_status Sync status
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferItemResponse[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferItemResponse[] $items Collection of transfer items
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \CompWright\ServiceTitan\Model\InventoryV2CustomFieldResponse[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \CompWright\ServiceTitan\Model\InventoryV2CustomFieldResponse[] $custom_fields Collection of custom fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


