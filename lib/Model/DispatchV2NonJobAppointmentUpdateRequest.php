<?php
/**
 * DispatchV2NonJobAppointmentUpdateRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dispatch
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * DispatchV2NonJobAppointmentUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DispatchV2NonJobAppointmentUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dispatch.V2.NonJobAppointmentUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'technician_id' => 'int',
        'start' => '\DateTime',
        'duration' => 'string',
        'name' => 'string',
        'timesheet_code_id' => 'int',
        'summary' => 'string',
        'clear_dispatch_board' => 'bool',
        'clear_technician_view' => 'bool',
        'remove_technician_from_capacity_planning' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'technician_id' => 'int64',
        'start' => 'date-time',
        'duration' => 'time-span',
        'name' => null,
        'timesheet_code_id' => 'int64',
        'summary' => null,
        'clear_dispatch_board' => null,
        'clear_technician_view' => null,
        'remove_technician_from_capacity_planning' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'technician_id' => 'technicianId',
        'start' => 'start',
        'duration' => 'duration',
        'name' => 'name',
        'timesheet_code_id' => 'timesheetCodeId',
        'summary' => 'summary',
        'clear_dispatch_board' => 'clearDispatchBoard',
        'clear_technician_view' => 'clearTechnicianView',
        'remove_technician_from_capacity_planning' => 'removeTechnicianFromCapacityPlanning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'technician_id' => 'setTechnicianId',
        'start' => 'setStart',
        'duration' => 'setDuration',
        'name' => 'setName',
        'timesheet_code_id' => 'setTimesheetCodeId',
        'summary' => 'setSummary',
        'clear_dispatch_board' => 'setClearDispatchBoard',
        'clear_technician_view' => 'setClearTechnicianView',
        'remove_technician_from_capacity_planning' => 'setRemoveTechnicianFromCapacityPlanning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'technician_id' => 'getTechnicianId',
        'start' => 'getStart',
        'duration' => 'getDuration',
        'name' => 'getName',
        'timesheet_code_id' => 'getTimesheetCodeId',
        'summary' => 'getSummary',
        'clear_dispatch_board' => 'getClearDispatchBoard',
        'clear_technician_view' => 'getClearTechnicianView',
        'remove_technician_from_capacity_planning' => 'getRemoveTechnicianFromCapacityPlanning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['technician_id'] = $data['technician_id'] ?? null;
        $this->container['start'] = $data['start'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['timesheet_code_id'] = $data['timesheet_code_id'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['clear_dispatch_board'] = $data['clear_dispatch_board'] ?? null;
        $this->container['clear_technician_view'] = $data['clear_technician_view'] ?? null;
        $this->container['remove_technician_from_capacity_planning'] = $data['remove_technician_from_capacity_planning'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['technician_id'] === null) {
            $invalidProperties[] = "'technician_id' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['timesheet_code_id'] === null) {
            $invalidProperties[] = "'timesheet_code_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets technician_id
     *
     * @return int
     */
    public function getTechnicianId()
    {
        return $this->container['technician_id'];
    }

    /**
     * Sets technician_id
     *
     * @param int $technician_id technician_id
     *
     * @return self
     */
    public function setTechnicianId($technician_id)
    {
        $this->container['technician_id'] = $technician_id;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start start
     *
     * @return self
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets timesheet_code_id
     *
     * @return int
     */
    public function getTimesheetCodeId()
    {
        return $this->container['timesheet_code_id'];
    }

    /**
     * Sets timesheet_code_id
     *
     * @param int $timesheet_code_id timesheet_code_id
     *
     * @return self
     */
    public function setTimesheetCodeId($timesheet_code_id)
    {
        $this->container['timesheet_code_id'] = $timesheet_code_id;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets clear_dispatch_board
     *
     * @return bool|null
     */
    public function getClearDispatchBoard()
    {
        return $this->container['clear_dispatch_board'];
    }

    /**
     * Sets clear_dispatch_board
     *
     * @param bool|null $clear_dispatch_board clear_dispatch_board
     *
     * @return self
     */
    public function setClearDispatchBoard($clear_dispatch_board)
    {
        $this->container['clear_dispatch_board'] = $clear_dispatch_board;

        return $this;
    }

    /**
     * Gets clear_technician_view
     *
     * @return bool|null
     */
    public function getClearTechnicianView()
    {
        return $this->container['clear_technician_view'];
    }

    /**
     * Sets clear_technician_view
     *
     * @param bool|null $clear_technician_view clear_technician_view
     *
     * @return self
     */
    public function setClearTechnicianView($clear_technician_view)
    {
        $this->container['clear_technician_view'] = $clear_technician_view;

        return $this;
    }

    /**
     * Gets remove_technician_from_capacity_planning
     *
     * @return bool|null
     */
    public function getRemoveTechnicianFromCapacityPlanning()
    {
        return $this->container['remove_technician_from_capacity_planning'];
    }

    /**
     * Sets remove_technician_from_capacity_planning
     *
     * @param bool|null $remove_technician_from_capacity_planning remove_technician_from_capacity_planning
     *
     * @return self
     */
    public function setRemoveTechnicianFromCapacityPlanning($remove_technician_from_capacity_planning)
    {
        $this->container['remove_technician_from_capacity_planning'] = $remove_technician_from_capacity_planning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


