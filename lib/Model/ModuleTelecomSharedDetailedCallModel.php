<?php
/**
 * ModuleTelecomSharedDetailedCallModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telecom
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * ModuleTelecomSharedDetailedCallModel Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModuleTelecomSharedDetailedCallModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Module.Telecom.Shared.DetailedCallModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'received_on' => '\DateTime',
        'duration' => 'string',
        'from' => 'string',
        'to' => 'string',
        'direction' => '\CompWright\ServiceTitan\Model\CallDirection',
        'call_type' => '\CompWright\ServiceTitan\Model\ModuleTelecomSharedDetailedCallModelCallType',
        'reason' => '\CompWright\ServiceTitan\Model\ModuleTelecomSharedCallReasonModel',
        'recording_url' => 'string',
        'voice_mail_url' => 'string',
        'created_by' => '\CompWright\ServiceTitan\Model\ServicesNamedModel',
        'customer' => '\CompWright\ServiceTitan\Model\CrmContractsCustomersCustomerModel',
        'campaign' => '\CompWright\ServiceTitan\Model\MarketingCoreCampaignModel',
        'modified_on' => '\DateTime',
        'agent' => '\CompWright\ServiceTitan\Model\ModuleTelecomSharedCallAgentModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'received_on' => 'date-time',
        'duration' => 'time-span',
        'from' => null,
        'to' => null,
        'direction' => null,
        'call_type' => null,
        'reason' => null,
        'recording_url' => null,
        'voice_mail_url' => null,
        'created_by' => null,
        'customer' => null,
        'campaign' => null,
        'modified_on' => 'date-time',
        'agent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'received_on' => false,
        'duration' => false,
        'from' => false,
        'to' => false,
        'direction' => false,
        'call_type' => true,
        'reason' => false,
        'recording_url' => false,
        'voice_mail_url' => false,
        'created_by' => false,
        'customer' => false,
        'campaign' => false,
        'modified_on' => false,
        'agent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'received_on' => 'receivedOn',
        'duration' => 'duration',
        'from' => 'from',
        'to' => 'to',
        'direction' => 'direction',
        'call_type' => 'callType',
        'reason' => 'reason',
        'recording_url' => 'recordingUrl',
        'voice_mail_url' => 'voiceMailUrl',
        'created_by' => 'createdBy',
        'customer' => 'customer',
        'campaign' => 'campaign',
        'modified_on' => 'modifiedOn',
        'agent' => 'agent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'received_on' => 'setReceivedOn',
        'duration' => 'setDuration',
        'from' => 'setFrom',
        'to' => 'setTo',
        'direction' => 'setDirection',
        'call_type' => 'setCallType',
        'reason' => 'setReason',
        'recording_url' => 'setRecordingUrl',
        'voice_mail_url' => 'setVoiceMailUrl',
        'created_by' => 'setCreatedBy',
        'customer' => 'setCustomer',
        'campaign' => 'setCampaign',
        'modified_on' => 'setModifiedOn',
        'agent' => 'setAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'received_on' => 'getReceivedOn',
        'duration' => 'getDuration',
        'from' => 'getFrom',
        'to' => 'getTo',
        'direction' => 'getDirection',
        'call_type' => 'getCallType',
        'reason' => 'getReason',
        'recording_url' => 'getRecordingUrl',
        'voice_mail_url' => 'getVoiceMailUrl',
        'created_by' => 'getCreatedBy',
        'customer' => 'getCustomer',
        'campaign' => 'getCampaign',
        'modified_on' => 'getModifiedOn',
        'agent' => 'getAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('received_on', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('call_type', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('recording_url', $data ?? [], null);
        $this->setIfExists('voice_mail_url', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('campaign', $data ?? [], null);
        $this->setIfExists('modified_on', $data ?? [], null);
        $this->setIfExists('agent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['received_on'] === null) {
            $invalidProperties[] = "'received_on' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ($this->container['recording_url'] === null) {
            $invalidProperties[] = "'recording_url' can't be null";
        }
        if ($this->container['voice_mail_url'] === null) {
            $invalidProperties[] = "'voice_mail_url' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['campaign'] === null) {
            $invalidProperties[] = "'campaign' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['agent'] === null) {
            $invalidProperties[] = "'agent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets received_on
     *
     * @return \DateTime
     */
    public function getReceivedOn()
    {
        return $this->container['received_on'];
    }

    /**
     * Sets received_on
     *
     * @param \DateTime $received_on received_on
     *
     * @return self
     */
    public function setReceivedOn($received_on)
    {
        if (is_null($received_on)) {
            throw new \InvalidArgumentException('non-nullable received_on cannot be null');
        }
        $this->container['received_on'] = $received_on;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return \CompWright\ServiceTitan\Model\CallDirection
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param \CompWright\ServiceTitan\Model\CallDirection $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets call_type
     *
     * @return \CompWright\ServiceTitan\Model\ModuleTelecomSharedDetailedCallModelCallType|null
     */
    public function getCallType()
    {
        return $this->container['call_type'];
    }

    /**
     * Sets call_type
     *
     * @param \CompWright\ServiceTitan\Model\ModuleTelecomSharedDetailedCallModelCallType|null $call_type call_type
     *
     * @return self
     */
    public function setCallType($call_type)
    {
        if (is_null($call_type)) {
            array_push($this->openAPINullablesSetToNull, 'call_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('call_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['call_type'] = $call_type;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return \CompWright\ServiceTitan\Model\ModuleTelecomSharedCallReasonModel
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param \CompWright\ServiceTitan\Model\ModuleTelecomSharedCallReasonModel $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets recording_url
     *
     * @return string
     */
    public function getRecordingUrl()
    {
        return $this->container['recording_url'];
    }

    /**
     * Sets recording_url
     *
     * @param string $recording_url recording_url
     *
     * @return self
     */
    public function setRecordingUrl($recording_url)
    {
        if (is_null($recording_url)) {
            throw new \InvalidArgumentException('non-nullable recording_url cannot be null');
        }
        $this->container['recording_url'] = $recording_url;

        return $this;
    }

    /**
     * Gets voice_mail_url
     *
     * @return string
     */
    public function getVoiceMailUrl()
    {
        return $this->container['voice_mail_url'];
    }

    /**
     * Sets voice_mail_url
     *
     * @param string $voice_mail_url voice_mail_url
     *
     * @return self
     */
    public function setVoiceMailUrl($voice_mail_url)
    {
        if (is_null($voice_mail_url)) {
            throw new \InvalidArgumentException('non-nullable voice_mail_url cannot be null');
        }
        $this->container['voice_mail_url'] = $voice_mail_url;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \CompWright\ServiceTitan\Model\ServicesNamedModel
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \CompWright\ServiceTitan\Model\ServicesNamedModel $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \CompWright\ServiceTitan\Model\CrmContractsCustomersCustomerModel
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \CompWright\ServiceTitan\Model\CrmContractsCustomersCustomerModel $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return \CompWright\ServiceTitan\Model\MarketingCoreCampaignModel
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param \CompWright\ServiceTitan\Model\MarketingCoreCampaignModel $campaign campaign
     *
     * @return self
     */
    public function setCampaign($campaign)
    {
        if (is_null($campaign)) {
            throw new \InvalidArgumentException('non-nullable campaign cannot be null');
        }
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        if (is_null($modified_on)) {
            throw new \InvalidArgumentException('non-nullable modified_on cannot be null');
        }
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \CompWright\ServiceTitan\Model\ModuleTelecomSharedCallAgentModel
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \CompWright\ServiceTitan\Model\ModuleTelecomSharedCallAgentModel $agent agent
     *
     * @return self
     */
    public function setAgent($agent)
    {
        if (is_null($agent)) {
            throw new \InvalidArgumentException('non-nullable agent cannot be null');
        }
        $this->container['agent'] = $agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


