<?php
/**
 * InventoryV2PurchaseOrderTypeResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inventory
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * InventoryV2PurchaseOrderTypeResponse Class Doc Comment
 *
 * @category Class
 * @description Represents purchase order type response
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InventoryV2PurchaseOrderTypeResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Inventory.V2.PurchaseOrderTypeResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'active' => 'bool',
        'automatically_receive' => 'bool',
        'display_to_technician' => 'bool',
        'impact_to_technician_payroll' => 'bool',
        'allow_technicians_to_send_po' => 'bool',
        'default_required_date_days_offset' => 'int',
        'skip_weekends' => 'bool',
        'exclude_tax_from_job_costing' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'active' => null,
        'automatically_receive' => null,
        'display_to_technician' => null,
        'impact_to_technician_payroll' => null,
        'allow_technicians_to_send_po' => null,
        'default_required_date_days_offset' => 'int32',
        'skip_weekends' => null,
        'exclude_tax_from_job_costing' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'active' => false,
        'automatically_receive' => false,
        'display_to_technician' => false,
        'impact_to_technician_payroll' => false,
        'allow_technicians_to_send_po' => false,
        'default_required_date_days_offset' => false,
        'skip_weekends' => false,
        'exclude_tax_from_job_costing' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'active' => 'active',
        'automatically_receive' => 'automaticallyReceive',
        'display_to_technician' => 'displayToTechnician',
        'impact_to_technician_payroll' => 'impactToTechnicianPayroll',
        'allow_technicians_to_send_po' => 'allowTechniciansToSendPo',
        'default_required_date_days_offset' => 'defaultRequiredDateDaysOffset',
        'skip_weekends' => 'skipWeekends',
        'exclude_tax_from_job_costing' => 'excludeTaxFromJobCosting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'active' => 'setActive',
        'automatically_receive' => 'setAutomaticallyReceive',
        'display_to_technician' => 'setDisplayToTechnician',
        'impact_to_technician_payroll' => 'setImpactToTechnicianPayroll',
        'allow_technicians_to_send_po' => 'setAllowTechniciansToSendPo',
        'default_required_date_days_offset' => 'setDefaultRequiredDateDaysOffset',
        'skip_weekends' => 'setSkipWeekends',
        'exclude_tax_from_job_costing' => 'setExcludeTaxFromJobCosting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'active' => 'getActive',
        'automatically_receive' => 'getAutomaticallyReceive',
        'display_to_technician' => 'getDisplayToTechnician',
        'impact_to_technician_payroll' => 'getImpactToTechnicianPayroll',
        'allow_technicians_to_send_po' => 'getAllowTechniciansToSendPo',
        'default_required_date_days_offset' => 'getDefaultRequiredDateDaysOffset',
        'skip_weekends' => 'getSkipWeekends',
        'exclude_tax_from_job_costing' => 'getExcludeTaxFromJobCosting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('automatically_receive', $data ?? [], null);
        $this->setIfExists('display_to_technician', $data ?? [], null);
        $this->setIfExists('impact_to_technician_payroll', $data ?? [], null);
        $this->setIfExists('allow_technicians_to_send_po', $data ?? [], null);
        $this->setIfExists('default_required_date_days_offset', $data ?? [], null);
        $this->setIfExists('skip_weekends', $data ?? [], null);
        $this->setIfExists('exclude_tax_from_job_costing', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['automatically_receive'] === null) {
            $invalidProperties[] = "'automatically_receive' can't be null";
        }
        if ($this->container['display_to_technician'] === null) {
            $invalidProperties[] = "'display_to_technician' can't be null";
        }
        if ($this->container['impact_to_technician_payroll'] === null) {
            $invalidProperties[] = "'impact_to_technician_payroll' can't be null";
        }
        if ($this->container['allow_technicians_to_send_po'] === null) {
            $invalidProperties[] = "'allow_technicians_to_send_po' can't be null";
        }
        if ($this->container['default_required_date_days_offset'] === null) {
            $invalidProperties[] = "'default_required_date_days_offset' can't be null";
        }
        if ($this->container['skip_weekends'] === null) {
            $invalidProperties[] = "'skip_weekends' can't be null";
        }
        if ($this->container['exclude_tax_from_job_costing'] === null) {
            $invalidProperties[] = "'exclude_tax_from_job_costing' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Purchase order type Id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Purchase order type Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets automatically_receive
     *
     * @return bool
     */
    public function getAutomaticallyReceive()
    {
        return $this->container['automatically_receive'];
    }

    /**
     * Sets automatically_receive
     *
     * @param bool $automatically_receive Automatically receive purchase order
     *
     * @return self
     */
    public function setAutomaticallyReceive($automatically_receive)
    {
        if (is_null($automatically_receive)) {
            throw new \InvalidArgumentException('non-nullable automatically_receive cannot be null');
        }
        $this->container['automatically_receive'] = $automatically_receive;

        return $this;
    }

    /**
     * Gets display_to_technician
     *
     * @return bool
     */
    public function getDisplayToTechnician()
    {
        return $this->container['display_to_technician'];
    }

    /**
     * Sets display_to_technician
     *
     * @param bool $display_to_technician Display purchase order type to technicain on mobile
     *
     * @return self
     */
    public function setDisplayToTechnician($display_to_technician)
    {
        if (is_null($display_to_technician)) {
            throw new \InvalidArgumentException('non-nullable display_to_technician cannot be null');
        }
        $this->container['display_to_technician'] = $display_to_technician;

        return $this;
    }

    /**
     * Gets impact_to_technician_payroll
     *
     * @return bool
     */
    public function getImpactToTechnicianPayroll()
    {
        return $this->container['impact_to_technician_payroll'];
    }

    /**
     * Sets impact_to_technician_payroll
     *
     * @param bool $impact_to_technician_payroll Default Selection for Impact to Technician Payroll on Purchase Order
     *
     * @return self
     */
    public function setImpactToTechnicianPayroll($impact_to_technician_payroll)
    {
        if (is_null($impact_to_technician_payroll)) {
            throw new \InvalidArgumentException('non-nullable impact_to_technician_payroll cannot be null');
        }
        $this->container['impact_to_technician_payroll'] = $impact_to_technician_payroll;

        return $this;
    }

    /**
     * Gets allow_technicians_to_send_po
     *
     * @return bool
     */
    public function getAllowTechniciansToSendPo()
    {
        return $this->container['allow_technicians_to_send_po'];
    }

    /**
     * Sets allow_technicians_to_send_po
     *
     * @param bool $allow_technicians_to_send_po Allow permitted technicians to send and receive POs of this type
     *
     * @return self
     */
    public function setAllowTechniciansToSendPo($allow_technicians_to_send_po)
    {
        if (is_null($allow_technicians_to_send_po)) {
            throw new \InvalidArgumentException('non-nullable allow_technicians_to_send_po cannot be null');
        }
        $this->container['allow_technicians_to_send_po'] = $allow_technicians_to_send_po;

        return $this;
    }

    /**
     * Gets default_required_date_days_offset
     *
     * @return int
     */
    public function getDefaultRequiredDateDaysOffset()
    {
        return $this->container['default_required_date_days_offset'];
    }

    /**
     * Sets default_required_date_days_offset
     *
     * @param int $default_required_date_days_offset Default number of days to offset required date
     *
     * @return self
     */
    public function setDefaultRequiredDateDaysOffset($default_required_date_days_offset)
    {
        if (is_null($default_required_date_days_offset)) {
            throw new \InvalidArgumentException('non-nullable default_required_date_days_offset cannot be null');
        }
        $this->container['default_required_date_days_offset'] = $default_required_date_days_offset;

        return $this;
    }

    /**
     * Gets skip_weekends
     *
     * @return bool
     */
    public function getSkipWeekends()
    {
        return $this->container['skip_weekends'];
    }

    /**
     * Sets skip_weekends
     *
     * @param bool $skip_weekends Skip weekends
     *
     * @return self
     */
    public function setSkipWeekends($skip_weekends)
    {
        if (is_null($skip_weekends)) {
            throw new \InvalidArgumentException('non-nullable skip_weekends cannot be null');
        }
        $this->container['skip_weekends'] = $skip_weekends;

        return $this;
    }

    /**
     * Gets exclude_tax_from_job_costing
     *
     * @return bool
     */
    public function getExcludeTaxFromJobCosting()
    {
        return $this->container['exclude_tax_from_job_costing'];
    }

    /**
     * Sets exclude_tax_from_job_costing
     *
     * @param bool $exclude_tax_from_job_costing Exclude tax from job costing
     *
     * @return self
     */
    public function setExcludeTaxFromJobCosting($exclude_tax_from_job_costing)
    {
        if (is_null($exclude_tax_from_job_costing)) {
            throw new \InvalidArgumentException('non-nullable exclude_tax_from_job_costing cannot be null');
        }
        $this->container['exclude_tax_from_job_costing'] = $exclude_tax_from_job_costing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


