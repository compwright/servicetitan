<?php
/**
 * CrmV2CustomersCreatedCustomerResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CRM
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * CrmV2CustomersCreatedCustomerResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CrmV2CustomersCreatedCustomerResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Crm.V2.Customers.CreatedCustomerResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'active' => 'bool',
        'name' => 'string',
        'type' => 'OneOfCrmV2CustomerType',
        'address' => 'OneOfCrmV2CustomersCustomerAddress',
        'custom_fields' => '\CompWright\ServiceTitan\Model\CrmV2CustomersCustomFieldModel[]',
        'balance' => 'float',
        'do_not_mail' => 'bool',
        'do_not_service' => 'bool',
        'created_on' => '\DateTime',
        'created_by_id' => 'int',
        'modified_on' => '\DateTime',
        'merged_to_id' => 'int',
        'locations' => '\CompWright\ServiceTitan\Model\CrmV2LocationsCreateLocationResponse[]',
        'contacts' => '\CompWright\ServiceTitan\Model\CrmV2CustomersCustomerContact[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'active' => null,
        'name' => null,
        'type' => null,
        'address' => null,
        'custom_fields' => null,
        'balance' => 'decimal',
        'do_not_mail' => null,
        'do_not_service' => null,
        'created_on' => 'date-time',
        'created_by_id' => 'int64',
        'modified_on' => 'date-time',
        'merged_to_id' => 'int64',
        'locations' => null,
        'contacts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'active' => 'active',
        'name' => 'name',
        'type' => 'type',
        'address' => 'address',
        'custom_fields' => 'customFields',
        'balance' => 'balance',
        'do_not_mail' => 'doNotMail',
        'do_not_service' => 'doNotService',
        'created_on' => 'createdOn',
        'created_by_id' => 'createdById',
        'modified_on' => 'modifiedOn',
        'merged_to_id' => 'mergedToId',
        'locations' => 'locations',
        'contacts' => 'contacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'active' => 'setActive',
        'name' => 'setName',
        'type' => 'setType',
        'address' => 'setAddress',
        'custom_fields' => 'setCustomFields',
        'balance' => 'setBalance',
        'do_not_mail' => 'setDoNotMail',
        'do_not_service' => 'setDoNotService',
        'created_on' => 'setCreatedOn',
        'created_by_id' => 'setCreatedById',
        'modified_on' => 'setModifiedOn',
        'merged_to_id' => 'setMergedToId',
        'locations' => 'setLocations',
        'contacts' => 'setContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'active' => 'getActive',
        'name' => 'getName',
        'type' => 'getType',
        'address' => 'getAddress',
        'custom_fields' => 'getCustomFields',
        'balance' => 'getBalance',
        'do_not_mail' => 'getDoNotMail',
        'do_not_service' => 'getDoNotService',
        'created_on' => 'getCreatedOn',
        'created_by_id' => 'getCreatedById',
        'modified_on' => 'getModifiedOn',
        'merged_to_id' => 'getMergedToId',
        'locations' => 'getLocations',
        'contacts' => 'getContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['do_not_mail'] = $data['do_not_mail'] ?? null;
        $this->container['do_not_service'] = $data['do_not_service'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['created_by_id'] = $data['created_by_id'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['merged_to_id'] = $data['merged_to_id'] ?? null;
        $this->container['locations'] = $data['locations'] ?? null;
        $this->container['contacts'] = $data['contacts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['custom_fields'] === null) {
            $invalidProperties[] = "'custom_fields' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ($this->container['do_not_mail'] === null) {
            $invalidProperties[] = "'do_not_mail' can't be null";
        }
        if ($this->container['do_not_service'] === null) {
            $invalidProperties[] = "'do_not_service' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['created_by_id'] === null) {
            $invalidProperties[] = "'created_by_id' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['locations'] === null) {
            $invalidProperties[] = "'locations' can't be null";
        }
        if ($this->container['contacts'] === null) {
            $invalidProperties[] = "'contacts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the customer
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active False indicates that someone has deactivated the customer record, typically upon merging with another record.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the customer
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return OneOfCrmV2CustomerType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param OneOfCrmV2CustomerType $type Residential or commercial
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets address
     *
     * @return OneOfCrmV2CustomersCustomerAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param OneOfCrmV2CustomersCustomerAddress $address Bill-To address of the customer record
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2CustomersCustomFieldModel[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \CompWright\ServiceTitan\Model\CrmV2CustomersCustomFieldModel[] $custom_fields Customer record’s custom fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float $balance Customer’s account balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets do_not_mail
     *
     * @return bool
     */
    public function getDoNotMail()
    {
        return $this->container['do_not_mail'];
    }

    /**
     * Sets do_not_mail
     *
     * @param bool $do_not_mail Customer has been flagged as “do not mail”
     *
     * @return self
     */
    public function setDoNotMail($do_not_mail)
    {
        $this->container['do_not_mail'] = $do_not_mail;

        return $this;
    }

    /**
     * Gets do_not_service
     *
     * @return bool
     */
    public function getDoNotService()
    {
        return $this->container['do_not_service'];
    }

    /**
     * Sets do_not_service
     *
     * @param bool $do_not_service Customer has been flagged as “do not service”
     *
     * @return self
     */
    public function setDoNotService($do_not_service)
    {
        $this->container['do_not_service'] = $do_not_service;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on DateTime (UTC) that customer record was created
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int $created_by_id User ID who created the record.
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on Modified on (UTC) for the record.
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets merged_to_id
     *
     * @return int|null
     */
    public function getMergedToId()
    {
        return $this->container['merged_to_id'];
    }

    /**
     * Sets merged_to_id
     *
     * @param int|null $merged_to_id The customer ID of the record that this record was previously merged to.
     *
     * @return self
     */
    public function setMergedToId($merged_to_id)
    {
        $this->container['merged_to_id'] = $merged_to_id;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LocationsCreateLocationResponse[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \CompWright\ServiceTitan\Model\CrmV2LocationsCreateLocationResponse[] $locations Locations for the customer
     *
     * @return self
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2CustomersCustomerContact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \CompWright\ServiceTitan\Model\CrmV2CustomersCustomerContact[] $contacts Contacts for the customer
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


