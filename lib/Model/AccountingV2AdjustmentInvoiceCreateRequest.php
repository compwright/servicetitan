<?php
/**
 * AccountingV2AdjustmentInvoiceCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * AccountingV2AdjustmentInvoiceCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountingV2AdjustmentInvoiceCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Accounting.V2.AdjustmentInvoiceCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'type_id' => 'int',
        'invoiced_on' => '\DateTime',
        'subtotal' => 'float',
        'tax' => 'float',
        'summary' => 'string',
        'royalty_status' => '\CompWright\ServiceTitan\Model\AccountingV2AdjustmentInvoiceCreateRequestRoyaltyStatus',
        'royalty_date' => '\DateTime',
        'royalty_sent_on' => '\DateTime',
        'royalty_memo' => 'string',
        'export_id' => 'string',
        'items' => '\CompWright\ServiceTitan\Model\AccountingV2InvoiceItemUpdateRequest[]',
        'payments' => '\CompWright\ServiceTitan\Model\AccountingV2PaymentSettlementUpdateRequest[]',
        'adjustment_to_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'type_id' => 'int64',
        'invoiced_on' => 'date-time',
        'subtotal' => 'decimal',
        'tax' => 'decimal',
        'summary' => null,
        'royalty_status' => null,
        'royalty_date' => 'date-time',
        'royalty_sent_on' => 'date-time',
        'royalty_memo' => null,
        'export_id' => null,
        'items' => null,
        'payments' => null,
        'adjustment_to_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => true,
        'type_id' => true,
        'invoiced_on' => true,
        'subtotal' => true,
        'tax' => true,
        'summary' => true,
        'royalty_status' => true,
        'royalty_date' => true,
        'royalty_sent_on' => true,
        'royalty_memo' => true,
        'export_id' => true,
        'items' => true,
        'payments' => true,
        'adjustment_to_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'type_id' => 'typeId',
        'invoiced_on' => 'invoicedOn',
        'subtotal' => 'subtotal',
        'tax' => 'tax',
        'summary' => 'summary',
        'royalty_status' => 'royaltyStatus',
        'royalty_date' => 'royaltyDate',
        'royalty_sent_on' => 'royaltySentOn',
        'royalty_memo' => 'royaltyMemo',
        'export_id' => 'exportId',
        'items' => 'items',
        'payments' => 'payments',
        'adjustment_to_id' => 'adjustmentToId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'type_id' => 'setTypeId',
        'invoiced_on' => 'setInvoicedOn',
        'subtotal' => 'setSubtotal',
        'tax' => 'setTax',
        'summary' => 'setSummary',
        'royalty_status' => 'setRoyaltyStatus',
        'royalty_date' => 'setRoyaltyDate',
        'royalty_sent_on' => 'setRoyaltySentOn',
        'royalty_memo' => 'setRoyaltyMemo',
        'export_id' => 'setExportId',
        'items' => 'setItems',
        'payments' => 'setPayments',
        'adjustment_to_id' => 'setAdjustmentToId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'type_id' => 'getTypeId',
        'invoiced_on' => 'getInvoicedOn',
        'subtotal' => 'getSubtotal',
        'tax' => 'getTax',
        'summary' => 'getSummary',
        'royalty_status' => 'getRoyaltyStatus',
        'royalty_date' => 'getRoyaltyDate',
        'royalty_sent_on' => 'getRoyaltySentOn',
        'royalty_memo' => 'getRoyaltyMemo',
        'export_id' => 'getExportId',
        'items' => 'getItems',
        'payments' => 'getPayments',
        'adjustment_to_id' => 'getAdjustmentToId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('invoiced_on', $data ?? [], null);
        $this->setIfExists('subtotal', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('royalty_status', $data ?? [], null);
        $this->setIfExists('royalty_date', $data ?? [], null);
        $this->setIfExists('royalty_sent_on', $data ?? [], null);
        $this->setIfExists('royalty_memo', $data ?? [], null);
        $this->setIfExists('export_id', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('adjustment_to_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['adjustment_to_id'] === null) {
            $invalidProperties[] = "'adjustment_to_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {
        if (is_null($type_id)) {
            array_push($this->openAPINullablesSetToNull, 'type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets invoiced_on
     *
     * @return \DateTime|null
     */
    public function getInvoicedOn()
    {
        return $this->container['invoiced_on'];
    }

    /**
     * Sets invoiced_on
     *
     * @param \DateTime|null $invoiced_on invoiced_on
     *
     * @return self
     */
    public function setInvoicedOn($invoiced_on)
    {
        if (is_null($invoiced_on)) {
            array_push($this->openAPINullablesSetToNull, 'invoiced_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiced_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiced_on'] = $invoiced_on;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return float|null
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param float|null $subtotal subtotal
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        if (is_null($subtotal)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float|null $tax tax
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            array_push($this->openAPINullablesSetToNull, 'tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets royalty_status
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2AdjustmentInvoiceCreateRequestRoyaltyStatus|null
     */
    public function getRoyaltyStatus()
    {
        return $this->container['royalty_status'];
    }

    /**
     * Sets royalty_status
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2AdjustmentInvoiceCreateRequestRoyaltyStatus|null $royalty_status royalty_status
     *
     * @return self
     */
    public function setRoyaltyStatus($royalty_status)
    {
        if (is_null($royalty_status)) {
            array_push($this->openAPINullablesSetToNull, 'royalty_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('royalty_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['royalty_status'] = $royalty_status;

        return $this;
    }

    /**
     * Gets royalty_date
     *
     * @return \DateTime|null
     */
    public function getRoyaltyDate()
    {
        return $this->container['royalty_date'];
    }

    /**
     * Sets royalty_date
     *
     * @param \DateTime|null $royalty_date royalty_date
     *
     * @return self
     */
    public function setRoyaltyDate($royalty_date)
    {
        if (is_null($royalty_date)) {
            array_push($this->openAPINullablesSetToNull, 'royalty_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('royalty_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['royalty_date'] = $royalty_date;

        return $this;
    }

    /**
     * Gets royalty_sent_on
     *
     * @return \DateTime|null
     */
    public function getRoyaltySentOn()
    {
        return $this->container['royalty_sent_on'];
    }

    /**
     * Sets royalty_sent_on
     *
     * @param \DateTime|null $royalty_sent_on royalty_sent_on
     *
     * @return self
     */
    public function setRoyaltySentOn($royalty_sent_on)
    {
        if (is_null($royalty_sent_on)) {
            array_push($this->openAPINullablesSetToNull, 'royalty_sent_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('royalty_sent_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['royalty_sent_on'] = $royalty_sent_on;

        return $this;
    }

    /**
     * Gets royalty_memo
     *
     * @return string|null
     */
    public function getRoyaltyMemo()
    {
        return $this->container['royalty_memo'];
    }

    /**
     * Sets royalty_memo
     *
     * @param string|null $royalty_memo royalty_memo
     *
     * @return self
     */
    public function setRoyaltyMemo($royalty_memo)
    {
        if (is_null($royalty_memo)) {
            array_push($this->openAPINullablesSetToNull, 'royalty_memo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('royalty_memo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['royalty_memo'] = $royalty_memo;

        return $this;
    }

    /**
     * Gets export_id
     *
     * @return string|null
     */
    public function getExportId()
    {
        return $this->container['export_id'];
    }

    /**
     * Sets export_id
     *
     * @param string|null $export_id export_id
     *
     * @return self
     */
    public function setExportId($export_id)
    {
        if (is_null($export_id)) {
            array_push($this->openAPINullablesSetToNull, 'export_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_id'] = $export_id;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemUpdateRequest[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemUpdateRequest[]|null $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            array_push($this->openAPINullablesSetToNull, 'items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2PaymentSettlementUpdateRequest[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2PaymentSettlementUpdateRequest[]|null $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            array_push($this->openAPINullablesSetToNull, 'payments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets adjustment_to_id
     *
     * @return int
     */
    public function getAdjustmentToId()
    {
        return $this->container['adjustment_to_id'];
    }

    /**
     * Sets adjustment_to_id
     *
     * @param int $adjustment_to_id adjustment_to_id
     *
     * @return self
     */
    public function setAdjustmentToId($adjustment_to_id)
    {
        if (is_null($adjustment_to_id)) {
            throw new \InvalidArgumentException('non-nullable adjustment_to_id cannot be null');
        }
        $this->container['adjustment_to_id'] = $adjustment_to_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


