<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan;

class MarketingClient extends Runtime\Client\Client
{
    /**
     * Gets a paginated list of campaign categories.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int  $page Format - int32. The logical number of page to return, starting from 1
     * @var int  $pageSize Format - int32. How many records to return (50 by default)
     * @var bool $includeTotal Whether total count should be returned
     *           }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfMarketingV2CampaignCategoryResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignCategoriesGetListBadRequestException
     */
    public function campaignCategoriesGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignCategoriesGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Creates new campaign category.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModificationResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignCategoriesCreateBadRequestException
     */
    public function campaignCategoriesCreate(int $tenant, ?Model\MarketingV2CampaignCategoryCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignCategoriesCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Gets campaign category specified by ID.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\MarketingV2CampaignCategoryResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignCategoriesGetBadRequestException
     */
    public function campaignCategoriesGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignCategoriesGet($id, $tenant), $fetch);
    }

    /**
     * Updates specified campaign category in "patch" mode.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModificationResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignCategoriesUpdateBadRequestException
     */
    public function campaignCategoriesUpdate(int $id, int $tenant, ?Model\MarketingV2CampaignCategoryUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignCategoriesUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets campaign cost specified by ID.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\MarketingV2CampaignCostResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignCostsGetBadRequestException
     */
    public function campaignCostsGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignCostsGet($id, $tenant), $fetch);
    }

    /**
     * Updates specified campaign cost in "patch" mode.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModificationResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignCostsUpdateBadRequestException
     */
    public function campaignCostsUpdate(int $id, int $tenant, ?Model\MarketingV2UpdateCampaignCostRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignCostsUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Creates new campaign cost.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\MarketingV2CampaignCostResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignCostsCreateBadRequestException
     */
    public function campaignCostsCreate(int $tenant, ?Model\MarketingV2CreateCampaignCostRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignCostsCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Gets a paginated list of campaigns.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     * @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     * @var string $active What kind of items should be returned (only active items will be returned by default)\
     *             Values: [True, Any, False]
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var string $name Filters records by name (case-insensitive "contains" operation)
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfMarketingV2CampaignResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignsGetListBadRequestException
     */
    public function campaignsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Creates new campaign.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\MarketingV2CampaignResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignsCreateBadRequestException
     */
    public function campaignsCreate(int $tenant, ?Model\MarketingV2CampaignUpsertRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignsCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Gets campaign specified by ID.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\MarketingV2CampaignResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignsGetBadRequestException
     */
    public function campaignsGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignsGet($id, $tenant), $fetch);
    }

    /**
     * Updates specified campaign in "patch" mode.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\MarketingV2CampaignResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignsUpdateBadRequestException
     */
    public function campaignsUpdate(int $id, int $tenant, ?Model\MarketingV2CampaignUpsertRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignsUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a paginated list of campaign costs.
     *
     * @param int   $id              format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int  $page Format - int32. The logical number of page to return, starting from 1
     * @var int  $pageSize Format - int32. How many records to return (50 by default)
     * @var bool $includeTotal Whether total count should be returned
     * @var int  $year format - int32
     * @var int  $month Format - int32.
     *           }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfMarketingV2CampaignCostResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CampaignsGetCostsBadRequestException
     */
    public function campaignsGetCosts(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CampaignsGetCosts($id, $tenant, $queryParameters), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://api.servicetitan.io');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
