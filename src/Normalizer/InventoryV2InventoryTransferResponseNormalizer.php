<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class InventoryV2InventoryTransferResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferResponse::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferResponse();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('transferType', $data)) {
                $object->setTransferType($data['transferType']);
            }
            if (\array_key_exists('status', $data)) {
                $object->setStatus($data['status']);
            }
            if (\array_key_exists('number', $data)) {
                $object->setNumber($data['number']);
            }
            if (\array_key_exists('referenceNumber', $data)) {
                $object->setReferenceNumber($data['referenceNumber']);
            }
            if (\array_key_exists('fromLocationId', $data)) {
                $object->setFromLocationId($data['fromLocationId']);
            }
            if (\array_key_exists('toLocationId', $data)) {
                $object->setToLocationId($data['toLocationId']);
            }
            if (\array_key_exists('createdById', $data) && $data['createdById'] !== null) {
                $object->setCreatedById($data['createdById']);
            } elseif (\array_key_exists('createdById', $data) && $data['createdById'] === null) {
                $object->setCreatedById(null);
            }
            if (\array_key_exists('memo', $data)) {
                $object->setMemo($data['memo']);
            }
            if (\array_key_exists('date', $data)) {
                $object->setDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['date']));
            }
            if (\array_key_exists('pickedDate', $data) && $data['pickedDate'] !== null) {
                $object->setPickedDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['pickedDate']));
            } elseif (\array_key_exists('pickedDate', $data) && $data['pickedDate'] === null) {
                $object->setPickedDate(null);
            }
            if (\array_key_exists('receivedDate', $data) && $data['receivedDate'] !== null) {
                $object->setReceivedDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['receivedDate']));
            } elseif (\array_key_exists('receivedDate', $data) && $data['receivedDate'] === null) {
                $object->setReceivedDate(null);
            }
            if (\array_key_exists('createdOn', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['createdOn']));
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('batchId', $data) && $data['batchId'] !== null) {
                $object->setBatchId($data['batchId']);
            } elseif (\array_key_exists('batchId', $data) && $data['batchId'] === null) {
                $object->setBatchId(null);
            }
            if (\array_key_exists('syncStatus', $data)) {
                $object->setSyncStatus($data['syncStatus']);
            }
            if (\array_key_exists('items', $data)) {
                $values = [];
                foreach ($data['items'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferItemResponse::class, 'json', $context);
                }
                $object->setItems($values);
            }
            if (\array_key_exists('customFields', $data)) {
                $values_1 = [];
                foreach ($data['customFields'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CompWright\ServiceTitan\Model\InventoryV2CustomFieldResponse::class, 'json', $context);
                }
                $object->setCustomFields($values_1);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['transferType'] = $object->getTransferType();
            $data['status'] = $object->getStatus();
            $data['number'] = $object->getNumber();
            $data['referenceNumber'] = $object->getReferenceNumber();
            $data['fromLocationId'] = $object->getFromLocationId();
            $data['toLocationId'] = $object->getToLocationId();
            if ($object->isInitialized('createdById') && null !== $object->getCreatedById()) {
                $data['createdById'] = $object->getCreatedById();
            }
            $data['memo'] = $object->getMemo();
            $data['date'] = $object->getDate()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('pickedDate') && null !== $object->getPickedDate()) {
                $data['pickedDate'] = $object->getPickedDate()->format('Y-m-d\TH:i:sP');
            }
            if ($object->isInitialized('receivedDate') && null !== $object->getReceivedDate()) {
                $data['receivedDate'] = $object->getReceivedDate()->format('Y-m-d\TH:i:sP');
            }
            $data['createdOn'] = $object->getCreatedOn()?->format('Y-m-d\TH:i:sP');
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('batchId') && null !== $object->getBatchId()) {
                $data['batchId'] = $object->getBatchId();
            }
            $data['syncStatus'] = $object->getSyncStatus();
            $values = [];
            foreach ($object->getItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['items'] = $values;
            $values_1 = [];
            foreach ($object->getCustomFields() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data['customFields'] = $values_1;

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\InventoryV2InventoryTransferResponse::class => false];
        }
    }
} else {
    class InventoryV2InventoryTransferResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferResponse::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferResponse();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('transferType', $data)) {
                $object->setTransferType($data['transferType']);
            }
            if (\array_key_exists('status', $data)) {
                $object->setStatus($data['status']);
            }
            if (\array_key_exists('number', $data)) {
                $object->setNumber($data['number']);
            }
            if (\array_key_exists('referenceNumber', $data)) {
                $object->setReferenceNumber($data['referenceNumber']);
            }
            if (\array_key_exists('fromLocationId', $data)) {
                $object->setFromLocationId($data['fromLocationId']);
            }
            if (\array_key_exists('toLocationId', $data)) {
                $object->setToLocationId($data['toLocationId']);
            }
            if (\array_key_exists('createdById', $data) && $data['createdById'] !== null) {
                $object->setCreatedById($data['createdById']);
            } elseif (\array_key_exists('createdById', $data) && $data['createdById'] === null) {
                $object->setCreatedById(null);
            }
            if (\array_key_exists('memo', $data)) {
                $object->setMemo($data['memo']);
            }
            if (\array_key_exists('date', $data)) {
                $object->setDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['date']));
            }
            if (\array_key_exists('pickedDate', $data) && $data['pickedDate'] !== null) {
                $object->setPickedDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['pickedDate']));
            } elseif (\array_key_exists('pickedDate', $data) && $data['pickedDate'] === null) {
                $object->setPickedDate(null);
            }
            if (\array_key_exists('receivedDate', $data) && $data['receivedDate'] !== null) {
                $object->setReceivedDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['receivedDate']));
            } elseif (\array_key_exists('receivedDate', $data) && $data['receivedDate'] === null) {
                $object->setReceivedDate(null);
            }
            if (\array_key_exists('createdOn', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['createdOn']));
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('batchId', $data) && $data['batchId'] !== null) {
                $object->setBatchId($data['batchId']);
            } elseif (\array_key_exists('batchId', $data) && $data['batchId'] === null) {
                $object->setBatchId(null);
            }
            if (\array_key_exists('syncStatus', $data)) {
                $object->setSyncStatus($data['syncStatus']);
            }
            if (\array_key_exists('items', $data)) {
                $values = [];
                foreach ($data['items'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\InventoryV2InventoryTransferItemResponse::class, 'json', $context);
                }
                $object->setItems($values);
            }
            if (\array_key_exists('customFields', $data)) {
                $values_1 = [];
                foreach ($data['customFields'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CompWright\ServiceTitan\Model\InventoryV2CustomFieldResponse::class, 'json', $context);
                }
                $object->setCustomFields($values_1);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['transferType'] = $object->getTransferType();
            $data['status'] = $object->getStatus();
            $data['number'] = $object->getNumber();
            $data['referenceNumber'] = $object->getReferenceNumber();
            $data['fromLocationId'] = $object->getFromLocationId();
            $data['toLocationId'] = $object->getToLocationId();
            if ($object->isInitialized('createdById') && null !== $object->getCreatedById()) {
                $data['createdById'] = $object->getCreatedById();
            }
            $data['memo'] = $object->getMemo();
            $data['date'] = $object->getDate()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('pickedDate') && null !== $object->getPickedDate()) {
                $data['pickedDate'] = $object->getPickedDate()->format('Y-m-d\TH:i:sP');
            }
            if ($object->isInitialized('receivedDate') && null !== $object->getReceivedDate()) {
                $data['receivedDate'] = $object->getReceivedDate()->format('Y-m-d\TH:i:sP');
            }
            $data['createdOn'] = $object->getCreatedOn()?->format('Y-m-d\TH:i:sP');
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('batchId') && null !== $object->getBatchId()) {
                $data['batchId'] = $object->getBatchId();
            }
            $data['syncStatus'] = $object->getSyncStatus();
            $values = [];
            foreach ($object->getItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['items'] = $values;
            $values_1 = [];
            foreach ($object->getCustomFields() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data['customFields'] = $values_1;

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\InventoryV2InventoryTransferResponse::class => false];
        }
    }
}
