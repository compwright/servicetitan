<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TaskManagementV2ClientSideDataResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideDataResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideDataResponse';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\TaskManagementV2ClientSideDataResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('employees', $data)) {
            $values = [];
            foreach ($data['employees'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideEmployeeResponse', 'json', $context);
            }
            $object->setEmployees($values);
        }
        if (\array_key_exists('businessUnits', $data)) {
            $values_1 = [];
            foreach ($data['businessUnits'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideBusinessUnitResponse', 'json', $context);
            }
            $object->setBusinessUnits($values_1);
        }
        if (\array_key_exists('taskPriorities', $data)) {
            $values_2 = [];
            foreach ($data['taskPriorities'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideTaskPriorityResponse', 'json', $context);
            }
            $object->setTaskPriorities($values_2);
        }
        if (\array_key_exists('taskResolutionTypes', $data)) {
            $values_3 = [];
            foreach ($data['taskResolutionTypes'] as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideTaskResolutionTypeResponse', 'json', $context);
            }
            $object->setTaskResolutionTypes($values_3);
        }
        if (\array_key_exists('taskStatuses', $data)) {
            $values_4 = [];
            foreach ($data['taskStatuses'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideTaskStatusResponse', 'json', $context);
            }
            $object->setTaskStatuses($values_4);
        }
        if (\array_key_exists('taskTypes', $data)) {
            $values_5 = [];
            foreach ($data['taskTypes'] as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideTaskTypeResponse', 'json', $context);
            }
            $object->setTaskTypes($values_5);
        }
        if (\array_key_exists('taskSources', $data)) {
            $values_6 = [];
            foreach ($data['taskSources'] as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideTaskSourceResponse', 'json', $context);
            }
            $object->setTaskSources($values_6);
        }
        if (\array_key_exists('taskResolutions', $data)) {
            $values_7 = [];
            foreach ($data['taskResolutions'] as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, 'CompWright\\ServiceTitan\\Model\\TaskManagementV2ClientSideTaskResolutionResponse', 'json', $context);
            }
            $object->setTaskResolutions($values_7);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $values = [];
        foreach ($object->getEmployees() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $data['employees'] = $values;
        $values_1 = [];
        foreach ($object->getBusinessUnits() as $value_1) {
            $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
        }
        $data['businessUnits'] = $values_1;
        $values_2 = [];
        foreach ($object->getTaskPriorities() as $value_2) {
            $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
        }
        $data['taskPriorities'] = $values_2;
        $values_3 = [];
        foreach ($object->getTaskResolutionTypes() as $value_3) {
            $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
        }
        $data['taskResolutionTypes'] = $values_3;
        $values_4 = [];
        foreach ($object->getTaskStatuses() as $value_4) {
            $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
        }
        $data['taskStatuses'] = $values_4;
        $values_5 = [];
        foreach ($object->getTaskTypes() as $value_5) {
            $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
        }
        $data['taskTypes'] = $values_5;
        $values_6 = [];
        foreach ($object->getTaskSources() as $value_6) {
            $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
        }
        $data['taskSources'] = $values_6;
        $values_7 = [];
        foreach ($object->getTaskResolutions() as $value_7) {
            $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
        }
        $data['taskResolutions'] = $values_7;

        return $data;
    }
}
