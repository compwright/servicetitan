<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class InventoryV2InventoryReceiptResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\InventoryV2InventoryReceiptResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\InventoryV2InventoryReceiptResponse';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\InventoryV2InventoryReceiptResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
        }
        if (\array_key_exists('active', $data)) {
            $object->setActive($data['active']);
        }
        if (\array_key_exists('number', $data)) {
            $object->setNumber($data['number']);
        }
        if (\array_key_exists('vendorInvoiceNumber', $data)) {
            $object->setVendorInvoiceNumber($data['vendorInvoiceNumber']);
        }
        if (\array_key_exists('createdById', $data) && $data['createdById'] !== null) {
            $object->setCreatedById($data['createdById']);
        } elseif (\array_key_exists('createdById', $data) && $data['createdById'] === null) {
            $object->setCreatedById(null);
        }
        if (\array_key_exists('memo', $data)) {
            $object->setMemo($data['memo']);
        }
        if (\array_key_exists('purchaseOrderId', $data)) {
            $object->setPurchaseOrderId($data['purchaseOrderId']);
        }
        if (\array_key_exists('billId', $data) && $data['billId'] !== null) {
            $object->setBillId($data['billId']);
        } elseif (\array_key_exists('billId', $data) && $data['billId'] === null) {
            $object->setBillId(null);
        }
        if (\array_key_exists('jobId', $data) && $data['jobId'] !== null) {
            $object->setJobId($data['jobId']);
        } elseif (\array_key_exists('jobId', $data) && $data['jobId'] === null) {
            $object->setJobId(null);
        }
        if (\array_key_exists('businessUnitId', $data) && $data['businessUnitId'] !== null) {
            $object->setBusinessUnitId($data['businessUnitId']);
        } elseif (\array_key_exists('businessUnitId', $data) && $data['businessUnitId'] === null) {
            $object->setBusinessUnitId(null);
        }
        if (\array_key_exists('vendorId', $data)) {
            $object->setVendorId($data['vendorId']);
        }
        if (\array_key_exists('technicianId', $data) && $data['technicianId'] !== null) {
            $object->setTechnicianId($data['technicianId']);
        } elseif (\array_key_exists('technicianId', $data) && $data['technicianId'] === null) {
            $object->setTechnicianId(null);
        }
        if (\array_key_exists('inventoryLocationId', $data)) {
            $object->setInventoryLocationId($data['inventoryLocationId']);
        }
        if (\array_key_exists('shipTo', $data) && $data['shipTo'] !== null) {
            $object->setShipTo($data['shipTo']);
        } elseif (\array_key_exists('shipTo', $data) && $data['shipTo'] === null) {
            $object->setShipTo(null);
        }
        if (\array_key_exists('shipToDescription', $data)) {
            $object->setShipToDescription($data['shipToDescription']);
        }
        if (\array_key_exists('receiptAmount', $data)) {
            $object->setReceiptAmount($data['receiptAmount']);
        }
        if (\array_key_exists('taxAmount', $data)) {
            $object->setTaxAmount($data['taxAmount']);
        }
        if (\array_key_exists('shippingAmount', $data)) {
            $object->setShippingAmount($data['shippingAmount']);
        }
        if (\array_key_exists('receivedOn', $data) && $data['receivedOn'] !== null) {
            $object->setReceivedOn(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['receivedOn']));
        } elseif (\array_key_exists('receivedOn', $data) && $data['receivedOn'] === null) {
            $object->setReceivedOn(null);
        }
        if (\array_key_exists('createdOn', $data)) {
            $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['createdOn']));
        }
        if (\array_key_exists('modifiedOn', $data)) {
            $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['modifiedOn']));
        }
        if (\array_key_exists('batchId', $data) && $data['batchId'] !== null) {
            $object->setBatchId($data['batchId']);
        } elseif (\array_key_exists('batchId', $data) && $data['batchId'] === null) {
            $object->setBatchId(null);
        }
        if (\array_key_exists('syncStatus', $data)) {
            $object->setSyncStatus($data['syncStatus']);
        }
        if (\array_key_exists('items', $data)) {
            $values = [];
            foreach ($data['items'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'CompWright\\ServiceTitan\\Model\\InventoryV2InventoryReceiptItemResponse', 'json', $context);
            }
            $object->setItems($values);
        }
        if (\array_key_exists('customFields', $data)) {
            $values_1 = [];
            foreach ($data['customFields'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'CompWright\\ServiceTitan\\Model\\InventoryV2CustomFieldResponse', 'json', $context);
            }
            $object->setCustomFields($values_1);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['id'] = $object->getId();
        $data['active'] = $object->getActive();
        $data['number'] = $object->getNumber();
        $data['vendorInvoiceNumber'] = $object->getVendorInvoiceNumber();
        if (null !== $object->getCreatedById()) {
            $data['createdById'] = $object->getCreatedById();
        }
        $data['memo'] = $object->getMemo();
        $data['purchaseOrderId'] = $object->getPurchaseOrderId();
        if (null !== $object->getBillId()) {
            $data['billId'] = $object->getBillId();
        }
        if (null !== $object->getJobId()) {
            $data['jobId'] = $object->getJobId();
        }
        if (null !== $object->getBusinessUnitId()) {
            $data['businessUnitId'] = $object->getBusinessUnitId();
        }
        $data['vendorId'] = $object->getVendorId();
        if (null !== $object->getTechnicianId()) {
            $data['technicianId'] = $object->getTechnicianId();
        }
        $data['inventoryLocationId'] = $object->getInventoryLocationId();
        if (null !== $object->getShipTo()) {
            $data['shipTo'] = $object->getShipTo();
        }
        $data['shipToDescription'] = $object->getShipToDescription();
        $data['receiptAmount'] = $object->getReceiptAmount();
        $data['taxAmount'] = $object->getTaxAmount();
        $data['shippingAmount'] = $object->getShippingAmount();
        if (null !== $object->getReceivedOn()) {
            $data['receivedOn'] = $object->getReceivedOn()->format('Y-m-d\\TH:i:sP');
        }
        $data['createdOn'] = $object->getCreatedOn()->format('Y-m-d\\TH:i:sP');
        $data['modifiedOn'] = $object->getModifiedOn()->format('Y-m-d\\TH:i:sP');
        if (null !== $object->getBatchId()) {
            $data['batchId'] = $object->getBatchId();
        }
        $data['syncStatus'] = $object->getSyncStatus();
        $values = [];
        foreach ($object->getItems() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $data['items'] = $values;
        $values_1 = [];
        foreach ($object->getCustomFields() as $value_1) {
            $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
        }
        $data['customFields'] = $values_1;

        return $data;
    }
}
