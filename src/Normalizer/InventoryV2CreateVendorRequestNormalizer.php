<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class InventoryV2CreateVendorRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequest::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequest::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequest();
            if (\array_key_exists('taxRate', $data) && \is_int($data['taxRate'])) {
                $data['taxRate'] = (float) $data['taxRate'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('memo', $data) && $data['memo'] !== null) {
                $object->setMemo($data['memo']);
            } elseif (\array_key_exists('memo', $data) && $data['memo'] === null) {
                $object->setMemo(null);
            }
            if (\array_key_exists('firstName', $data) && $data['firstName'] !== null) {
                $object->setFirstName($data['firstName']);
            } elseif (\array_key_exists('firstName', $data) && $data['firstName'] === null) {
                $object->setFirstName(null);
            }
            if (\array_key_exists('lastName', $data) && $data['lastName'] !== null) {
                $object->setLastName($data['lastName']);
            } elseif (\array_key_exists('lastName', $data) && $data['lastName'] === null) {
                $object->setLastName(null);
            }
            if (\array_key_exists('phone', $data) && $data['phone'] !== null) {
                $object->setPhone($data['phone']);
            } elseif (\array_key_exists('phone', $data) && $data['phone'] === null) {
                $object->setPhone(null);
            }
            if (\array_key_exists('email', $data) && $data['email'] !== null) {
                $object->setEmail($data['email']);
            } elseif (\array_key_exists('email', $data) && $data['email'] === null) {
                $object->setEmail(null);
            }
            if (\array_key_exists('fax', $data) && $data['fax'] !== null) {
                $object->setFax($data['fax']);
            } elseif (\array_key_exists('fax', $data) && $data['fax'] === null) {
                $object->setFax(null);
            }
            if (\array_key_exists('isTruckReplenishment', $data)) {
                $object->setIsTruckReplenishment($data['isTruckReplenishment']);
            }
            if (\array_key_exists('deliveryOption', $data) && $data['deliveryOption'] !== null) {
                $object->setDeliveryOption($data['deliveryOption']);
            } elseif (\array_key_exists('deliveryOption', $data) && $data['deliveryOption'] === null) {
                $object->setDeliveryOption(null);
            }
            if (\array_key_exists('taxRate', $data)) {
                $object->setTaxRate($data['taxRate']);
            }
            if (\array_key_exists('restrictedMobileCreation', $data)) {
                $object->setRestrictedMobileCreation($data['restrictedMobileCreation']);
            }
            if (\array_key_exists('vendorQuickbooksItem', $data) && $data['vendorQuickbooksItem'] !== null) {
                $object->setVendorQuickbooksItem($data['vendorQuickbooksItem']);
            } elseif (\array_key_exists('vendorQuickbooksItem', $data) && $data['vendorQuickbooksItem'] === null) {
                $object->setVendorQuickbooksItem(null);
            }
            if (\array_key_exists('paymentTermId', $data) && $data['paymentTermId'] !== null) {
                $object->setPaymentTermId($data['paymentTermId']);
            } elseif (\array_key_exists('paymentTermId', $data) && $data['paymentTermId'] === null) {
                $object->setPaymentTermId(null);
            }
            if (\array_key_exists('remittanceVendorId', $data) && $data['remittanceVendorId'] !== null) {
                $object->setRemittanceVendorId($data['remittanceVendorId']);
            } elseif (\array_key_exists('remittanceVendorId', $data) && $data['remittanceVendorId'] === null) {
                $object->setRemittanceVendorId(null);
            }
            if (\array_key_exists('address', $data)) {
                $object->setAddress($data['address']);
            }
            if (\array_key_exists('externalData', $data) && $data['externalData'] !== null) {
                $object->setExternalData($data['externalData']);
            } elseif (\array_key_exists('externalData', $data) && $data['externalData'] === null) {
                $object->setExternalData(null);
            }
            if (\array_key_exists('tags', $data) && $data['tags'] !== null) {
                $values = [];
                foreach ($data['tags'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\InventoryV2TagRequest::class, 'json', $context);
                }
                $object->setTags($values);
            } elseif (\array_key_exists('tags', $data) && $data['tags'] === null) {
                $object->setTags(null);
            }
            if (\array_key_exists('vendorContacts', $data) && $data['vendorContacts'] !== null) {
                $values_1 = [];
                foreach ($data['vendorContacts'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CompWright\ServiceTitan\Model\InventoryV2CreateVendorContactRequest::class, 'json', $context);
                }
                $object->setVendorContacts($values_1);
            } elseif (\array_key_exists('vendorContacts', $data) && $data['vendorContacts'] === null) {
                $object->setVendorContacts(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['name'] = $object->getName();
            $data['active'] = $object->getActive();
            if ($object->isInitialized('memo') && null !== $object->getMemo()) {
                $data['memo'] = $object->getMemo();
            }
            if ($object->isInitialized('firstName') && null !== $object->getFirstName()) {
                $data['firstName'] = $object->getFirstName();
            }
            if ($object->isInitialized('lastName') && null !== $object->getLastName()) {
                $data['lastName'] = $object->getLastName();
            }
            if ($object->isInitialized('phone') && null !== $object->getPhone()) {
                $data['phone'] = $object->getPhone();
            }
            if ($object->isInitialized('email') && null !== $object->getEmail()) {
                $data['email'] = $object->getEmail();
            }
            if ($object->isInitialized('fax') && null !== $object->getFax()) {
                $data['fax'] = $object->getFax();
            }
            $data['isTruckReplenishment'] = $object->getIsTruckReplenishment();
            if ($object->isInitialized('deliveryOption') && null !== $object->getDeliveryOption()) {
                $data['deliveryOption'] = $object->getDeliveryOption();
            }
            $data['taxRate'] = $object->getTaxRate();
            $data['restrictedMobileCreation'] = $object->getRestrictedMobileCreation();
            if ($object->isInitialized('vendorQuickbooksItem') && null !== $object->getVendorQuickbooksItem()) {
                $data['vendorQuickbooksItem'] = $object->getVendorQuickbooksItem();
            }
            if ($object->isInitialized('paymentTermId') && null !== $object->getPaymentTermId()) {
                $data['paymentTermId'] = $object->getPaymentTermId();
            }
            if ($object->isInitialized('remittanceVendorId') && null !== $object->getRemittanceVendorId()) {
                $data['remittanceVendorId'] = $object->getRemittanceVendorId();
            }
            $data['address'] = $object->getAddress();
            if ($object->isInitialized('externalData') && null !== $object->getExternalData()) {
                $data['externalData'] = $object->getExternalData();
            }
            if ($object->isInitialized('tags') && null !== $object->getTags()) {
                $values = [];
                foreach ($object->getTags() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['tags'] = $values;
            }
            if ($object->isInitialized('vendorContacts') && null !== $object->getVendorContacts()) {
                $values_1 = [];
                foreach ($object->getVendorContacts() as $value_1) {
                    $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $data['vendorContacts'] = $values_1;
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequest::class => false];
        }
    }
} else {
    class InventoryV2CreateVendorRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequest::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequest::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequest();
            if (\array_key_exists('taxRate', $data) && \is_int($data['taxRate'])) {
                $data['taxRate'] = (float) $data['taxRate'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('memo', $data) && $data['memo'] !== null) {
                $object->setMemo($data['memo']);
            } elseif (\array_key_exists('memo', $data) && $data['memo'] === null) {
                $object->setMemo(null);
            }
            if (\array_key_exists('firstName', $data) && $data['firstName'] !== null) {
                $object->setFirstName($data['firstName']);
            } elseif (\array_key_exists('firstName', $data) && $data['firstName'] === null) {
                $object->setFirstName(null);
            }
            if (\array_key_exists('lastName', $data) && $data['lastName'] !== null) {
                $object->setLastName($data['lastName']);
            } elseif (\array_key_exists('lastName', $data) && $data['lastName'] === null) {
                $object->setLastName(null);
            }
            if (\array_key_exists('phone', $data) && $data['phone'] !== null) {
                $object->setPhone($data['phone']);
            } elseif (\array_key_exists('phone', $data) && $data['phone'] === null) {
                $object->setPhone(null);
            }
            if (\array_key_exists('email', $data) && $data['email'] !== null) {
                $object->setEmail($data['email']);
            } elseif (\array_key_exists('email', $data) && $data['email'] === null) {
                $object->setEmail(null);
            }
            if (\array_key_exists('fax', $data) && $data['fax'] !== null) {
                $object->setFax($data['fax']);
            } elseif (\array_key_exists('fax', $data) && $data['fax'] === null) {
                $object->setFax(null);
            }
            if (\array_key_exists('isTruckReplenishment', $data)) {
                $object->setIsTruckReplenishment($data['isTruckReplenishment']);
            }
            if (\array_key_exists('deliveryOption', $data) && $data['deliveryOption'] !== null) {
                $object->setDeliveryOption($data['deliveryOption']);
            } elseif (\array_key_exists('deliveryOption', $data) && $data['deliveryOption'] === null) {
                $object->setDeliveryOption(null);
            }
            if (\array_key_exists('taxRate', $data)) {
                $object->setTaxRate($data['taxRate']);
            }
            if (\array_key_exists('restrictedMobileCreation', $data)) {
                $object->setRestrictedMobileCreation($data['restrictedMobileCreation']);
            }
            if (\array_key_exists('vendorQuickbooksItem', $data) && $data['vendorQuickbooksItem'] !== null) {
                $object->setVendorQuickbooksItem($data['vendorQuickbooksItem']);
            } elseif (\array_key_exists('vendorQuickbooksItem', $data) && $data['vendorQuickbooksItem'] === null) {
                $object->setVendorQuickbooksItem(null);
            }
            if (\array_key_exists('paymentTermId', $data) && $data['paymentTermId'] !== null) {
                $object->setPaymentTermId($data['paymentTermId']);
            } elseif (\array_key_exists('paymentTermId', $data) && $data['paymentTermId'] === null) {
                $object->setPaymentTermId(null);
            }
            if (\array_key_exists('remittanceVendorId', $data) && $data['remittanceVendorId'] !== null) {
                $object->setRemittanceVendorId($data['remittanceVendorId']);
            } elseif (\array_key_exists('remittanceVendorId', $data) && $data['remittanceVendorId'] === null) {
                $object->setRemittanceVendorId(null);
            }
            if (\array_key_exists('address', $data)) {
                $object->setAddress($data['address']);
            }
            if (\array_key_exists('externalData', $data) && $data['externalData'] !== null) {
                $object->setExternalData($data['externalData']);
            } elseif (\array_key_exists('externalData', $data) && $data['externalData'] === null) {
                $object->setExternalData(null);
            }
            if (\array_key_exists('tags', $data) && $data['tags'] !== null) {
                $values = [];
                foreach ($data['tags'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\InventoryV2TagRequest::class, 'json', $context);
                }
                $object->setTags($values);
            } elseif (\array_key_exists('tags', $data) && $data['tags'] === null) {
                $object->setTags(null);
            }
            if (\array_key_exists('vendorContacts', $data) && $data['vendorContacts'] !== null) {
                $values_1 = [];
                foreach ($data['vendorContacts'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CompWright\ServiceTitan\Model\InventoryV2CreateVendorContactRequest::class, 'json', $context);
                }
                $object->setVendorContacts($values_1);
            } elseif (\array_key_exists('vendorContacts', $data) && $data['vendorContacts'] === null) {
                $object->setVendorContacts(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['name'] = $object->getName();
            $data['active'] = $object->getActive();
            if ($object->isInitialized('memo') && null !== $object->getMemo()) {
                $data['memo'] = $object->getMemo();
            }
            if ($object->isInitialized('firstName') && null !== $object->getFirstName()) {
                $data['firstName'] = $object->getFirstName();
            }
            if ($object->isInitialized('lastName') && null !== $object->getLastName()) {
                $data['lastName'] = $object->getLastName();
            }
            if ($object->isInitialized('phone') && null !== $object->getPhone()) {
                $data['phone'] = $object->getPhone();
            }
            if ($object->isInitialized('email') && null !== $object->getEmail()) {
                $data['email'] = $object->getEmail();
            }
            if ($object->isInitialized('fax') && null !== $object->getFax()) {
                $data['fax'] = $object->getFax();
            }
            $data['isTruckReplenishment'] = $object->getIsTruckReplenishment();
            if ($object->isInitialized('deliveryOption') && null !== $object->getDeliveryOption()) {
                $data['deliveryOption'] = $object->getDeliveryOption();
            }
            $data['taxRate'] = $object->getTaxRate();
            $data['restrictedMobileCreation'] = $object->getRestrictedMobileCreation();
            if ($object->isInitialized('vendorQuickbooksItem') && null !== $object->getVendorQuickbooksItem()) {
                $data['vendorQuickbooksItem'] = $object->getVendorQuickbooksItem();
            }
            if ($object->isInitialized('paymentTermId') && null !== $object->getPaymentTermId()) {
                $data['paymentTermId'] = $object->getPaymentTermId();
            }
            if ($object->isInitialized('remittanceVendorId') && null !== $object->getRemittanceVendorId()) {
                $data['remittanceVendorId'] = $object->getRemittanceVendorId();
            }
            $data['address'] = $object->getAddress();
            if ($object->isInitialized('externalData') && null !== $object->getExternalData()) {
                $data['externalData'] = $object->getExternalData();
            }
            if ($object->isInitialized('tags') && null !== $object->getTags()) {
                $values = [];
                foreach ($object->getTags() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['tags'] = $values;
            }
            if ($object->isInitialized('vendorContacts') && null !== $object->getVendorContacts()) {
                $values_1 = [];
                foreach ($object->getVendorContacts() as $value_1) {
                    $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $data['vendorContacts'] = $values_1;
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\InventoryV2CreateVendorRequest::class => false];
        }
    }
}
