<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AccountingV2PaymentTermAPIModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\AccountingV2PaymentTermAPIModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\AccountingV2PaymentTermAPIModel';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\AccountingV2PaymentTermAPIModel();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data) && $data['id'] !== null) {
            $object->setId($data['id']);
        } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
            $object->setId(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('dueDayType', $data)) {
            $object->setDueDayType($data['dueDayType']);
        }
        if (\array_key_exists('dueDay', $data) && $data['dueDay'] !== null) {
            $object->setDueDay($data['dueDay']);
        } elseif (\array_key_exists('dueDay', $data) && $data['dueDay'] === null) {
            $object->setDueDay(null);
        }
        if (\array_key_exists('isCustomerDefault', $data)) {
            $object->setIsCustomerDefault($data['isCustomerDefault']);
        }
        if (\array_key_exists('isVendorDefault', $data)) {
            $object->setIsVendorDefault($data['isVendorDefault']);
        }
        if (\array_key_exists('active', $data)) {
            $object->setActive($data['active']);
        }
        if (\array_key_exists('inUse', $data) && $data['inUse'] !== null) {
            $object->setInUse($data['inUse']);
        } elseif (\array_key_exists('inUse', $data) && $data['inUse'] === null) {
            $object->setInUse(null);
        }
        if (\array_key_exists('paymentTermPenaltyModel', $data)) {
            $object->setPaymentTermPenaltyModel($this->denormalizer->denormalize($data['paymentTermPenaltyModel'], 'CompWright\\ServiceTitan\\Model\\AccountingV2PaymentTermPenaltyAPIModel', 'json', $context));
        }
        if (\array_key_exists('paymentTermDiscountModel', $data)) {
            $object->setPaymentTermDiscountModel($this->denormalizer->denormalize($data['paymentTermDiscountModel'], 'CompWright\\ServiceTitan\\Model\\AccountingV2PaymentTermDiscountAPIModel', 'json', $context));
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if (null !== $object->getId()) {
            $data['id'] = $object->getId();
        }
        if (null !== $object->getName()) {
            $data['name'] = $object->getName();
        }
        $data['dueDayType'] = $object->getDueDayType();
        if (null !== $object->getDueDay()) {
            $data['dueDay'] = $object->getDueDay();
        }
        $data['isCustomerDefault'] = $object->getIsCustomerDefault();
        $data['isVendorDefault'] = $object->getIsVendorDefault();
        $data['active'] = $object->getActive();
        if (null !== $object->getInUse()) {
            $data['inUse'] = $object->getInUse();
        }
        $data['paymentTermPenaltyModel'] = $this->normalizer->normalize($object->getPaymentTermPenaltyModel(), 'json', $context);
        $data['paymentTermDiscountModel'] = $this->normalizer->normalize($object->getPaymentTermDiscountModel(), 'json', $context);

        return $data;
    }
}
