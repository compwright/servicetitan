<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class TenantSettingsV2TechnicianResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianResponse::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianResponse();
            if (\array_key_exists('dailyGoal', $data) && \is_int($data['dailyGoal'])) {
                $data['dailyGoal'] = (float) $data['dailyGoal'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
            }
            if (\array_key_exists('businessUnitId', $data) && $data['businessUnitId'] !== null) {
                $object->setBusinessUnitId($data['businessUnitId']);
            } elseif (\array_key_exists('businessUnitId', $data) && $data['businessUnitId'] === null) {
                $object->setBusinessUnitId(null);
            }
            if (\array_key_exists('createdOn', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['createdOn']));
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('email', $data) && $data['email'] !== null) {
                $object->setEmail($data['email']);
            } elseif (\array_key_exists('email', $data) && $data['email'] === null) {
                $object->setEmail(null);
            }
            if (\array_key_exists('phoneNumber', $data) && $data['phoneNumber'] !== null) {
                $object->setPhoneNumber($data['phoneNumber']);
            } elseif (\array_key_exists('phoneNumber', $data) && $data['phoneNumber'] === null) {
                $object->setPhoneNumber(null);
            }
            if (\array_key_exists('loginName', $data) && $data['loginName'] !== null) {
                $object->setLoginName($data['loginName']);
            } elseif (\array_key_exists('loginName', $data) && $data['loginName'] === null) {
                $object->setLoginName(null);
            }
            if (\array_key_exists('home', $data) && $data['home'] !== null) {
                $object->setHome($data['home']);
            } elseif (\array_key_exists('home', $data) && $data['home'] === null) {
                $object->setHome(null);
            }
            if (\array_key_exists('dailyGoal', $data)) {
                $object->setDailyGoal($data['dailyGoal']);
            }
            if (\array_key_exists('isManagedTech', $data)) {
                $object->setIsManagedTech($data['isManagedTech']);
            }
            if (\array_key_exists('customFields', $data) && $data['customFields'] !== null) {
                $values = [];
                foreach ($data['customFields'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianCustomFieldResponse::class, 'json', $context);
                }
                $object->setCustomFields($values);
            } elseif (\array_key_exists('customFields', $data) && $data['customFields'] === null) {
                $object->setCustomFields(null);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['name'] = $object->getName();
            if ($object->isInitialized('businessUnitId') && null !== $object->getBusinessUnitId()) {
                $data['businessUnitId'] = $object->getBusinessUnitId();
            }
            $data['createdOn'] = $object->getCreatedOn()?->format('Y-m-d\TH:i:sP');
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('email') && null !== $object->getEmail()) {
                $data['email'] = $object->getEmail();
            }
            if ($object->isInitialized('phoneNumber') && null !== $object->getPhoneNumber()) {
                $data['phoneNumber'] = $object->getPhoneNumber();
            }
            if ($object->isInitialized('loginName') && null !== $object->getLoginName()) {
                $data['loginName'] = $object->getLoginName();
            }
            if ($object->isInitialized('home') && null !== $object->getHome()) {
                $data['home'] = $object->getHome();
            }
            $data['dailyGoal'] = $object->getDailyGoal();
            $data['isManagedTech'] = $object->getIsManagedTech();
            if ($object->isInitialized('customFields') && null !== $object->getCustomFields()) {
                $values = [];
                foreach ($object->getCustomFields() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['customFields'] = $values;
            }
            $data['active'] = $object->getActive();

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianResponse::class => false];
        }
    }
} else {
    class TenantSettingsV2TechnicianResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianResponse::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianResponse();
            if (\array_key_exists('dailyGoal', $data) && \is_int($data['dailyGoal'])) {
                $data['dailyGoal'] = (float) $data['dailyGoal'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
            }
            if (\array_key_exists('businessUnitId', $data) && $data['businessUnitId'] !== null) {
                $object->setBusinessUnitId($data['businessUnitId']);
            } elseif (\array_key_exists('businessUnitId', $data) && $data['businessUnitId'] === null) {
                $object->setBusinessUnitId(null);
            }
            if (\array_key_exists('createdOn', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['createdOn']));
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('email', $data) && $data['email'] !== null) {
                $object->setEmail($data['email']);
            } elseif (\array_key_exists('email', $data) && $data['email'] === null) {
                $object->setEmail(null);
            }
            if (\array_key_exists('phoneNumber', $data) && $data['phoneNumber'] !== null) {
                $object->setPhoneNumber($data['phoneNumber']);
            } elseif (\array_key_exists('phoneNumber', $data) && $data['phoneNumber'] === null) {
                $object->setPhoneNumber(null);
            }
            if (\array_key_exists('loginName', $data) && $data['loginName'] !== null) {
                $object->setLoginName($data['loginName']);
            } elseif (\array_key_exists('loginName', $data) && $data['loginName'] === null) {
                $object->setLoginName(null);
            }
            if (\array_key_exists('home', $data) && $data['home'] !== null) {
                $object->setHome($data['home']);
            } elseif (\array_key_exists('home', $data) && $data['home'] === null) {
                $object->setHome(null);
            }
            if (\array_key_exists('dailyGoal', $data)) {
                $object->setDailyGoal($data['dailyGoal']);
            }
            if (\array_key_exists('isManagedTech', $data)) {
                $object->setIsManagedTech($data['isManagedTech']);
            }
            if (\array_key_exists('customFields', $data) && $data['customFields'] !== null) {
                $values = [];
                foreach ($data['customFields'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianCustomFieldResponse::class, 'json', $context);
                }
                $object->setCustomFields($values);
            } elseif (\array_key_exists('customFields', $data) && $data['customFields'] === null) {
                $object->setCustomFields(null);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['name'] = $object->getName();
            if ($object->isInitialized('businessUnitId') && null !== $object->getBusinessUnitId()) {
                $data['businessUnitId'] = $object->getBusinessUnitId();
            }
            $data['createdOn'] = $object->getCreatedOn()?->format('Y-m-d\TH:i:sP');
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('email') && null !== $object->getEmail()) {
                $data['email'] = $object->getEmail();
            }
            if ($object->isInitialized('phoneNumber') && null !== $object->getPhoneNumber()) {
                $data['phoneNumber'] = $object->getPhoneNumber();
            }
            if ($object->isInitialized('loginName') && null !== $object->getLoginName()) {
                $data['loginName'] = $object->getLoginName();
            }
            if ($object->isInitialized('home') && null !== $object->getHome()) {
                $data['home'] = $object->getHome();
            }
            $data['dailyGoal'] = $object->getDailyGoal();
            $data['isManagedTech'] = $object->getIsManagedTech();
            if ($object->isInitialized('customFields') && null !== $object->getCustomFields()) {
                $values = [];
                foreach ($object->getCustomFields() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['customFields'] = $values;
            }
            $data['active'] = $object->getActive();

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\TenantSettingsV2TechnicianResponse::class => false];
        }
    }
}
