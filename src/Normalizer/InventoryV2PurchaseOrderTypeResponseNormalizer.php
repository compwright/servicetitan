<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class InventoryV2PurchaseOrderTypeResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\InventoryV2PurchaseOrderTypeResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\InventoryV2PurchaseOrderTypeResponse';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\InventoryV2PurchaseOrderTypeResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
        }
        if (\array_key_exists('name', $data)) {
            $object->setName($data['name']);
        }
        if (\array_key_exists('active', $data)) {
            $object->setActive($data['active']);
        }
        if (\array_key_exists('automaticallyReceive', $data)) {
            $object->setAutomaticallyReceive($data['automaticallyReceive']);
        }
        if (\array_key_exists('displayToTechnician', $data)) {
            $object->setDisplayToTechnician($data['displayToTechnician']);
        }
        if (\array_key_exists('impactToTechnicianPayroll', $data)) {
            $object->setImpactToTechnicianPayroll($data['impactToTechnicianPayroll']);
        }
        if (\array_key_exists('allowTechniciansToSendPo', $data)) {
            $object->setAllowTechniciansToSendPo($data['allowTechniciansToSendPo']);
        }
        if (\array_key_exists('defaultRequiredDateDaysOffset', $data)) {
            $object->setDefaultRequiredDateDaysOffset($data['defaultRequiredDateDaysOffset']);
        }
        if (\array_key_exists('skipWeekends', $data)) {
            $object->setSkipWeekends($data['skipWeekends']);
        }
        if (\array_key_exists('excludeTaxFromJobCosting', $data)) {
            $object->setExcludeTaxFromJobCosting($data['excludeTaxFromJobCosting']);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['id'] = $object->getId();
        $data['name'] = $object->getName();
        $data['active'] = $object->getActive();
        $data['automaticallyReceive'] = $object->getAutomaticallyReceive();
        $data['displayToTechnician'] = $object->getDisplayToTechnician();
        $data['impactToTechnicianPayroll'] = $object->getImpactToTechnicianPayroll();
        $data['allowTechniciansToSendPo'] = $object->getAllowTechniciansToSendPo();
        $data['defaultRequiredDateDaysOffset'] = $object->getDefaultRequiredDateDaysOffset();
        $data['skipWeekends'] = $object->getSkipWeekends();
        $data['excludeTaxFromJobCosting'] = $object->getExcludeTaxFromJobCosting();

        return $data;
    }
}
