<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class EstimatesV2EstimateItemUpdateResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\EstimatesV2EstimateItemUpdateResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\EstimatesV2EstimateItemUpdateResponse';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\EstimatesV2EstimateItemUpdateResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
        }
        if (\array_key_exists('sku', $data)) {
            $object->setSku($this->denormalizer->denormalize($data['sku'], 'CompWright\\ServiceTitan\\Model\\EstimatesV2SkuModel', 'json', $context));
        }
        if (\array_key_exists('skuAccount', $data)) {
            $object->setSkuAccount($data['skuAccount']);
        }
        if (\array_key_exists('description', $data)) {
            $object->setDescription($data['description']);
        }
        if (\array_key_exists('qty', $data)) {
            $object->setQty($data['qty']);
        }
        if (\array_key_exists('unitRate', $data)) {
            $object->setUnitRate($data['unitRate']);
        }
        if (\array_key_exists('total', $data)) {
            $object->setTotal($data['total']);
        }
        if (\array_key_exists('itemGroupName', $data)) {
            $object->setItemGroupName($data['itemGroupName']);
        }
        if (\array_key_exists('itemGroupRootId', $data) && $data['itemGroupRootId'] !== null) {
            $object->setItemGroupRootId($data['itemGroupRootId']);
        } elseif (\array_key_exists('itemGroupRootId', $data) && $data['itemGroupRootId'] === null) {
            $object->setItemGroupRootId(null);
        }
        if (\array_key_exists('modifiedOn', $data)) {
            $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['modifiedOn']));
        }
        if (\array_key_exists('estimateId', $data)) {
            $object->setEstimateId($data['estimateId']);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['id'] = $object->getId();
        $data['sku'] = $this->normalizer->normalize($object->getSku(), 'json', $context);
        $data['skuAccount'] = $object->getSkuAccount();
        $data['description'] = $object->getDescription();
        $data['qty'] = $object->getQty();
        $data['unitRate'] = $object->getUnitRate();
        $data['total'] = $object->getTotal();
        $data['itemGroupName'] = $object->getItemGroupName();
        if (null !== $object->getItemGroupRootId()) {
            $data['itemGroupRootId'] = $object->getItemGroupRootId();
        }
        $data['modifiedOn'] = $object->getModifiedOn()->format('Y-m-d\\TH:i:sP');
        $data['estimateId'] = $object->getEstimateId();

        return $data;
    }
}
