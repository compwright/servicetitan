<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class InventoryV2InventoryReturnResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnResponse::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnResponse();
            if (\array_key_exists('returnAmount', $data) && \is_int($data['returnAmount'])) {
                $data['returnAmount'] = (float) $data['returnAmount'];
            }
            if (\array_key_exists('taxAmount', $data) && \is_int($data['taxAmount'])) {
                $data['taxAmount'] = (float) $data['taxAmount'];
            }
            if (\array_key_exists('shippingAmount', $data) && \is_int($data['shippingAmount'])) {
                $data['shippingAmount'] = (float) $data['shippingAmount'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('number', $data)) {
                $object->setNumber($data['number']);
            }
            if (\array_key_exists('referenceNumber', $data)) {
                $object->setReferenceNumber($data['referenceNumber']);
            }
            if (\array_key_exists('vendorId', $data)) {
                $object->setVendorId($data['vendorId']);
            }
            if (\array_key_exists('purchaseOrderId', $data) && $data['purchaseOrderId'] !== null) {
                $object->setPurchaseOrderId($data['purchaseOrderId']);
            } elseif (\array_key_exists('purchaseOrderId', $data) && $data['purchaseOrderId'] === null) {
                $object->setPurchaseOrderId(null);
            }
            if (\array_key_exists('jobId', $data) && $data['jobId'] !== null) {
                $object->setJobId($data['jobId']);
            } elseif (\array_key_exists('jobId', $data) && $data['jobId'] === null) {
                $object->setJobId(null);
            }
            if (\array_key_exists('businessUnitId', $data)) {
                $object->setBusinessUnitId($data['businessUnitId']);
            }
            if (\array_key_exists('inventoryLocationId', $data) && $data['inventoryLocationId'] !== null) {
                $object->setInventoryLocationId($data['inventoryLocationId']);
            } elseif (\array_key_exists('inventoryLocationId', $data) && $data['inventoryLocationId'] === null) {
                $object->setInventoryLocationId(null);
            }
            if (\array_key_exists('createdById', $data) && $data['createdById'] !== null) {
                $object->setCreatedById($data['createdById']);
            } elseif (\array_key_exists('createdById', $data) && $data['createdById'] === null) {
                $object->setCreatedById(null);
            }
            if (\array_key_exists('memo', $data)) {
                $object->setMemo($data['memo']);
            }
            if (\array_key_exists('returnAmount', $data)) {
                $object->setReturnAmount($data['returnAmount']);
            }
            if (\array_key_exists('taxAmount', $data)) {
                $object->setTaxAmount($data['taxAmount']);
            }
            if (\array_key_exists('shippingAmount', $data)) {
                $object->setShippingAmount($data['shippingAmount']);
            }
            if (\array_key_exists('returnDate', $data)) {
                $object->setReturnDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['returnDate']));
            }
            if (\array_key_exists('createdOn', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['createdOn']));
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('batchId', $data) && $data['batchId'] !== null) {
                $object->setBatchId($data['batchId']);
            } elseif (\array_key_exists('batchId', $data) && $data['batchId'] === null) {
                $object->setBatchId(null);
            }
            if (\array_key_exists('syncStatus', $data)) {
                $object->setSyncStatus($data['syncStatus']);
            }
            if (\array_key_exists('items', $data)) {
                $values = [];
                foreach ($data['items'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnItemResponse::class, 'json', $context);
                }
                $object->setItems($values);
            }
            if (\array_key_exists('customFields', $data)) {
                $values_1 = [];
                foreach ($data['customFields'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CompWright\ServiceTitan\Model\InventoryV2CustomFieldResponse::class, 'json', $context);
                }
                $object->setCustomFields($values_1);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['active'] = $object->getActive();
            $data['number'] = $object->getNumber();
            $data['referenceNumber'] = $object->getReferenceNumber();
            $data['vendorId'] = $object->getVendorId();
            if ($object->isInitialized('purchaseOrderId') && null !== $object->getPurchaseOrderId()) {
                $data['purchaseOrderId'] = $object->getPurchaseOrderId();
            }
            if ($object->isInitialized('jobId') && null !== $object->getJobId()) {
                $data['jobId'] = $object->getJobId();
            }
            $data['businessUnitId'] = $object->getBusinessUnitId();
            if ($object->isInitialized('inventoryLocationId') && null !== $object->getInventoryLocationId()) {
                $data['inventoryLocationId'] = $object->getInventoryLocationId();
            }
            if ($object->isInitialized('createdById') && null !== $object->getCreatedById()) {
                $data['createdById'] = $object->getCreatedById();
            }
            $data['memo'] = $object->getMemo();
            $data['returnAmount'] = $object->getReturnAmount();
            $data['taxAmount'] = $object->getTaxAmount();
            $data['shippingAmount'] = $object->getShippingAmount();
            $data['returnDate'] = $object->getReturnDate()?->format('Y-m-d\TH:i:sP');
            $data['createdOn'] = $object->getCreatedOn()?->format('Y-m-d\TH:i:sP');
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('batchId') && null !== $object->getBatchId()) {
                $data['batchId'] = $object->getBatchId();
            }
            $data['syncStatus'] = $object->getSyncStatus();
            $values = [];
            foreach ($object->getItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['items'] = $values;
            $values_1 = [];
            foreach ($object->getCustomFields() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data['customFields'] = $values_1;

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\InventoryV2InventoryReturnResponse::class => false];
        }
    }
} else {
    class InventoryV2InventoryReturnResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnResponse::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnResponse();
            if (\array_key_exists('returnAmount', $data) && \is_int($data['returnAmount'])) {
                $data['returnAmount'] = (float) $data['returnAmount'];
            }
            if (\array_key_exists('taxAmount', $data) && \is_int($data['taxAmount'])) {
                $data['taxAmount'] = (float) $data['taxAmount'];
            }
            if (\array_key_exists('shippingAmount', $data) && \is_int($data['shippingAmount'])) {
                $data['shippingAmount'] = (float) $data['shippingAmount'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('number', $data)) {
                $object->setNumber($data['number']);
            }
            if (\array_key_exists('referenceNumber', $data)) {
                $object->setReferenceNumber($data['referenceNumber']);
            }
            if (\array_key_exists('vendorId', $data)) {
                $object->setVendorId($data['vendorId']);
            }
            if (\array_key_exists('purchaseOrderId', $data) && $data['purchaseOrderId'] !== null) {
                $object->setPurchaseOrderId($data['purchaseOrderId']);
            } elseif (\array_key_exists('purchaseOrderId', $data) && $data['purchaseOrderId'] === null) {
                $object->setPurchaseOrderId(null);
            }
            if (\array_key_exists('jobId', $data) && $data['jobId'] !== null) {
                $object->setJobId($data['jobId']);
            } elseif (\array_key_exists('jobId', $data) && $data['jobId'] === null) {
                $object->setJobId(null);
            }
            if (\array_key_exists('businessUnitId', $data)) {
                $object->setBusinessUnitId($data['businessUnitId']);
            }
            if (\array_key_exists('inventoryLocationId', $data) && $data['inventoryLocationId'] !== null) {
                $object->setInventoryLocationId($data['inventoryLocationId']);
            } elseif (\array_key_exists('inventoryLocationId', $data) && $data['inventoryLocationId'] === null) {
                $object->setInventoryLocationId(null);
            }
            if (\array_key_exists('createdById', $data) && $data['createdById'] !== null) {
                $object->setCreatedById($data['createdById']);
            } elseif (\array_key_exists('createdById', $data) && $data['createdById'] === null) {
                $object->setCreatedById(null);
            }
            if (\array_key_exists('memo', $data)) {
                $object->setMemo($data['memo']);
            }
            if (\array_key_exists('returnAmount', $data)) {
                $object->setReturnAmount($data['returnAmount']);
            }
            if (\array_key_exists('taxAmount', $data)) {
                $object->setTaxAmount($data['taxAmount']);
            }
            if (\array_key_exists('shippingAmount', $data)) {
                $object->setShippingAmount($data['shippingAmount']);
            }
            if (\array_key_exists('returnDate', $data)) {
                $object->setReturnDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['returnDate']));
            }
            if (\array_key_exists('createdOn', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['createdOn']));
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('batchId', $data) && $data['batchId'] !== null) {
                $object->setBatchId($data['batchId']);
            } elseif (\array_key_exists('batchId', $data) && $data['batchId'] === null) {
                $object->setBatchId(null);
            }
            if (\array_key_exists('syncStatus', $data)) {
                $object->setSyncStatus($data['syncStatus']);
            }
            if (\array_key_exists('items', $data)) {
                $values = [];
                foreach ($data['items'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnItemResponse::class, 'json', $context);
                }
                $object->setItems($values);
            }
            if (\array_key_exists('customFields', $data)) {
                $values_1 = [];
                foreach ($data['customFields'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CompWright\ServiceTitan\Model\InventoryV2CustomFieldResponse::class, 'json', $context);
                }
                $object->setCustomFields($values_1);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['active'] = $object->getActive();
            $data['number'] = $object->getNumber();
            $data['referenceNumber'] = $object->getReferenceNumber();
            $data['vendorId'] = $object->getVendorId();
            if ($object->isInitialized('purchaseOrderId') && null !== $object->getPurchaseOrderId()) {
                $data['purchaseOrderId'] = $object->getPurchaseOrderId();
            }
            if ($object->isInitialized('jobId') && null !== $object->getJobId()) {
                $data['jobId'] = $object->getJobId();
            }
            $data['businessUnitId'] = $object->getBusinessUnitId();
            if ($object->isInitialized('inventoryLocationId') && null !== $object->getInventoryLocationId()) {
                $data['inventoryLocationId'] = $object->getInventoryLocationId();
            }
            if ($object->isInitialized('createdById') && null !== $object->getCreatedById()) {
                $data['createdById'] = $object->getCreatedById();
            }
            $data['memo'] = $object->getMemo();
            $data['returnAmount'] = $object->getReturnAmount();
            $data['taxAmount'] = $object->getTaxAmount();
            $data['shippingAmount'] = $object->getShippingAmount();
            $data['returnDate'] = $object->getReturnDate()?->format('Y-m-d\TH:i:sP');
            $data['createdOn'] = $object->getCreatedOn()?->format('Y-m-d\TH:i:sP');
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('batchId') && null !== $object->getBatchId()) {
                $data['batchId'] = $object->getBatchId();
            }
            $data['syncStatus'] = $object->getSyncStatus();
            $values = [];
            foreach ($object->getItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['items'] = $values;
            $values_1 = [];
            foreach ($object->getCustomFields() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $data['customFields'] = $values_1;

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\InventoryV2InventoryReturnResponse::class => false];
        }
    }
}
