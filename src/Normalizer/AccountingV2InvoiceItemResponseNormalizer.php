<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class AccountingV2InvoiceItemResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse();
            if (\array_key_exists('soldHours', $data) && \is_int($data['soldHours'])) {
                $data['soldHours'] = (float) $data['soldHours'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('description', $data) && $data['description'] !== null) {
                $object->setDescription($data['description']);
            } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
                $object->setDescription(null);
            }
            if (\array_key_exists('quantity', $data) && $data['quantity'] !== null) {
                $object->setQuantity($data['quantity']);
            } elseif (\array_key_exists('quantity', $data) && $data['quantity'] === null) {
                $object->setQuantity(null);
            }
            if (\array_key_exists('cost', $data) && $data['cost'] !== null) {
                $object->setCost($data['cost']);
            } elseif (\array_key_exists('cost', $data) && $data['cost'] === null) {
                $object->setCost(null);
            }
            if (\array_key_exists('totalCost', $data) && $data['totalCost'] !== null) {
                $object->setTotalCost($data['totalCost']);
            } elseif (\array_key_exists('totalCost', $data) && $data['totalCost'] === null) {
                $object->setTotalCost(null);
            }
            if (\array_key_exists('inventoryLocation', $data) && $data['inventoryLocation'] !== null) {
                $object->setInventoryLocation($data['inventoryLocation']);
            } elseif (\array_key_exists('inventoryLocation', $data) && $data['inventoryLocation'] === null) {
                $object->setInventoryLocation(null);
            }
            if (\array_key_exists('price', $data) && $data['price'] !== null) {
                $object->setPrice($data['price']);
            } elseif (\array_key_exists('price', $data) && $data['price'] === null) {
                $object->setPrice(null);
            }
            if (\array_key_exists('type', $data)) {
                $object->setType($data['type']);
            }
            if (\array_key_exists('skuName', $data) && $data['skuName'] !== null) {
                $object->setSkuName($data['skuName']);
            } elseif (\array_key_exists('skuName', $data) && $data['skuName'] === null) {
                $object->setSkuName(null);
            }
            if (\array_key_exists('skuId', $data)) {
                $object->setSkuId($data['skuId']);
            }
            if (\array_key_exists('total', $data) && $data['total'] !== null) {
                $object->setTotal($data['total']);
            } elseif (\array_key_exists('total', $data) && $data['total'] === null) {
                $object->setTotal(null);
            }
            if (\array_key_exists('inventory', $data)) {
                $object->setInventory($data['inventory']);
            }
            if (\array_key_exists('taxable', $data)) {
                $object->setTaxable($data['taxable']);
            }
            if (\array_key_exists('generalLedgerAccount', $data) && $data['generalLedgerAccount'] !== null) {
                $object->setGeneralLedgerAccount($data['generalLedgerAccount']);
            } elseif (\array_key_exists('generalLedgerAccount', $data) && $data['generalLedgerAccount'] === null) {
                $object->setGeneralLedgerAccount(null);
            }
            if (\array_key_exists('costOfSaleAccount', $data) && $data['costOfSaleAccount'] !== null) {
                $object->setCostOfSaleAccount($data['costOfSaleAccount']);
            } elseif (\array_key_exists('costOfSaleAccount', $data) && $data['costOfSaleAccount'] === null) {
                $object->setCostOfSaleAccount(null);
            }
            if (\array_key_exists('assetAccount', $data) && $data['assetAccount'] !== null) {
                $object->setAssetAccount($data['assetAccount']);
            } elseif (\array_key_exists('assetAccount', $data) && $data['assetAccount'] === null) {
                $object->setAssetAccount(null);
            }
            if (\array_key_exists('membershipTypeId', $data)) {
                $object->setMembershipTypeId($data['membershipTypeId']);
            }
            if (\array_key_exists('itemGroup', $data) && $data['itemGroup'] !== null) {
                $object->setItemGroup($data['itemGroup']);
            } elseif (\array_key_exists('itemGroup', $data) && $data['itemGroup'] === null) {
                $object->setItemGroup(null);
            }
            if (\array_key_exists('displayName', $data) && $data['displayName'] !== null) {
                $object->setDisplayName($data['displayName']);
            } elseif (\array_key_exists('displayName', $data) && $data['displayName'] === null) {
                $object->setDisplayName(null);
            }
            if (\array_key_exists('soldHours', $data) && $data['soldHours'] !== null) {
                $object->setSoldHours($data['soldHours']);
            } elseif (\array_key_exists('soldHours', $data) && $data['soldHours'] === null) {
                $object->setSoldHours(null);
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('serviceDate', $data) && $data['serviceDate'] !== null) {
                $object->setServiceDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['serviceDate']));
            } elseif (\array_key_exists('serviceDate', $data) && $data['serviceDate'] === null) {
                $object->setServiceDate(null);
            }
            if (\array_key_exists('order', $data)) {
                $object->setOrder($data['order']);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['id'] = $object->getId();
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            if ($object->isInitialized('quantity') && null !== $object->getQuantity()) {
                $data['quantity'] = $object->getQuantity();
            }
            if ($object->isInitialized('cost') && null !== $object->getCost()) {
                $data['cost'] = $object->getCost();
            }
            if ($object->isInitialized('totalCost') && null !== $object->getTotalCost()) {
                $data['totalCost'] = $object->getTotalCost();
            }
            if ($object->isInitialized('inventoryLocation') && null !== $object->getInventoryLocation()) {
                $data['inventoryLocation'] = $object->getInventoryLocation();
            }
            if ($object->isInitialized('price') && null !== $object->getPrice()) {
                $data['price'] = $object->getPrice();
            }
            $data['type'] = $object->getType();
            if ($object->isInitialized('skuName') && null !== $object->getSkuName()) {
                $data['skuName'] = $object->getSkuName();
            }
            $data['skuId'] = $object->getSkuId();
            if ($object->isInitialized('total') && null !== $object->getTotal()) {
                $data['total'] = $object->getTotal();
            }
            $data['inventory'] = $object->getInventory();
            $data['taxable'] = $object->getTaxable();
            if ($object->isInitialized('generalLedgerAccount') && null !== $object->getGeneralLedgerAccount()) {
                $data['generalLedgerAccount'] = $object->getGeneralLedgerAccount();
            }
            if ($object->isInitialized('costOfSaleAccount') && null !== $object->getCostOfSaleAccount()) {
                $data['costOfSaleAccount'] = $object->getCostOfSaleAccount();
            }
            if ($object->isInitialized('assetAccount') && null !== $object->getAssetAccount()) {
                $data['assetAccount'] = $object->getAssetAccount();
            }
            $data['membershipTypeId'] = $object->getMembershipTypeId();
            if ($object->isInitialized('itemGroup') && null !== $object->getItemGroup()) {
                $data['itemGroup'] = $object->getItemGroup();
            }
            if ($object->isInitialized('displayName') && null !== $object->getDisplayName()) {
                $data['displayName'] = $object->getDisplayName();
            }
            if ($object->isInitialized('soldHours') && null !== $object->getSoldHours()) {
                $data['soldHours'] = $object->getSoldHours();
            }
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('serviceDate') && null !== $object->getServiceDate()) {
                $data['serviceDate'] = $object->getServiceDate()->format('Y-m-d\TH:i:sP');
            }
            $data['order'] = $object->getOrder();

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse::class => false];
        }
    }
} else {
    class AccountingV2InvoiceItemResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse();
            if (\array_key_exists('soldHours', $data) && \is_int($data['soldHours'])) {
                $data['soldHours'] = (float) $data['soldHours'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('description', $data) && $data['description'] !== null) {
                $object->setDescription($data['description']);
            } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
                $object->setDescription(null);
            }
            if (\array_key_exists('quantity', $data) && $data['quantity'] !== null) {
                $object->setQuantity($data['quantity']);
            } elseif (\array_key_exists('quantity', $data) && $data['quantity'] === null) {
                $object->setQuantity(null);
            }
            if (\array_key_exists('cost', $data) && $data['cost'] !== null) {
                $object->setCost($data['cost']);
            } elseif (\array_key_exists('cost', $data) && $data['cost'] === null) {
                $object->setCost(null);
            }
            if (\array_key_exists('totalCost', $data) && $data['totalCost'] !== null) {
                $object->setTotalCost($data['totalCost']);
            } elseif (\array_key_exists('totalCost', $data) && $data['totalCost'] === null) {
                $object->setTotalCost(null);
            }
            if (\array_key_exists('inventoryLocation', $data) && $data['inventoryLocation'] !== null) {
                $object->setInventoryLocation($data['inventoryLocation']);
            } elseif (\array_key_exists('inventoryLocation', $data) && $data['inventoryLocation'] === null) {
                $object->setInventoryLocation(null);
            }
            if (\array_key_exists('price', $data) && $data['price'] !== null) {
                $object->setPrice($data['price']);
            } elseif (\array_key_exists('price', $data) && $data['price'] === null) {
                $object->setPrice(null);
            }
            if (\array_key_exists('type', $data)) {
                $object->setType($data['type']);
            }
            if (\array_key_exists('skuName', $data) && $data['skuName'] !== null) {
                $object->setSkuName($data['skuName']);
            } elseif (\array_key_exists('skuName', $data) && $data['skuName'] === null) {
                $object->setSkuName(null);
            }
            if (\array_key_exists('skuId', $data)) {
                $object->setSkuId($data['skuId']);
            }
            if (\array_key_exists('total', $data) && $data['total'] !== null) {
                $object->setTotal($data['total']);
            } elseif (\array_key_exists('total', $data) && $data['total'] === null) {
                $object->setTotal(null);
            }
            if (\array_key_exists('inventory', $data)) {
                $object->setInventory($data['inventory']);
            }
            if (\array_key_exists('taxable', $data)) {
                $object->setTaxable($data['taxable']);
            }
            if (\array_key_exists('generalLedgerAccount', $data) && $data['generalLedgerAccount'] !== null) {
                $object->setGeneralLedgerAccount($data['generalLedgerAccount']);
            } elseif (\array_key_exists('generalLedgerAccount', $data) && $data['generalLedgerAccount'] === null) {
                $object->setGeneralLedgerAccount(null);
            }
            if (\array_key_exists('costOfSaleAccount', $data) && $data['costOfSaleAccount'] !== null) {
                $object->setCostOfSaleAccount($data['costOfSaleAccount']);
            } elseif (\array_key_exists('costOfSaleAccount', $data) && $data['costOfSaleAccount'] === null) {
                $object->setCostOfSaleAccount(null);
            }
            if (\array_key_exists('assetAccount', $data) && $data['assetAccount'] !== null) {
                $object->setAssetAccount($data['assetAccount']);
            } elseif (\array_key_exists('assetAccount', $data) && $data['assetAccount'] === null) {
                $object->setAssetAccount(null);
            }
            if (\array_key_exists('membershipTypeId', $data)) {
                $object->setMembershipTypeId($data['membershipTypeId']);
            }
            if (\array_key_exists('itemGroup', $data) && $data['itemGroup'] !== null) {
                $object->setItemGroup($data['itemGroup']);
            } elseif (\array_key_exists('itemGroup', $data) && $data['itemGroup'] === null) {
                $object->setItemGroup(null);
            }
            if (\array_key_exists('displayName', $data) && $data['displayName'] !== null) {
                $object->setDisplayName($data['displayName']);
            } elseif (\array_key_exists('displayName', $data) && $data['displayName'] === null) {
                $object->setDisplayName(null);
            }
            if (\array_key_exists('soldHours', $data) && $data['soldHours'] !== null) {
                $object->setSoldHours($data['soldHours']);
            } elseif (\array_key_exists('soldHours', $data) && $data['soldHours'] === null) {
                $object->setSoldHours(null);
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('serviceDate', $data) && $data['serviceDate'] !== null) {
                $object->setServiceDate(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['serviceDate']));
            } elseif (\array_key_exists('serviceDate', $data) && $data['serviceDate'] === null) {
                $object->setServiceDate(null);
            }
            if (\array_key_exists('order', $data)) {
                $object->setOrder($data['order']);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['id'] = $object->getId();
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            if ($object->isInitialized('quantity') && null !== $object->getQuantity()) {
                $data['quantity'] = $object->getQuantity();
            }
            if ($object->isInitialized('cost') && null !== $object->getCost()) {
                $data['cost'] = $object->getCost();
            }
            if ($object->isInitialized('totalCost') && null !== $object->getTotalCost()) {
                $data['totalCost'] = $object->getTotalCost();
            }
            if ($object->isInitialized('inventoryLocation') && null !== $object->getInventoryLocation()) {
                $data['inventoryLocation'] = $object->getInventoryLocation();
            }
            if ($object->isInitialized('price') && null !== $object->getPrice()) {
                $data['price'] = $object->getPrice();
            }
            $data['type'] = $object->getType();
            if ($object->isInitialized('skuName') && null !== $object->getSkuName()) {
                $data['skuName'] = $object->getSkuName();
            }
            $data['skuId'] = $object->getSkuId();
            if ($object->isInitialized('total') && null !== $object->getTotal()) {
                $data['total'] = $object->getTotal();
            }
            $data['inventory'] = $object->getInventory();
            $data['taxable'] = $object->getTaxable();
            if ($object->isInitialized('generalLedgerAccount') && null !== $object->getGeneralLedgerAccount()) {
                $data['generalLedgerAccount'] = $object->getGeneralLedgerAccount();
            }
            if ($object->isInitialized('costOfSaleAccount') && null !== $object->getCostOfSaleAccount()) {
                $data['costOfSaleAccount'] = $object->getCostOfSaleAccount();
            }
            if ($object->isInitialized('assetAccount') && null !== $object->getAssetAccount()) {
                $data['assetAccount'] = $object->getAssetAccount();
            }
            $data['membershipTypeId'] = $object->getMembershipTypeId();
            if ($object->isInitialized('itemGroup') && null !== $object->getItemGroup()) {
                $data['itemGroup'] = $object->getItemGroup();
            }
            if ($object->isInitialized('displayName') && null !== $object->getDisplayName()) {
                $data['displayName'] = $object->getDisplayName();
            }
            if ($object->isInitialized('soldHours') && null !== $object->getSoldHours()) {
                $data['soldHours'] = $object->getSoldHours();
            }
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('serviceDate') && null !== $object->getServiceDate()) {
                $data['serviceDate'] = $object->getServiceDate()->format('Y-m-d\TH:i:sP');
            }
            $data['order'] = $object->getOrder();

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse::class => false];
        }
    }
}
