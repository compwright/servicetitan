<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class PayrollV2PayrollAdjustmentsPayrollAdjustmentResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse();
            if (\array_key_exists('amount', $data) && \is_int($data['amount'])) {
                $data['amount'] = (float) $data['amount'];
            }
            if (\array_key_exists('hours', $data) && \is_int($data['hours'])) {
                $data['hours'] = (float) $data['hours'];
            }
            if (\array_key_exists('rate', $data) && \is_int($data['rate'])) {
                $data['rate'] = (float) $data['rate'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('employeeType', $data)) {
                $object->setEmployeeType($data['employeeType']);
            }
            if (\array_key_exists('employeeId', $data)) {
                $object->setEmployeeId($data['employeeId']);
            }
            if (\array_key_exists('postedOn', $data)) {
                $object->setPostedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['postedOn']));
            }
            if (\array_key_exists('amount', $data)) {
                $object->setAmount($data['amount']);
            }
            if (\array_key_exists('memo', $data) && $data['memo'] !== null) {
                $object->setMemo($data['memo']);
            } elseif (\array_key_exists('memo', $data) && $data['memo'] === null) {
                $object->setMemo(null);
            }
            if (\array_key_exists('activityCodeId', $data) && $data['activityCodeId'] !== null) {
                $object->setActivityCodeId($data['activityCodeId']);
            } elseif (\array_key_exists('activityCodeId', $data) && $data['activityCodeId'] === null) {
                $object->setActivityCodeId(null);
            }
            if (\array_key_exists('hours', $data) && $data['hours'] !== null) {
                $object->setHours($data['hours']);
            } elseif (\array_key_exists('hours', $data) && $data['hours'] === null) {
                $object->setHours(null);
            }
            if (\array_key_exists('rate', $data) && $data['rate'] !== null) {
                $object->setRate($data['rate']);
            } elseif (\array_key_exists('rate', $data) && $data['rate'] === null) {
                $object->setRate(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['employeeType'] = $object->getEmployeeType();
            $data['employeeId'] = $object->getEmployeeId();
            $data['postedOn'] = $object->getPostedOn()?->format('Y-m-d\TH:i:sP');
            $data['amount'] = $object->getAmount();
            if ($object->isInitialized('memo') && null !== $object->getMemo()) {
                $data['memo'] = $object->getMemo();
            }
            if ($object->isInitialized('activityCodeId') && null !== $object->getActivityCodeId()) {
                $data['activityCodeId'] = $object->getActivityCodeId();
            }
            if ($object->isInitialized('hours') && null !== $object->getHours()) {
                $data['hours'] = $object->getHours();
            }
            if ($object->isInitialized('rate') && null !== $object->getRate()) {
                $data['rate'] = $object->getRate();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse::class => false];
        }
    }
} else {
    class PayrollV2PayrollAdjustmentsPayrollAdjustmentResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse();
            if (\array_key_exists('amount', $data) && \is_int($data['amount'])) {
                $data['amount'] = (float) $data['amount'];
            }
            if (\array_key_exists('hours', $data) && \is_int($data['hours'])) {
                $data['hours'] = (float) $data['hours'];
            }
            if (\array_key_exists('rate', $data) && \is_int($data['rate'])) {
                $data['rate'] = (float) $data['rate'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('employeeType', $data)) {
                $object->setEmployeeType($data['employeeType']);
            }
            if (\array_key_exists('employeeId', $data)) {
                $object->setEmployeeId($data['employeeId']);
            }
            if (\array_key_exists('postedOn', $data)) {
                $object->setPostedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['postedOn']));
            }
            if (\array_key_exists('amount', $data)) {
                $object->setAmount($data['amount']);
            }
            if (\array_key_exists('memo', $data) && $data['memo'] !== null) {
                $object->setMemo($data['memo']);
            } elseif (\array_key_exists('memo', $data) && $data['memo'] === null) {
                $object->setMemo(null);
            }
            if (\array_key_exists('activityCodeId', $data) && $data['activityCodeId'] !== null) {
                $object->setActivityCodeId($data['activityCodeId']);
            } elseif (\array_key_exists('activityCodeId', $data) && $data['activityCodeId'] === null) {
                $object->setActivityCodeId(null);
            }
            if (\array_key_exists('hours', $data) && $data['hours'] !== null) {
                $object->setHours($data['hours']);
            } elseif (\array_key_exists('hours', $data) && $data['hours'] === null) {
                $object->setHours(null);
            }
            if (\array_key_exists('rate', $data) && $data['rate'] !== null) {
                $object->setRate($data['rate']);
            } elseif (\array_key_exists('rate', $data) && $data['rate'] === null) {
                $object->setRate(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['employeeType'] = $object->getEmployeeType();
            $data['employeeId'] = $object->getEmployeeId();
            $data['postedOn'] = $object->getPostedOn()?->format('Y-m-d\TH:i:sP');
            $data['amount'] = $object->getAmount();
            if ($object->isInitialized('memo') && null !== $object->getMemo()) {
                $data['memo'] = $object->getMemo();
            }
            if ($object->isInitialized('activityCodeId') && null !== $object->getActivityCodeId()) {
                $data['activityCodeId'] = $object->getActivityCodeId();
            }
            if ($object->isInitialized('hours') && null !== $object->getHours()) {
                $data['hours'] = $object->getHours();
            }
            if ($object->isInitialized('rate') && null !== $object->getRate()) {
                $data['rate'] = $object->getRate();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse::class => false];
        }
    }
}
