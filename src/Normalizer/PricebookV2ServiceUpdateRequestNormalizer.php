<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class PricebookV2ServiceUpdateRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\PricebookV2ServiceUpdateRequest::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\PricebookV2ServiceUpdateRequest::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\PricebookV2ServiceUpdateRequest();
            if (\array_key_exists('price', $data) && \is_int($data['price'])) {
                $data['price'] = (float) $data['price'];
            }
            if (\array_key_exists('memberPrice', $data) && \is_int($data['memberPrice'])) {
                $data['memberPrice'] = (float) $data['memberPrice'];
            }
            if (\array_key_exists('addOnPrice', $data) && \is_int($data['addOnPrice'])) {
                $data['addOnPrice'] = (float) $data['addOnPrice'];
            }
            if (\array_key_exists('addOnMemberPrice', $data) && \is_int($data['addOnMemberPrice'])) {
                $data['addOnMemberPrice'] = (float) $data['addOnMemberPrice'];
            }
            if (\array_key_exists('hours', $data) && \is_int($data['hours'])) {
                $data['hours'] = (float) $data['hours'];
            }
            if (\array_key_exists('commissionBonus', $data) && \is_int($data['commissionBonus'])) {
                $data['commissionBonus'] = (float) $data['commissionBonus'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('code', $data)) {
                $object->setCode($data['code']);
            }
            if (\array_key_exists('displayName', $data)) {
                $object->setDisplayName($data['displayName']);
            }
            if (\array_key_exists('description', $data)) {
                $object->setDescription($data['description']);
            }
            if (\array_key_exists('warranty', $data)) {
                $object->setWarranty($data['warranty']);
            }
            if (\array_key_exists('categories', $data)) {
                $values = [];
                foreach ($data['categories'] as $value) {
                    $values[] = $value;
                }
                $object->setCategories($values);
            }
            if (\array_key_exists('price', $data)) {
                $object->setPrice($data['price']);
            }
            if (\array_key_exists('memberPrice', $data)) {
                $object->setMemberPrice($data['memberPrice']);
            }
            if (\array_key_exists('addOnPrice', $data)) {
                $object->setAddOnPrice($data['addOnPrice']);
            }
            if (\array_key_exists('addOnMemberPrice', $data)) {
                $object->setAddOnMemberPrice($data['addOnMemberPrice']);
            }
            if (\array_key_exists('taxable', $data)) {
                $object->setTaxable($data['taxable']);
            }
            if (\array_key_exists('account', $data)) {
                $object->setAccount($data['account']);
            }
            if (\array_key_exists('hours', $data)) {
                $object->setHours($data['hours']);
            }
            if (\array_key_exists('isLabor', $data)) {
                $object->setIsLabor($data['isLabor']);
            }
            if (\array_key_exists('recommendations', $data)) {
                $values_1 = [];
                foreach ($data['recommendations'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setRecommendations($values_1);
            }
            if (\array_key_exists('upgrades', $data)) {
                $values_2 = [];
                foreach ($data['upgrades'] as $value_2) {
                    $values_2[] = $value_2;
                }
                $object->setUpgrades($values_2);
            }
            if (\array_key_exists('assets', $data)) {
                $values_3 = [];
                foreach ($data['assets'] as $value_3) {
                    $values_3[] = $this->denormalizer->denormalize($value_3, \CompWright\ServiceTitan\Model\PricebookV2SkuAssetRequest::class, 'json', $context);
                }
                $object->setAssets($values_3);
            }
            if (\array_key_exists('serviceMaterials', $data)) {
                $values_4 = [];
                foreach ($data['serviceMaterials'] as $value_4) {
                    $values_4[] = $this->denormalizer->denormalize($value_4, \CompWright\ServiceTitan\Model\PricebookV2SkuLinkRequest::class, 'json', $context);
                }
                $object->setServiceMaterials($values_4);
            }
            if (\array_key_exists('serviceEquipment', $data)) {
                $values_5 = [];
                foreach ($data['serviceEquipment'] as $value_5) {
                    $values_5[] = $this->denormalizer->denormalize($value_5, \CompWright\ServiceTitan\Model\PricebookV2SkuLinkRequest::class, 'json', $context);
                }
                $object->setServiceEquipment($values_5);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('crossSaleGroup', $data)) {
                $object->setCrossSaleGroup($data['crossSaleGroup']);
            }
            if (\array_key_exists('paysCommission', $data)) {
                $object->setPaysCommission($data['paysCommission']);
            }
            if (\array_key_exists('commissionBonus', $data)) {
                $object->setCommissionBonus($data['commissionBonus']);
            }
            if (\array_key_exists('externalData', $data) && $data['externalData'] !== null) {
                $object->setExternalData($data['externalData']);
            } elseif (\array_key_exists('externalData', $data) && $data['externalData'] === null) {
                $object->setExternalData(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('code') && null !== $object->getCode()) {
                $data['code'] = $object->getCode();
            }
            if ($object->isInitialized('displayName') && null !== $object->getDisplayName()) {
                $data['displayName'] = $object->getDisplayName();
            }
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            if ($object->isInitialized('warranty') && null !== $object->getWarranty()) {
                $data['warranty'] = $object->getWarranty();
            }
            if ($object->isInitialized('categories') && null !== $object->getCategories()) {
                $values = [];
                foreach ($object->getCategories() as $value) {
                    $values[] = $value;
                }
                $data['categories'] = $values;
            }
            if ($object->isInitialized('price') && null !== $object->getPrice()) {
                $data['price'] = $object->getPrice();
            }
            if ($object->isInitialized('memberPrice') && null !== $object->getMemberPrice()) {
                $data['memberPrice'] = $object->getMemberPrice();
            }
            if ($object->isInitialized('addOnPrice') && null !== $object->getAddOnPrice()) {
                $data['addOnPrice'] = $object->getAddOnPrice();
            }
            if ($object->isInitialized('addOnMemberPrice') && null !== $object->getAddOnMemberPrice()) {
                $data['addOnMemberPrice'] = $object->getAddOnMemberPrice();
            }
            if ($object->isInitialized('taxable') && null !== $object->getTaxable()) {
                $data['taxable'] = $object->getTaxable();
            }
            if ($object->isInitialized('account') && null !== $object->getAccount()) {
                $data['account'] = $object->getAccount();
            }
            if ($object->isInitialized('hours') && null !== $object->getHours()) {
                $data['hours'] = $object->getHours();
            }
            if ($object->isInitialized('isLabor') && null !== $object->getIsLabor()) {
                $data['isLabor'] = $object->getIsLabor();
            }
            if ($object->isInitialized('recommendations') && null !== $object->getRecommendations()) {
                $values_1 = [];
                foreach ($object->getRecommendations() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['recommendations'] = $values_1;
            }
            if ($object->isInitialized('upgrades') && null !== $object->getUpgrades()) {
                $values_2 = [];
                foreach ($object->getUpgrades() as $value_2) {
                    $values_2[] = $value_2;
                }
                $data['upgrades'] = $values_2;
            }
            if ($object->isInitialized('assets') && null !== $object->getAssets()) {
                $values_3 = [];
                foreach ($object->getAssets() as $value_3) {
                    $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
                }
                $data['assets'] = $values_3;
            }
            if ($object->isInitialized('serviceMaterials') && null !== $object->getServiceMaterials()) {
                $values_4 = [];
                foreach ($object->getServiceMaterials() as $value_4) {
                    $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
                }
                $data['serviceMaterials'] = $values_4;
            }
            if ($object->isInitialized('serviceEquipment') && null !== $object->getServiceEquipment()) {
                $values_5 = [];
                foreach ($object->getServiceEquipment() as $value_5) {
                    $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
                }
                $data['serviceEquipment'] = $values_5;
            }
            if ($object->isInitialized('active') && null !== $object->getActive()) {
                $data['active'] = $object->getActive();
            }
            if ($object->isInitialized('crossSaleGroup') && null !== $object->getCrossSaleGroup()) {
                $data['crossSaleGroup'] = $object->getCrossSaleGroup();
            }
            if ($object->isInitialized('paysCommission') && null !== $object->getPaysCommission()) {
                $data['paysCommission'] = $object->getPaysCommission();
            }
            if ($object->isInitialized('commissionBonus') && null !== $object->getCommissionBonus()) {
                $data['commissionBonus'] = $object->getCommissionBonus();
            }
            if ($object->isInitialized('externalData') && null !== $object->getExternalData()) {
                $data['externalData'] = $object->getExternalData();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\PricebookV2ServiceUpdateRequest::class => false];
        }
    }
} else {
    class PricebookV2ServiceUpdateRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\PricebookV2ServiceUpdateRequest::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\PricebookV2ServiceUpdateRequest::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\PricebookV2ServiceUpdateRequest();
            if (\array_key_exists('price', $data) && \is_int($data['price'])) {
                $data['price'] = (float) $data['price'];
            }
            if (\array_key_exists('memberPrice', $data) && \is_int($data['memberPrice'])) {
                $data['memberPrice'] = (float) $data['memberPrice'];
            }
            if (\array_key_exists('addOnPrice', $data) && \is_int($data['addOnPrice'])) {
                $data['addOnPrice'] = (float) $data['addOnPrice'];
            }
            if (\array_key_exists('addOnMemberPrice', $data) && \is_int($data['addOnMemberPrice'])) {
                $data['addOnMemberPrice'] = (float) $data['addOnMemberPrice'];
            }
            if (\array_key_exists('hours', $data) && \is_int($data['hours'])) {
                $data['hours'] = (float) $data['hours'];
            }
            if (\array_key_exists('commissionBonus', $data) && \is_int($data['commissionBonus'])) {
                $data['commissionBonus'] = (float) $data['commissionBonus'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('code', $data)) {
                $object->setCode($data['code']);
            }
            if (\array_key_exists('displayName', $data)) {
                $object->setDisplayName($data['displayName']);
            }
            if (\array_key_exists('description', $data)) {
                $object->setDescription($data['description']);
            }
            if (\array_key_exists('warranty', $data)) {
                $object->setWarranty($data['warranty']);
            }
            if (\array_key_exists('categories', $data)) {
                $values = [];
                foreach ($data['categories'] as $value) {
                    $values[] = $value;
                }
                $object->setCategories($values);
            }
            if (\array_key_exists('price', $data)) {
                $object->setPrice($data['price']);
            }
            if (\array_key_exists('memberPrice', $data)) {
                $object->setMemberPrice($data['memberPrice']);
            }
            if (\array_key_exists('addOnPrice', $data)) {
                $object->setAddOnPrice($data['addOnPrice']);
            }
            if (\array_key_exists('addOnMemberPrice', $data)) {
                $object->setAddOnMemberPrice($data['addOnMemberPrice']);
            }
            if (\array_key_exists('taxable', $data)) {
                $object->setTaxable($data['taxable']);
            }
            if (\array_key_exists('account', $data)) {
                $object->setAccount($data['account']);
            }
            if (\array_key_exists('hours', $data)) {
                $object->setHours($data['hours']);
            }
            if (\array_key_exists('isLabor', $data)) {
                $object->setIsLabor($data['isLabor']);
            }
            if (\array_key_exists('recommendations', $data)) {
                $values_1 = [];
                foreach ($data['recommendations'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setRecommendations($values_1);
            }
            if (\array_key_exists('upgrades', $data)) {
                $values_2 = [];
                foreach ($data['upgrades'] as $value_2) {
                    $values_2[] = $value_2;
                }
                $object->setUpgrades($values_2);
            }
            if (\array_key_exists('assets', $data)) {
                $values_3 = [];
                foreach ($data['assets'] as $value_3) {
                    $values_3[] = $this->denormalizer->denormalize($value_3, \CompWright\ServiceTitan\Model\PricebookV2SkuAssetRequest::class, 'json', $context);
                }
                $object->setAssets($values_3);
            }
            if (\array_key_exists('serviceMaterials', $data)) {
                $values_4 = [];
                foreach ($data['serviceMaterials'] as $value_4) {
                    $values_4[] = $this->denormalizer->denormalize($value_4, \CompWright\ServiceTitan\Model\PricebookV2SkuLinkRequest::class, 'json', $context);
                }
                $object->setServiceMaterials($values_4);
            }
            if (\array_key_exists('serviceEquipment', $data)) {
                $values_5 = [];
                foreach ($data['serviceEquipment'] as $value_5) {
                    $values_5[] = $this->denormalizer->denormalize($value_5, \CompWright\ServiceTitan\Model\PricebookV2SkuLinkRequest::class, 'json', $context);
                }
                $object->setServiceEquipment($values_5);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('crossSaleGroup', $data)) {
                $object->setCrossSaleGroup($data['crossSaleGroup']);
            }
            if (\array_key_exists('paysCommission', $data)) {
                $object->setPaysCommission($data['paysCommission']);
            }
            if (\array_key_exists('commissionBonus', $data)) {
                $object->setCommissionBonus($data['commissionBonus']);
            }
            if (\array_key_exists('externalData', $data) && $data['externalData'] !== null) {
                $object->setExternalData($data['externalData']);
            } elseif (\array_key_exists('externalData', $data) && $data['externalData'] === null) {
                $object->setExternalData(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('code') && null !== $object->getCode()) {
                $data['code'] = $object->getCode();
            }
            if ($object->isInitialized('displayName') && null !== $object->getDisplayName()) {
                $data['displayName'] = $object->getDisplayName();
            }
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            if ($object->isInitialized('warranty') && null !== $object->getWarranty()) {
                $data['warranty'] = $object->getWarranty();
            }
            if ($object->isInitialized('categories') && null !== $object->getCategories()) {
                $values = [];
                foreach ($object->getCategories() as $value) {
                    $values[] = $value;
                }
                $data['categories'] = $values;
            }
            if ($object->isInitialized('price') && null !== $object->getPrice()) {
                $data['price'] = $object->getPrice();
            }
            if ($object->isInitialized('memberPrice') && null !== $object->getMemberPrice()) {
                $data['memberPrice'] = $object->getMemberPrice();
            }
            if ($object->isInitialized('addOnPrice') && null !== $object->getAddOnPrice()) {
                $data['addOnPrice'] = $object->getAddOnPrice();
            }
            if ($object->isInitialized('addOnMemberPrice') && null !== $object->getAddOnMemberPrice()) {
                $data['addOnMemberPrice'] = $object->getAddOnMemberPrice();
            }
            if ($object->isInitialized('taxable') && null !== $object->getTaxable()) {
                $data['taxable'] = $object->getTaxable();
            }
            if ($object->isInitialized('account') && null !== $object->getAccount()) {
                $data['account'] = $object->getAccount();
            }
            if ($object->isInitialized('hours') && null !== $object->getHours()) {
                $data['hours'] = $object->getHours();
            }
            if ($object->isInitialized('isLabor') && null !== $object->getIsLabor()) {
                $data['isLabor'] = $object->getIsLabor();
            }
            if ($object->isInitialized('recommendations') && null !== $object->getRecommendations()) {
                $values_1 = [];
                foreach ($object->getRecommendations() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['recommendations'] = $values_1;
            }
            if ($object->isInitialized('upgrades') && null !== $object->getUpgrades()) {
                $values_2 = [];
                foreach ($object->getUpgrades() as $value_2) {
                    $values_2[] = $value_2;
                }
                $data['upgrades'] = $values_2;
            }
            if ($object->isInitialized('assets') && null !== $object->getAssets()) {
                $values_3 = [];
                foreach ($object->getAssets() as $value_3) {
                    $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
                }
                $data['assets'] = $values_3;
            }
            if ($object->isInitialized('serviceMaterials') && null !== $object->getServiceMaterials()) {
                $values_4 = [];
                foreach ($object->getServiceMaterials() as $value_4) {
                    $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
                }
                $data['serviceMaterials'] = $values_4;
            }
            if ($object->isInitialized('serviceEquipment') && null !== $object->getServiceEquipment()) {
                $values_5 = [];
                foreach ($object->getServiceEquipment() as $value_5) {
                    $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
                }
                $data['serviceEquipment'] = $values_5;
            }
            if ($object->isInitialized('active') && null !== $object->getActive()) {
                $data['active'] = $object->getActive();
            }
            if ($object->isInitialized('crossSaleGroup') && null !== $object->getCrossSaleGroup()) {
                $data['crossSaleGroup'] = $object->getCrossSaleGroup();
            }
            if ($object->isInitialized('paysCommission') && null !== $object->getPaysCommission()) {
                $data['paysCommission'] = $object->getPaysCommission();
            }
            if ($object->isInitialized('commissionBonus') && null !== $object->getCommissionBonus()) {
                $data['commissionBonus'] = $object->getCommissionBonus();
            }
            if ($object->isInitialized('externalData') && null !== $object->getExternalData()) {
                $data['externalData'] = $object->getExternalData();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\PricebookV2ServiceUpdateRequest::class => false];
        }
    }
}
