<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AccountingV2PaymentUpdateRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\AccountingV2PaymentUpdateRequest';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\AccountingV2PaymentUpdateRequest';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\AccountingV2PaymentUpdateRequest();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('typeId', $data)) {
            $object->setTypeId($data['typeId']);
        }
        if (\array_key_exists('active', $data)) {
            $object->setActive($data['active']);
        }
        if (\array_key_exists('memo', $data)) {
            $object->setMemo($data['memo']);
        }
        if (\array_key_exists('paidOn', $data)) {
            $object->setPaidOn(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['paidOn']));
        }
        if (\array_key_exists('authCode', $data)) {
            $object->setAuthCode($data['authCode']);
        }
        if (\array_key_exists('checkNumber', $data)) {
            $object->setCheckNumber($data['checkNumber']);
        }
        if (\array_key_exists('exportId', $data)) {
            $object->setExportId($data['exportId']);
        }
        if (\array_key_exists('transactionStatus', $data) && $data['transactionStatus'] !== null) {
            $object->setTransactionStatus($data['transactionStatus']);
        } elseif (\array_key_exists('transactionStatus', $data) && $data['transactionStatus'] === null) {
            $object->setTransactionStatus(null);
        }
        if (\array_key_exists('status', $data)) {
            $object->setStatus($data['status']);
        }
        if (\array_key_exists('splits', $data)) {
            $values = [];
            foreach ($data['splits'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'CompWright\\ServiceTitan\\Model\\AccountingV2PaymentSplitApiModel', 'json', $context);
            }
            $object->setSplits($values);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['typeId'] = $object->getTypeId();
        if (null !== $object->getActive()) {
            $data['active'] = $object->getActive();
        }
        if (null !== $object->getMemo()) {
            $data['memo'] = $object->getMemo();
        }
        if (null !== $object->getPaidOn()) {
            $data['paidOn'] = $object->getPaidOn()->format('Y-m-d\\TH:i:sP');
        }
        if (null !== $object->getAuthCode()) {
            $data['authCode'] = $object->getAuthCode();
        }
        if (null !== $object->getCheckNumber()) {
            $data['checkNumber'] = $object->getCheckNumber();
        }
        if (null !== $object->getExportId()) {
            $data['exportId'] = $object->getExportId();
        }
        if (null !== $object->getTransactionStatus()) {
            $data['transactionStatus'] = $object->getTransactionStatus();
        }
        if (null !== $object->getStatus()) {
            $data['status'] = $object->getStatus();
        }
        $values = [];
        foreach ($object->getSplits() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $data['splits'] = $values;

        return $data;
    }
}
