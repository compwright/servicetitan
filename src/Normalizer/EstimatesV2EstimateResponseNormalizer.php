<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class EstimatesV2EstimateResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\EstimatesV2EstimateResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\EstimatesV2EstimateResponse::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\EstimatesV2EstimateResponse();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('jobId', $data) && $data['jobId'] !== null) {
                $object->setJobId($data['jobId']);
            } elseif (\array_key_exists('jobId', $data) && $data['jobId'] === null) {
                $object->setJobId(null);
            }
            if (\array_key_exists('projectId', $data) && $data['projectId'] !== null) {
                $object->setProjectId($data['projectId']);
            } elseif (\array_key_exists('projectId', $data) && $data['projectId'] === null) {
                $object->setProjectId(null);
            }
            if (\array_key_exists('name', $data) && $data['name'] !== null) {
                $object->setName($data['name']);
            } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
                $object->setName(null);
            }
            if (\array_key_exists('jobNumber', $data) && $data['jobNumber'] !== null) {
                $object->setJobNumber($data['jobNumber']);
            } elseif (\array_key_exists('jobNumber', $data) && $data['jobNumber'] === null) {
                $object->setJobNumber(null);
            }
            if (\array_key_exists('status', $data) && $data['status'] !== null) {
                $object->setStatus($data['status']);
            } elseif (\array_key_exists('status', $data) && $data['status'] === null) {
                $object->setStatus(null);
            }
            if (\array_key_exists('summary', $data) && $data['summary'] !== null) {
                $object->setSummary($data['summary']);
            } elseif (\array_key_exists('summary', $data) && $data['summary'] === null) {
                $object->setSummary(null);
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('soldOn', $data) && $data['soldOn'] !== null) {
                $object->setSoldOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['soldOn']));
            } elseif (\array_key_exists('soldOn', $data) && $data['soldOn'] === null) {
                $object->setSoldOn(null);
            }
            if (\array_key_exists('soldBy', $data) && $data['soldBy'] !== null) {
                $object->setSoldBy($data['soldBy']);
            } elseif (\array_key_exists('soldBy', $data) && $data['soldBy'] === null) {
                $object->setSoldBy(null);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('items', $data) && $data['items'] !== null) {
                $values = [];
                foreach ($data['items'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\EstimatesV2EstimateItemResponse::class, 'json', $context);
                }
                $object->setItems($values);
            } elseif (\array_key_exists('items', $data) && $data['items'] === null) {
                $object->setItems(null);
            }
            if (\array_key_exists('externalLinks', $data) && $data['externalLinks'] !== null) {
                $values_1 = [];
                foreach ($data['externalLinks'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CompWright\ServiceTitan\Model\EstimatesV2ExternalLinkResponse::class, 'json', $context);
                }
                $object->setExternalLinks($values_1);
            } elseif (\array_key_exists('externalLinks', $data) && $data['externalLinks'] === null) {
                $object->setExternalLinks(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['id'] = $object->getId();
            if ($object->isInitialized('jobId') && null !== $object->getJobId()) {
                $data['jobId'] = $object->getJobId();
            }
            if ($object->isInitialized('projectId') && null !== $object->getProjectId()) {
                $data['projectId'] = $object->getProjectId();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('jobNumber') && null !== $object->getJobNumber()) {
                $data['jobNumber'] = $object->getJobNumber();
            }
            if ($object->isInitialized('status') && null !== $object->getStatus()) {
                $data['status'] = $object->getStatus();
            }
            if ($object->isInitialized('summary') && null !== $object->getSummary()) {
                $data['summary'] = $object->getSummary();
            }
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('soldOn') && null !== $object->getSoldOn()) {
                $data['soldOn'] = $object->getSoldOn()->format('Y-m-d\TH:i:sP');
            }
            if ($object->isInitialized('soldBy') && null !== $object->getSoldBy()) {
                $data['soldBy'] = $object->getSoldBy();
            }
            $data['active'] = $object->getActive();
            if ($object->isInitialized('items') && null !== $object->getItems()) {
                $values = [];
                foreach ($object->getItems() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['items'] = $values;
            }
            if ($object->isInitialized('externalLinks') && null !== $object->getExternalLinks()) {
                $values_1 = [];
                foreach ($object->getExternalLinks() as $value_1) {
                    $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $data['externalLinks'] = $values_1;
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\EstimatesV2EstimateResponse::class => false];
        }
    }
} else {
    class EstimatesV2EstimateResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\EstimatesV2EstimateResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\EstimatesV2EstimateResponse::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\EstimatesV2EstimateResponse();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('jobId', $data) && $data['jobId'] !== null) {
                $object->setJobId($data['jobId']);
            } elseif (\array_key_exists('jobId', $data) && $data['jobId'] === null) {
                $object->setJobId(null);
            }
            if (\array_key_exists('projectId', $data) && $data['projectId'] !== null) {
                $object->setProjectId($data['projectId']);
            } elseif (\array_key_exists('projectId', $data) && $data['projectId'] === null) {
                $object->setProjectId(null);
            }
            if (\array_key_exists('name', $data) && $data['name'] !== null) {
                $object->setName($data['name']);
            } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
                $object->setName(null);
            }
            if (\array_key_exists('jobNumber', $data) && $data['jobNumber'] !== null) {
                $object->setJobNumber($data['jobNumber']);
            } elseif (\array_key_exists('jobNumber', $data) && $data['jobNumber'] === null) {
                $object->setJobNumber(null);
            }
            if (\array_key_exists('status', $data) && $data['status'] !== null) {
                $object->setStatus($data['status']);
            } elseif (\array_key_exists('status', $data) && $data['status'] === null) {
                $object->setStatus(null);
            }
            if (\array_key_exists('summary', $data) && $data['summary'] !== null) {
                $object->setSummary($data['summary']);
            } elseif (\array_key_exists('summary', $data) && $data['summary'] === null) {
                $object->setSummary(null);
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }
            if (\array_key_exists('soldOn', $data) && $data['soldOn'] !== null) {
                $object->setSoldOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['soldOn']));
            } elseif (\array_key_exists('soldOn', $data) && $data['soldOn'] === null) {
                $object->setSoldOn(null);
            }
            if (\array_key_exists('soldBy', $data) && $data['soldBy'] !== null) {
                $object->setSoldBy($data['soldBy']);
            } elseif (\array_key_exists('soldBy', $data) && $data['soldBy'] === null) {
                $object->setSoldBy(null);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('items', $data) && $data['items'] !== null) {
                $values = [];
                foreach ($data['items'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\EstimatesV2EstimateItemResponse::class, 'json', $context);
                }
                $object->setItems($values);
            } elseif (\array_key_exists('items', $data) && $data['items'] === null) {
                $object->setItems(null);
            }
            if (\array_key_exists('externalLinks', $data) && $data['externalLinks'] !== null) {
                $values_1 = [];
                foreach ($data['externalLinks'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CompWright\ServiceTitan\Model\EstimatesV2ExternalLinkResponse::class, 'json', $context);
                }
                $object->setExternalLinks($values_1);
            } elseif (\array_key_exists('externalLinks', $data) && $data['externalLinks'] === null) {
                $object->setExternalLinks(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['id'] = $object->getId();
            if ($object->isInitialized('jobId') && null !== $object->getJobId()) {
                $data['jobId'] = $object->getJobId();
            }
            if ($object->isInitialized('projectId') && null !== $object->getProjectId()) {
                $data['projectId'] = $object->getProjectId();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('jobNumber') && null !== $object->getJobNumber()) {
                $data['jobNumber'] = $object->getJobNumber();
            }
            if ($object->isInitialized('status') && null !== $object->getStatus()) {
                $data['status'] = $object->getStatus();
            }
            if ($object->isInitialized('summary') && null !== $object->getSummary()) {
                $data['summary'] = $object->getSummary();
            }
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('soldOn') && null !== $object->getSoldOn()) {
                $data['soldOn'] = $object->getSoldOn()->format('Y-m-d\TH:i:sP');
            }
            if ($object->isInitialized('soldBy') && null !== $object->getSoldBy()) {
                $data['soldBy'] = $object->getSoldBy();
            }
            $data['active'] = $object->getActive();
            if ($object->isInitialized('items') && null !== $object->getItems()) {
                $values = [];
                foreach ($object->getItems() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['items'] = $values;
            }
            if ($object->isInitialized('externalLinks') && null !== $object->getExternalLinks()) {
                $values_1 = [];
                foreach ($object->getExternalLinks() as $value_1) {
                    $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $data['externalLinks'] = $values_1;
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\EstimatesV2EstimateResponse::class => false];
        }
    }
}
