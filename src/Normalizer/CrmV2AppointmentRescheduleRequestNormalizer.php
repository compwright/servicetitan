<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CrmV2AppointmentRescheduleRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\CrmV2AppointmentRescheduleRequest';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\CrmV2AppointmentRescheduleRequest';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\CrmV2AppointmentRescheduleRequest();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('start', $data)) {
            $object->setStart(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['start']));
        }
        if (\array_key_exists('end', $data)) {
            $object->setEnd(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['end']));
        }
        if (\array_key_exists('arrivalWindowStart', $data) && $data['arrivalWindowStart'] !== null) {
            $object->setArrivalWindowStart(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['arrivalWindowStart']));
        } elseif (\array_key_exists('arrivalWindowStart', $data) && $data['arrivalWindowStart'] === null) {
            $object->setArrivalWindowStart(null);
        }
        if (\array_key_exists('arrivalWindowEnd', $data) && $data['arrivalWindowEnd'] !== null) {
            $object->setArrivalWindowEnd(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['arrivalWindowEnd']));
        } elseif (\array_key_exists('arrivalWindowEnd', $data) && $data['arrivalWindowEnd'] === null) {
            $object->setArrivalWindowEnd(null);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if (null !== $object->getStart()) {
            $data['start'] = $object->getStart()->format('Y-m-d\\TH:i:sP');
        }
        if (null !== $object->getEnd()) {
            $data['end'] = $object->getEnd()->format('Y-m-d\\TH:i:sP');
        }
        if (null !== $object->getArrivalWindowStart()) {
            $data['arrivalWindowStart'] = $object->getArrivalWindowStart()->format('Y-m-d\\TH:i:sP');
        }
        if (null !== $object->getArrivalWindowEnd()) {
            $data['arrivalWindowEnd'] = $object->getArrivalWindowEnd()->format('Y-m-d\\TH:i:sP');
        }

        return $data;
    }
}
