<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class InventoryV2InventoryReturnItemResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\InventoryV2InventoryReturnItemResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\InventoryV2InventoryReturnItemResponse';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\InventoryV2InventoryReturnItemResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
        }
        if (\array_key_exists('skuId', $data)) {
            $object->setSkuId($data['skuId']);
        }
        if (\array_key_exists('name', $data)) {
            $object->setName($data['name']);
        }
        if (\array_key_exists('code', $data)) {
            $object->setCode($data['code']);
        }
        if (\array_key_exists('description', $data)) {
            $object->setDescription($data['description']);
        }
        if (\array_key_exists('quantity', $data)) {
            $object->setQuantity($data['quantity']);
        }
        if (\array_key_exists('cost', $data)) {
            $object->setCost($data['cost']);
        }
        if (\array_key_exists('generalLedgerAccount', $data) && $data['generalLedgerAccount'] !== null) {
            $object->setGeneralLedgerAccount($data['generalLedgerAccount']);
        } elseif (\array_key_exists('generalLedgerAccount', $data) && $data['generalLedgerAccount'] === null) {
            $object->setGeneralLedgerAccount(null);
        }
        if (\array_key_exists('costOfSaleAccount', $data) && $data['costOfSaleAccount'] !== null) {
            $object->setCostOfSaleAccount($data['costOfSaleAccount']);
        } elseif (\array_key_exists('costOfSaleAccount', $data) && $data['costOfSaleAccount'] === null) {
            $object->setCostOfSaleAccount(null);
        }
        if (\array_key_exists('assetAccount', $data) && $data['assetAccount'] !== null) {
            $object->setAssetAccount($data['assetAccount']);
        } elseif (\array_key_exists('assetAccount', $data) && $data['assetAccount'] === null) {
            $object->setAssetAccount(null);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['id'] = $object->getId();
        $data['skuId'] = $object->getSkuId();
        $data['name'] = $object->getName();
        $data['code'] = $object->getCode();
        $data['description'] = $object->getDescription();
        $data['quantity'] = $object->getQuantity();
        $data['cost'] = $object->getCost();
        if (null !== $object->getGeneralLedgerAccount()) {
            $data['generalLedgerAccount'] = $object->getGeneralLedgerAccount();
        }
        if (null !== $object->getCostOfSaleAccount()) {
            $data['costOfSaleAccount'] = $object->getCostOfSaleAccount();
        }
        if (null !== $object->getAssetAccount()) {
            $data['assetAccount'] = $object->getAssetAccount();
        }

        return $data;
    }
}
