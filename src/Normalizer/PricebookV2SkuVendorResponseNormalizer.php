<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class PricebookV2SkuVendorResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse();
            if (\array_key_exists('cost', $data) && \is_int($data['cost'])) {
                $data['cost'] = (float) $data['cost'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('vendorName', $data)) {
                $object->setVendorName($data['vendorName']);
            }
            if (\array_key_exists('vendorId', $data)) {
                $object->setVendorId($data['vendorId']);
            }
            if (\array_key_exists('memo', $data) && $data['memo'] !== null) {
                $object->setMemo($data['memo']);
            } elseif (\array_key_exists('memo', $data) && $data['memo'] === null) {
                $object->setMemo(null);
            }
            if (\array_key_exists('vendorPart', $data) && $data['vendorPart'] !== null) {
                $object->setVendorPart($data['vendorPart']);
            } elseif (\array_key_exists('vendorPart', $data) && $data['vendorPart'] === null) {
                $object->setVendorPart(null);
            }
            if (\array_key_exists('cost', $data)) {
                $object->setCost($data['cost']);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('primarySubAccount', $data) && $data['primarySubAccount'] !== null) {
                $object->setPrimarySubAccount($data['primarySubAccount']);
            } elseif (\array_key_exists('primarySubAccount', $data) && $data['primarySubAccount'] === null) {
                $object->setPrimarySubAccount(null);
            }
            if (\array_key_exists('otherSubAccounts', $data) && $data['otherSubAccounts'] !== null) {
                $values = [];
                foreach ($data['otherSubAccounts'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\PricebookV2SkuVendorSubAccountResponse::class, 'json', $context);
                }
                $object->setOtherSubAccounts($values);
            } elseif (\array_key_exists('otherSubAccounts', $data) && $data['otherSubAccounts'] === null) {
                $object->setOtherSubAccounts(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['vendorName'] = $object->getVendorName();
            $data['vendorId'] = $object->getVendorId();
            if ($object->isInitialized('memo') && null !== $object->getMemo()) {
                $data['memo'] = $object->getMemo();
            }
            if ($object->isInitialized('vendorPart') && null !== $object->getVendorPart()) {
                $data['vendorPart'] = $object->getVendorPart();
            }
            $data['cost'] = $object->getCost();
            $data['active'] = $object->getActive();
            if ($object->isInitialized('primarySubAccount') && null !== $object->getPrimarySubAccount()) {
                $data['primarySubAccount'] = $object->getPrimarySubAccount();
            }
            if ($object->isInitialized('otherSubAccounts') && null !== $object->getOtherSubAccounts()) {
                $values = [];
                foreach ($object->getOtherSubAccounts() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['otherSubAccounts'] = $values;
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse::class => false];
        }
    }
} else {
    class PricebookV2SkuVendorResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse();
            if (\array_key_exists('cost', $data) && \is_int($data['cost'])) {
                $data['cost'] = (float) $data['cost'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('vendorName', $data)) {
                $object->setVendorName($data['vendorName']);
            }
            if (\array_key_exists('vendorId', $data)) {
                $object->setVendorId($data['vendorId']);
            }
            if (\array_key_exists('memo', $data) && $data['memo'] !== null) {
                $object->setMemo($data['memo']);
            } elseif (\array_key_exists('memo', $data) && $data['memo'] === null) {
                $object->setMemo(null);
            }
            if (\array_key_exists('vendorPart', $data) && $data['vendorPart'] !== null) {
                $object->setVendorPart($data['vendorPart']);
            } elseif (\array_key_exists('vendorPart', $data) && $data['vendorPart'] === null) {
                $object->setVendorPart(null);
            }
            if (\array_key_exists('cost', $data)) {
                $object->setCost($data['cost']);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('primarySubAccount', $data) && $data['primarySubAccount'] !== null) {
                $object->setPrimarySubAccount($data['primarySubAccount']);
            } elseif (\array_key_exists('primarySubAccount', $data) && $data['primarySubAccount'] === null) {
                $object->setPrimarySubAccount(null);
            }
            if (\array_key_exists('otherSubAccounts', $data) && $data['otherSubAccounts'] !== null) {
                $values = [];
                foreach ($data['otherSubAccounts'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CompWright\ServiceTitan\Model\PricebookV2SkuVendorSubAccountResponse::class, 'json', $context);
                }
                $object->setOtherSubAccounts($values);
            } elseif (\array_key_exists('otherSubAccounts', $data) && $data['otherSubAccounts'] === null) {
                $object->setOtherSubAccounts(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['vendorName'] = $object->getVendorName();
            $data['vendorId'] = $object->getVendorId();
            if ($object->isInitialized('memo') && null !== $object->getMemo()) {
                $data['memo'] = $object->getMemo();
            }
            if ($object->isInitialized('vendorPart') && null !== $object->getVendorPart()) {
                $data['vendorPart'] = $object->getVendorPart();
            }
            $data['cost'] = $object->getCost();
            $data['active'] = $object->getActive();
            if ($object->isInitialized('primarySubAccount') && null !== $object->getPrimarySubAccount()) {
                $data['primarySubAccount'] = $object->getPrimarySubAccount();
            }
            if ($object->isInitialized('otherSubAccounts') && null !== $object->getOtherSubAccounts()) {
                $values = [];
                foreach ($object->getOtherSubAccounts() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['otherSubAccounts'] = $values;
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse::class => false];
        }
    }
}
