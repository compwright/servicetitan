<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PricebookV2SkuVendorResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\PricebookV2SkuVendorResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\PricebookV2SkuVendorResponse';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\PricebookV2SkuVendorResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
        }
        if (\array_key_exists('vendorName', $data)) {
            $object->setVendorName($data['vendorName']);
        }
        if (\array_key_exists('vendorId', $data)) {
            $object->setVendorId($data['vendorId']);
        }
        if (\array_key_exists('memo', $data) && $data['memo'] !== null) {
            $object->setMemo($data['memo']);
        } elseif (\array_key_exists('memo', $data) && $data['memo'] === null) {
            $object->setMemo(null);
        }
        if (\array_key_exists('vendorPart', $data) && $data['vendorPart'] !== null) {
            $object->setVendorPart($data['vendorPart']);
        } elseif (\array_key_exists('vendorPart', $data) && $data['vendorPart'] === null) {
            $object->setVendorPart(null);
        }
        if (\array_key_exists('cost', $data)) {
            $object->setCost($data['cost']);
        }
        if (\array_key_exists('active', $data)) {
            $object->setActive($data['active']);
        }
        if (\array_key_exists('primarySubAccount', $data) && $data['primarySubAccount'] !== null) {
            $object->setPrimarySubAccount($data['primarySubAccount']);
        } elseif (\array_key_exists('primarySubAccount', $data) && $data['primarySubAccount'] === null) {
            $object->setPrimarySubAccount(null);
        }
        if (\array_key_exists('otherSubAccounts', $data) && $data['otherSubAccounts'] !== null) {
            $values = [];
            foreach ($data['otherSubAccounts'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'CompWright\\ServiceTitan\\Model\\PricebookV2SkuVendorSubAccountResponse', 'json', $context);
            }
            $object->setOtherSubAccounts($values);
        } elseif (\array_key_exists('otherSubAccounts', $data) && $data['otherSubAccounts'] === null) {
            $object->setOtherSubAccounts(null);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['id'] = $object->getId();
        $data['vendorName'] = $object->getVendorName();
        $data['vendorId'] = $object->getVendorId();
        if (null !== $object->getMemo()) {
            $data['memo'] = $object->getMemo();
        }
        if (null !== $object->getVendorPart()) {
            $data['vendorPart'] = $object->getVendorPart();
        }
        $data['cost'] = $object->getCost();
        $data['active'] = $object->getActive();
        if (null !== $object->getPrimarySubAccount()) {
            $data['primarySubAccount'] = $object->getPrimarySubAccount();
        }
        if (null !== $object->getOtherSubAccounts()) {
            $values = [];
            foreach ($object->getOtherSubAccounts() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['otherSubAccounts'] = $values;
        }

        return $data;
    }
}
