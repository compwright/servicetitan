<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CrmV2AppointmentResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\CrmV2AppointmentResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\CrmV2AppointmentResponse::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\CrmV2AppointmentResponse();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('jobId', $data)) {
                $object->setJobId($data['jobId']);
            }
            if (\array_key_exists('appointmentNumber', $data) && $data['appointmentNumber'] !== null) {
                $object->setAppointmentNumber($data['appointmentNumber']);
            } elseif (\array_key_exists('appointmentNumber', $data) && $data['appointmentNumber'] === null) {
                $object->setAppointmentNumber(null);
            }
            if (\array_key_exists('start', $data)) {
                $object->setStart(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['start']));
            }
            if (\array_key_exists('end', $data)) {
                $object->setEnd(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['end']));
            }
            if (\array_key_exists('arrivalWindowStart', $data) && $data['arrivalWindowStart'] !== null) {
                $object->setArrivalWindowStart(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['arrivalWindowStart']));
            } elseif (\array_key_exists('arrivalWindowStart', $data) && $data['arrivalWindowStart'] === null) {
                $object->setArrivalWindowStart(null);
            }
            if (\array_key_exists('arrivalWindowEnd', $data) && $data['arrivalWindowEnd'] !== null) {
                $object->setArrivalWindowEnd(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['arrivalWindowEnd']));
            } elseif (\array_key_exists('arrivalWindowEnd', $data) && $data['arrivalWindowEnd'] === null) {
                $object->setArrivalWindowEnd(null);
            }
            if (\array_key_exists('status', $data)) {
                $object->setStatus($data['status']);
            }
            if (\array_key_exists('specialInstructions', $data) && $data['specialInstructions'] !== null) {
                $object->setSpecialInstructions($data['specialInstructions']);
            } elseif (\array_key_exists('specialInstructions', $data) && $data['specialInstructions'] === null) {
                $object->setSpecialInstructions(null);
            }
            if (\array_key_exists('createdOn', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['createdOn']));
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['jobId'] = $object->getJobId();
            if ($object->isInitialized('appointmentNumber') && null !== $object->getAppointmentNumber()) {
                $data['appointmentNumber'] = $object->getAppointmentNumber();
            }
            $data['start'] = $object->getStart()?->format('Y-m-d\TH:i:sP');
            $data['end'] = $object->getEnd()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('arrivalWindowStart') && null !== $object->getArrivalWindowStart()) {
                $data['arrivalWindowStart'] = $object->getArrivalWindowStart()->format('Y-m-d\TH:i:sP');
            }
            if ($object->isInitialized('arrivalWindowEnd') && null !== $object->getArrivalWindowEnd()) {
                $data['arrivalWindowEnd'] = $object->getArrivalWindowEnd()->format('Y-m-d\TH:i:sP');
            }
            $data['status'] = $object->getStatus();
            if ($object->isInitialized('specialInstructions') && null !== $object->getSpecialInstructions()) {
                $data['specialInstructions'] = $object->getSpecialInstructions();
            }
            $data['createdOn'] = $object->getCreatedOn()?->format('Y-m-d\TH:i:sP');
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\CrmV2AppointmentResponse::class => false];
        }
    }
} else {
    class CrmV2AppointmentResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\CrmV2AppointmentResponse::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\CrmV2AppointmentResponse::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\CrmV2AppointmentResponse();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
            }
            if (\array_key_exists('jobId', $data)) {
                $object->setJobId($data['jobId']);
            }
            if (\array_key_exists('appointmentNumber', $data) && $data['appointmentNumber'] !== null) {
                $object->setAppointmentNumber($data['appointmentNumber']);
            } elseif (\array_key_exists('appointmentNumber', $data) && $data['appointmentNumber'] === null) {
                $object->setAppointmentNumber(null);
            }
            if (\array_key_exists('start', $data)) {
                $object->setStart(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['start']));
            }
            if (\array_key_exists('end', $data)) {
                $object->setEnd(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['end']));
            }
            if (\array_key_exists('arrivalWindowStart', $data) && $data['arrivalWindowStart'] !== null) {
                $object->setArrivalWindowStart(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['arrivalWindowStart']));
            } elseif (\array_key_exists('arrivalWindowStart', $data) && $data['arrivalWindowStart'] === null) {
                $object->setArrivalWindowStart(null);
            }
            if (\array_key_exists('arrivalWindowEnd', $data) && $data['arrivalWindowEnd'] !== null) {
                $object->setArrivalWindowEnd(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['arrivalWindowEnd']));
            } elseif (\array_key_exists('arrivalWindowEnd', $data) && $data['arrivalWindowEnd'] === null) {
                $object->setArrivalWindowEnd(null);
            }
            if (\array_key_exists('status', $data)) {
                $object->setStatus($data['status']);
            }
            if (\array_key_exists('specialInstructions', $data) && $data['specialInstructions'] !== null) {
                $object->setSpecialInstructions($data['specialInstructions']);
            } elseif (\array_key_exists('specialInstructions', $data) && $data['specialInstructions'] === null) {
                $object->setSpecialInstructions(null);
            }
            if (\array_key_exists('createdOn', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['createdOn']));
            }
            if (\array_key_exists('modifiedOn', $data)) {
                $object->setModifiedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['modifiedOn']));
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['id'] = $object->getId();
            $data['jobId'] = $object->getJobId();
            if ($object->isInitialized('appointmentNumber') && null !== $object->getAppointmentNumber()) {
                $data['appointmentNumber'] = $object->getAppointmentNumber();
            }
            $data['start'] = $object->getStart()?->format('Y-m-d\TH:i:sP');
            $data['end'] = $object->getEnd()?->format('Y-m-d\TH:i:sP');
            if ($object->isInitialized('arrivalWindowStart') && null !== $object->getArrivalWindowStart()) {
                $data['arrivalWindowStart'] = $object->getArrivalWindowStart()->format('Y-m-d\TH:i:sP');
            }
            if ($object->isInitialized('arrivalWindowEnd') && null !== $object->getArrivalWindowEnd()) {
                $data['arrivalWindowEnd'] = $object->getArrivalWindowEnd()->format('Y-m-d\TH:i:sP');
            }
            $data['status'] = $object->getStatus();
            if ($object->isInitialized('specialInstructions') && null !== $object->getSpecialInstructions()) {
                $data['specialInstructions'] = $object->getSpecialInstructions();
            }
            $data['createdOn'] = $object->getCreatedOn()?->format('Y-m-d\TH:i:sP');
            $data['modifiedOn'] = $object->getModifiedOn()?->format('Y-m-d\TH:i:sP');

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\CrmV2AppointmentResponse::class => false];
        }
    }
}
