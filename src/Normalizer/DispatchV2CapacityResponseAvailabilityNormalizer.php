<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class DispatchV2CapacityResponseAvailabilityNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\DispatchV2CapacityResponseAvailability';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\DispatchV2CapacityResponseAvailability';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\DispatchV2CapacityResponseAvailability();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('start', $data)) {
            $object->setStart(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['start']));
        }
        if (\array_key_exists('end', $data)) {
            $object->setEnd(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['end']));
        }
        if (\array_key_exists('businessUnitIds', $data)) {
            $values = [];
            foreach ($data['businessUnitIds'] as $value) {
                $values[] = $value;
            }
            $object->setBusinessUnitIds($values);
        }
        if (\array_key_exists('totalAvailability', $data)) {
            $object->setTotalAvailability($data['totalAvailability']);
        }
        if (\array_key_exists('openAvailability', $data)) {
            $object->setOpenAvailability($data['openAvailability']);
        }
        if (\array_key_exists('technicians', $data)) {
            $values_1 = [];
            foreach ($data['technicians'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, 'CompWright\\ServiceTitan\\Model\\DispatchV2CapacityResponseTechnician', 'json', $context);
            }
            $object->setTechnicians($values_1);
        }
        if (\array_key_exists('isExceedingIdealBookingPercentage', $data)) {
            $object->setIsExceedingIdealBookingPercentage($data['isExceedingIdealBookingPercentage']);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['start'] = $object->getStart()->format('Y-m-d\\TH:i:sP');
        $data['end'] = $object->getEnd()->format('Y-m-d\\TH:i:sP');
        $values = [];
        foreach ($object->getBusinessUnitIds() as $value) {
            $values[] = $value;
        }
        $data['businessUnitIds'] = $values;
        $data['totalAvailability'] = $object->getTotalAvailability();
        $data['openAvailability'] = $object->getOpenAvailability();
        $values_1 = [];
        foreach ($object->getTechnicians() as $value_1) {
            $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
        }
        $data['technicians'] = $values_1;
        $data['isExceedingIdealBookingPercentage'] = $object->getIsExceedingIdealBookingPercentage();

        return $data;
    }
}
