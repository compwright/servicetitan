<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ModuleTelecomSharedBundleCallModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\ModuleTelecomSharedBundleCallModel';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\ModuleTelecomSharedBundleCallModel';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\ModuleTelecomSharedBundleCallModel();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
        }
        if (\array_key_exists('jobNumber', $data)) {
            $object->setJobNumber($data['jobNumber']);
        }
        if (\array_key_exists('projectId', $data)) {
            $object->setProjectId($data['projectId']);
        }
        if (\array_key_exists('businessUnit', $data)) {
            $object->setBusinessUnit($this->denormalizer->denormalize($data['businessUnit'], 'CompWright\\ServiceTitan\\Model\\ModuleAdminSharedBusinessUnitModel', 'json', $context));
        }
        if (\array_key_exists('type', $data)) {
            $object->setType($this->denormalizer->denormalize($data['type'], 'CompWright\\ServiceTitan\\Model\\JobTypeModel', 'json', $context));
        }
        if (\array_key_exists('leadCall', $data)) {
            $object->setLeadCall($this->denormalizer->denormalize($data['leadCall'], 'CompWright\\ServiceTitan\\Model\\ModuleTelecomSharedCallModel', 'json', $context));
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['id'] = $object->getId();
        $data['jobNumber'] = $object->getJobNumber();
        $data['projectId'] = $object->getProjectId();
        $data['businessUnit'] = $this->normalizer->normalize($object->getBusinessUnit(), 'json', $context);
        $data['type'] = $this->normalizer->normalize($object->getType(), 'json', $context);
        $data['leadCall'] = $this->normalizer->normalize($object->getLeadCall(), 'json', $context);

        return $data;
    }
}
