<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CrmV2AppointmentAssignmentResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    /**
     * @return bool
     */
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CompWright\\ServiceTitan\\Model\\CrmV2AppointmentAssignmentResponse';
    }

    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'CompWright\\ServiceTitan\\Model\\CrmV2AppointmentAssignmentResponse';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \CompWright\ServiceTitan\Model\CrmV2AppointmentAssignmentResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
        }
        if (\array_key_exists('technicianId', $data)) {
            $object->setTechnicianId($data['technicianId']);
        }
        if (\array_key_exists('technicianName', $data)) {
            $object->setTechnicianName($data['technicianName']);
        }
        if (\array_key_exists('assignedById', $data)) {
            $object->setAssignedById($data['assignedById']);
        }
        if (\array_key_exists('assignedOn', $data)) {
            $object->setAssignedOn(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['assignedOn']));
        }
        if (\array_key_exists('status', $data)) {
            $object->setStatus($data['status']);
        }
        if (\array_key_exists('isPaused', $data)) {
            $object->setIsPaused($data['isPaused']);
        }
        if (\array_key_exists('jobId', $data)) {
            $object->setJobId($data['jobId']);
        }
        if (\array_key_exists('appointmentId', $data)) {
            $object->setAppointmentId($data['appointmentId']);
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        $data['id'] = $object->getId();
        $data['technicianId'] = $object->getTechnicianId();
        $data['technicianName'] = $object->getTechnicianName();
        $data['assignedById'] = $object->getAssignedById();
        $data['assignedOn'] = $object->getAssignedOn()->format('Y-m-d\\TH:i:sP');
        $data['status'] = $object->getStatus();
        $data['isPaused'] = $object->getIsPaused();
        $data['jobId'] = $object->getJobId();
        $data['appointmentId'] = $object->getAppointmentId();

        return $data;
    }
}
