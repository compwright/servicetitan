<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Normalizer;

use CompWright\ServiceTitan\Runtime\Normalizer\CheckArray;
use CompWright\ServiceTitan\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class MembershipsV2LocationRecurringServiceUpdateRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\MembershipsV2LocationRecurringServiceUpdateRequest::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\MembershipsV2LocationRecurringServiceUpdateRequest::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\MembershipsV2LocationRecurringServiceUpdateRequest();
            if (\array_key_exists('estimatedPayrollCost', $data) && \is_int($data['estimatedPayrollCost'])) {
                $data['estimatedPayrollCost'] = (float) $data['estimatedPayrollCost'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('recurringServiceTypeId', $data)) {
                $object->setRecurringServiceTypeId($data['recurringServiceTypeId']);
            }
            if (\array_key_exists('durationType', $data)) {
                $object->setDurationType($data['durationType']);
            }
            if (\array_key_exists('durationLength', $data)) {
                $object->setDurationLength($data['durationLength']);
            }
            if (\array_key_exists('from', $data)) {
                $object->setFrom(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['from']));
            }
            if (\array_key_exists('memo', $data)) {
                $object->setMemo($data['memo']);
            }
            if (\array_key_exists('invoiceTemplateId', $data) && $data['invoiceTemplateId'] !== null) {
                $object->setInvoiceTemplateId($data['invoiceTemplateId']);
            } elseif (\array_key_exists('invoiceTemplateId', $data) && $data['invoiceTemplateId'] === null) {
                $object->setInvoiceTemplateId(null);
            }
            if (\array_key_exists('invoiceTemplateForFollowingYearsId', $data) && $data['invoiceTemplateForFollowingYearsId'] !== null) {
                $object->setInvoiceTemplateForFollowingYearsId($data['invoiceTemplateForFollowingYearsId']);
            } elseif (\array_key_exists('invoiceTemplateForFollowingYearsId', $data) && $data['invoiceTemplateForFollowingYearsId'] === null) {
                $object->setInvoiceTemplateForFollowingYearsId(null);
            }
            if (\array_key_exists('businessUnitId', $data)) {
                $object->setBusinessUnitId($data['businessUnitId']);
            }
            if (\array_key_exists('jobTypeId', $data)) {
                $object->setJobTypeId($data['jobTypeId']);
            }
            if (\array_key_exists('campaignId', $data)) {
                $object->setCampaignId($data['campaignId']);
            }
            if (\array_key_exists('priority', $data)) {
                $object->setPriority($data['priority']);
            }
            if (\array_key_exists('jobSummary', $data)) {
                $object->setJobSummary($data['jobSummary']);
            }
            if (\array_key_exists('recurrenceType', $data)) {
                $object->setRecurrenceType($data['recurrenceType']);
            }
            if (\array_key_exists('recurrenceInterval', $data)) {
                $object->setRecurrenceInterval($data['recurrenceInterval']);
            }
            if (\array_key_exists('recurrenceMonths', $data)) {
                $values = [];
                foreach ($data['recurrenceMonths'] as $value) {
                    $values[] = $value;
                }
                $object->setRecurrenceMonths($values);
            }
            if (\array_key_exists('recurrenceDaysOfWeek', $data)) {
                $values_1 = [];
                foreach ($data['recurrenceDaysOfWeek'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setRecurrenceDaysOfWeek($values_1);
            }
            if (\array_key_exists('recurrenceWeek', $data)) {
                $object->setRecurrenceWeek($data['recurrenceWeek']);
            }
            if (\array_key_exists('recurrenceDayOfNthWeek', $data) && $data['recurrenceDayOfNthWeek'] !== null) {
                $object->setRecurrenceDayOfNthWeek($data['recurrenceDayOfNthWeek']);
            } elseif (\array_key_exists('recurrenceDayOfNthWeek', $data) && $data['recurrenceDayOfNthWeek'] === null) {
                $object->setRecurrenceDayOfNthWeek(null);
            }
            if (\array_key_exists('jobStartTime', $data) && $data['jobStartTime'] !== null) {
                $object->setJobStartTime($data['jobStartTime']);
            } elseif (\array_key_exists('jobStartTime', $data) && $data['jobStartTime'] === null) {
                $object->setJobStartTime(null);
            }
            if (\array_key_exists('estimatedPayrollCost', $data) && $data['estimatedPayrollCost'] !== null) {
                $object->setEstimatedPayrollCost($data['estimatedPayrollCost']);
            } elseif (\array_key_exists('estimatedPayrollCost', $data) && $data['estimatedPayrollCost'] === null) {
                $object->setEstimatedPayrollCost(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('active') && null !== $object->getActive()) {
                $data['active'] = $object->getActive();
            }
            if ($object->isInitialized('recurringServiceTypeId') && null !== $object->getRecurringServiceTypeId()) {
                $data['recurringServiceTypeId'] = $object->getRecurringServiceTypeId();
            }
            if ($object->isInitialized('durationType') && null !== $object->getDurationType()) {
                $data['durationType'] = $object->getDurationType();
            }
            if ($object->isInitialized('durationLength') && null !== $object->getDurationLength()) {
                $data['durationLength'] = $object->getDurationLength();
            }
            if ($object->isInitialized('from') && null !== $object->getFrom()) {
                $data['from'] = $object->getFrom()?->format('Y-m-d\TH:i:sP');
            }
            if ($object->isInitialized('memo') && null !== $object->getMemo()) {
                $data['memo'] = $object->getMemo();
            }
            if ($object->isInitialized('invoiceTemplateId') && null !== $object->getInvoiceTemplateId()) {
                $data['invoiceTemplateId'] = $object->getInvoiceTemplateId();
            }
            if ($object->isInitialized('invoiceTemplateForFollowingYearsId') && null !== $object->getInvoiceTemplateForFollowingYearsId()) {
                $data['invoiceTemplateForFollowingYearsId'] = $object->getInvoiceTemplateForFollowingYearsId();
            }
            if ($object->isInitialized('businessUnitId') && null !== $object->getBusinessUnitId()) {
                $data['businessUnitId'] = $object->getBusinessUnitId();
            }
            if ($object->isInitialized('jobTypeId') && null !== $object->getJobTypeId()) {
                $data['jobTypeId'] = $object->getJobTypeId();
            }
            if ($object->isInitialized('campaignId') && null !== $object->getCampaignId()) {
                $data['campaignId'] = $object->getCampaignId();
            }
            if ($object->isInitialized('priority') && null !== $object->getPriority()) {
                $data['priority'] = $object->getPriority();
            }
            if ($object->isInitialized('jobSummary') && null !== $object->getJobSummary()) {
                $data['jobSummary'] = $object->getJobSummary();
            }
            if ($object->isInitialized('recurrenceType') && null !== $object->getRecurrenceType()) {
                $data['recurrenceType'] = $object->getRecurrenceType();
            }
            if ($object->isInitialized('recurrenceInterval') && null !== $object->getRecurrenceInterval()) {
                $data['recurrenceInterval'] = $object->getRecurrenceInterval();
            }
            if ($object->isInitialized('recurrenceMonths') && null !== $object->getRecurrenceMonths()) {
                $values = [];
                foreach ($object->getRecurrenceMonths() as $value) {
                    $values[] = $value;
                }
                $data['recurrenceMonths'] = $values;
            }
            if ($object->isInitialized('recurrenceDaysOfWeek') && null !== $object->getRecurrenceDaysOfWeek()) {
                $values_1 = [];
                foreach ($object->getRecurrenceDaysOfWeek() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['recurrenceDaysOfWeek'] = $values_1;
            }
            if ($object->isInitialized('recurrenceWeek') && null !== $object->getRecurrenceWeek()) {
                $data['recurrenceWeek'] = $object->getRecurrenceWeek();
            }
            if ($object->isInitialized('recurrenceDayOfNthWeek') && null !== $object->getRecurrenceDayOfNthWeek()) {
                $data['recurrenceDayOfNthWeek'] = $object->getRecurrenceDayOfNthWeek();
            }
            if ($object->isInitialized('jobStartTime') && null !== $object->getJobStartTime()) {
                $data['jobStartTime'] = $object->getJobStartTime();
            }
            if ($object->isInitialized('estimatedPayrollCost') && null !== $object->getEstimatedPayrollCost()) {
                $data['estimatedPayrollCost'] = $object->getEstimatedPayrollCost();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\MembershipsV2LocationRecurringServiceUpdateRequest::class => false];
        }
    }
} else {
    class MembershipsV2LocationRecurringServiceUpdateRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \CompWright\ServiceTitan\Model\MembershipsV2LocationRecurringServiceUpdateRequest::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \CompWright\ServiceTitan\Model\MembershipsV2LocationRecurringServiceUpdateRequest::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CompWright\ServiceTitan\Model\MembershipsV2LocationRecurringServiceUpdateRequest();
            if (\array_key_exists('estimatedPayrollCost', $data) && \is_int($data['estimatedPayrollCost'])) {
                $data['estimatedPayrollCost'] = (float) $data['estimatedPayrollCost'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
            }
            if (\array_key_exists('active', $data)) {
                $object->setActive($data['active']);
            }
            if (\array_key_exists('recurringServiceTypeId', $data)) {
                $object->setRecurringServiceTypeId($data['recurringServiceTypeId']);
            }
            if (\array_key_exists('durationType', $data)) {
                $object->setDurationType($data['durationType']);
            }
            if (\array_key_exists('durationLength', $data)) {
                $object->setDurationLength($data['durationLength']);
            }
            if (\array_key_exists('from', $data)) {
                $object->setFrom(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['from']));
            }
            if (\array_key_exists('memo', $data)) {
                $object->setMemo($data['memo']);
            }
            if (\array_key_exists('invoiceTemplateId', $data) && $data['invoiceTemplateId'] !== null) {
                $object->setInvoiceTemplateId($data['invoiceTemplateId']);
            } elseif (\array_key_exists('invoiceTemplateId', $data) && $data['invoiceTemplateId'] === null) {
                $object->setInvoiceTemplateId(null);
            }
            if (\array_key_exists('invoiceTemplateForFollowingYearsId', $data) && $data['invoiceTemplateForFollowingYearsId'] !== null) {
                $object->setInvoiceTemplateForFollowingYearsId($data['invoiceTemplateForFollowingYearsId']);
            } elseif (\array_key_exists('invoiceTemplateForFollowingYearsId', $data) && $data['invoiceTemplateForFollowingYearsId'] === null) {
                $object->setInvoiceTemplateForFollowingYearsId(null);
            }
            if (\array_key_exists('businessUnitId', $data)) {
                $object->setBusinessUnitId($data['businessUnitId']);
            }
            if (\array_key_exists('jobTypeId', $data)) {
                $object->setJobTypeId($data['jobTypeId']);
            }
            if (\array_key_exists('campaignId', $data)) {
                $object->setCampaignId($data['campaignId']);
            }
            if (\array_key_exists('priority', $data)) {
                $object->setPriority($data['priority']);
            }
            if (\array_key_exists('jobSummary', $data)) {
                $object->setJobSummary($data['jobSummary']);
            }
            if (\array_key_exists('recurrenceType', $data)) {
                $object->setRecurrenceType($data['recurrenceType']);
            }
            if (\array_key_exists('recurrenceInterval', $data)) {
                $object->setRecurrenceInterval($data['recurrenceInterval']);
            }
            if (\array_key_exists('recurrenceMonths', $data)) {
                $values = [];
                foreach ($data['recurrenceMonths'] as $value) {
                    $values[] = $value;
                }
                $object->setRecurrenceMonths($values);
            }
            if (\array_key_exists('recurrenceDaysOfWeek', $data)) {
                $values_1 = [];
                foreach ($data['recurrenceDaysOfWeek'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setRecurrenceDaysOfWeek($values_1);
            }
            if (\array_key_exists('recurrenceWeek', $data)) {
                $object->setRecurrenceWeek($data['recurrenceWeek']);
            }
            if (\array_key_exists('recurrenceDayOfNthWeek', $data) && $data['recurrenceDayOfNthWeek'] !== null) {
                $object->setRecurrenceDayOfNthWeek($data['recurrenceDayOfNthWeek']);
            } elseif (\array_key_exists('recurrenceDayOfNthWeek', $data) && $data['recurrenceDayOfNthWeek'] === null) {
                $object->setRecurrenceDayOfNthWeek(null);
            }
            if (\array_key_exists('jobStartTime', $data) && $data['jobStartTime'] !== null) {
                $object->setJobStartTime($data['jobStartTime']);
            } elseif (\array_key_exists('jobStartTime', $data) && $data['jobStartTime'] === null) {
                $object->setJobStartTime(null);
            }
            if (\array_key_exists('estimatedPayrollCost', $data) && $data['estimatedPayrollCost'] !== null) {
                $object->setEstimatedPayrollCost($data['estimatedPayrollCost']);
            } elseif (\array_key_exists('estimatedPayrollCost', $data) && $data['estimatedPayrollCost'] === null) {
                $object->setEstimatedPayrollCost(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('active') && null !== $object->getActive()) {
                $data['active'] = $object->getActive();
            }
            if ($object->isInitialized('recurringServiceTypeId') && null !== $object->getRecurringServiceTypeId()) {
                $data['recurringServiceTypeId'] = $object->getRecurringServiceTypeId();
            }
            if ($object->isInitialized('durationType') && null !== $object->getDurationType()) {
                $data['durationType'] = $object->getDurationType();
            }
            if ($object->isInitialized('durationLength') && null !== $object->getDurationLength()) {
                $data['durationLength'] = $object->getDurationLength();
            }
            if ($object->isInitialized('from') && null !== $object->getFrom()) {
                $data['from'] = $object->getFrom()?->format('Y-m-d\TH:i:sP');
            }
            if ($object->isInitialized('memo') && null !== $object->getMemo()) {
                $data['memo'] = $object->getMemo();
            }
            if ($object->isInitialized('invoiceTemplateId') && null !== $object->getInvoiceTemplateId()) {
                $data['invoiceTemplateId'] = $object->getInvoiceTemplateId();
            }
            if ($object->isInitialized('invoiceTemplateForFollowingYearsId') && null !== $object->getInvoiceTemplateForFollowingYearsId()) {
                $data['invoiceTemplateForFollowingYearsId'] = $object->getInvoiceTemplateForFollowingYearsId();
            }
            if ($object->isInitialized('businessUnitId') && null !== $object->getBusinessUnitId()) {
                $data['businessUnitId'] = $object->getBusinessUnitId();
            }
            if ($object->isInitialized('jobTypeId') && null !== $object->getJobTypeId()) {
                $data['jobTypeId'] = $object->getJobTypeId();
            }
            if ($object->isInitialized('campaignId') && null !== $object->getCampaignId()) {
                $data['campaignId'] = $object->getCampaignId();
            }
            if ($object->isInitialized('priority') && null !== $object->getPriority()) {
                $data['priority'] = $object->getPriority();
            }
            if ($object->isInitialized('jobSummary') && null !== $object->getJobSummary()) {
                $data['jobSummary'] = $object->getJobSummary();
            }
            if ($object->isInitialized('recurrenceType') && null !== $object->getRecurrenceType()) {
                $data['recurrenceType'] = $object->getRecurrenceType();
            }
            if ($object->isInitialized('recurrenceInterval') && null !== $object->getRecurrenceInterval()) {
                $data['recurrenceInterval'] = $object->getRecurrenceInterval();
            }
            if ($object->isInitialized('recurrenceMonths') && null !== $object->getRecurrenceMonths()) {
                $values = [];
                foreach ($object->getRecurrenceMonths() as $value) {
                    $values[] = $value;
                }
                $data['recurrenceMonths'] = $values;
            }
            if ($object->isInitialized('recurrenceDaysOfWeek') && null !== $object->getRecurrenceDaysOfWeek()) {
                $values_1 = [];
                foreach ($object->getRecurrenceDaysOfWeek() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['recurrenceDaysOfWeek'] = $values_1;
            }
            if ($object->isInitialized('recurrenceWeek') && null !== $object->getRecurrenceWeek()) {
                $data['recurrenceWeek'] = $object->getRecurrenceWeek();
            }
            if ($object->isInitialized('recurrenceDayOfNthWeek') && null !== $object->getRecurrenceDayOfNthWeek()) {
                $data['recurrenceDayOfNthWeek'] = $object->getRecurrenceDayOfNthWeek();
            }
            if ($object->isInitialized('jobStartTime') && null !== $object->getJobStartTime()) {
                $data['jobStartTime'] = $object->getJobStartTime();
            }
            if ($object->isInitialized('estimatedPayrollCost') && null !== $object->getEstimatedPayrollCost()) {
                $data['estimatedPayrollCost'] = $object->getEstimatedPayrollCost();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CompWright\ServiceTitan\Model\MembershipsV2LocationRecurringServiceUpdateRequest::class => false];
        }
    }
}
