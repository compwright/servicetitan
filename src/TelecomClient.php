<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan;

class TelecomClient extends \CompWright\ServiceTitan\Runtime\Client\Client
{
    /**
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \CompWright\ServiceTitan\Model\ModuleTelecomSharedDetailedBundleCallModel|\Psr\Http\Message\ResponseInterface|null
     */
    public function callsGetDetails(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CallsGetDetails($id, $tenant), $fetch);
    }

    /**
     * @param int                                                                        $id          format - int64
     * @param int                                                                        $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\ModuleTelecomSharedCallInUpdateModelV2|null $requestBody
     * @param string                                                                     $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \CompWright\ServiceTitan\Model\ModuleTelecomSharedDetailedCallModel|\Psr\Http\Message\ResponseInterface|null
     */
    public function callsUpdate(int $id, int $tenant, ?Model\ModuleTelecomSharedCallInUpdateModelV2 $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CallsUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var string $modifiedAfter format - date-time (as date-time in RFC3339)
     *     @var int $minDuration format - int32
     *     @var string $phoneNumberCalled
     *     @var int $campaignId format - int64
     *     @var int $agentId format - int64
     *     @var string $agentName
     *     @var bool $agentIsExternal
     *     @var int $agentExternalId format - int64
     *     @var string $orderBy
     *     @var string $orderByDirection
     *     @var bool $activeOnly
     *     @var string $createdAfter format - date-time (as date-time in RFC3339)
     *     @var string $createdBefore format - date-time (as date-time in RFC3339)
     *     @var array $ids
     *     @var int $page format - int32
     *     @var int $pageSize Format - int32.
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \CompWright\ServiceTitan\Model\CollectionResultOfModuleTelecomSharedBundleCallModel|\Psr\Http\Message\ResponseInterface|null
     */
    public function callsGetCalls(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CallsGetCalls($tenant, $queryParameters), $fetch);
    }

    /**
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function callsGetRecording(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CallsGetRecording($id, $tenant), $fetch);
    }

    /**
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function callsGetVoiceMail(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CallsGetVoiceMail($id, $tenant), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUrlFactory()->createUri('https://api-integration.servicetitan.io');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new \CompWright\ServiceTitan\Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
