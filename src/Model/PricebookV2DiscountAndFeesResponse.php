<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class PricebookV2DiscountAndFeesResponse
{
    /**
     * Unique id for the discount or fee.
     *
     * @var int
     */
    protected $id;
    /**
     * Type should be entered as Discount or Fee to show the type.
     *
     * @var mixed
     */
    protected $type;
    /**
     * Code used for the discount or fee.
     *
     * @var string
     */
    protected $code;
    /**
     * Name for the discount of fee.
     *
     * @var string|null
     */
    protected $displayName;
    /**
     * Description for the item.
     *
     * @var string
     */
    protected $description;
    /**
     * The amount type takes either "percentage" or "flat " and apply the "amount" field accordingly.
     *
     * @var mixed
     */
    protected $amountType;
    /**
     * Amount is either the flat amount or percentage you want discounted/added.
     *
     * @var float
     */
    protected $amount;
    /**
     * The maximum amount that can be applied for this item.
     *
     * @var float
     */
    protected $limit;
    /**
     * Should tax be applied when the item is added on an estimate or invoice.
     *
     * @var bool
     */
    protected $taxable;
    /**
     * The category technicians will use to find the item.
     *
     * @var int[]|null
     */
    protected $categories;
    /**
     * The number of hours associated with the SKU.
     *
     * @var float
     */
    protected $hours;
    /**
     * Images, videos or PDFs attached to SKU.
     *
     * @var PricebookV2SkuAssetResponse[]|null
     */
    protected $assets;
    /**
     * The accounting account assigned to the SKU.
     *
     * @var string|null
     */
    protected $account;
    /**
     * A grouping of similar items that you'll then be able to track as a separate columns on the Technical Performance Board.
     *
     * @var string|null
     */
    protected $crossSaleGroup;
    /**
     * Active shows if this item is currently active.
     *
     * @var bool
     */
    protected $active;
    /**
     * Bonus.
     *
     * @var float
     */
    protected $bonus;
    /**
     * Flat rate bonus paid for this item.
     *
     * @var float
     */
    protected $commissionBonus;
    /**
     * PaysCommissions shows if this task pays commission.
     *
     * @var bool
     */
    protected $paysCommission;
    /**
     * Exclude from payroll.
     *
     * @var bool
     */
    protected $excludeFromPayroll;
    /**
     * List of external data attached to this job,.
     *
     * @var PricebookV2ExternalDataModel[]|null
     */
    protected $externalData;

    /**
     * Unique id for the discount or fee.
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Unique id for the discount or fee.
     */
    public function setId(int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Type should be entered as Discount or Fee to show the type.
     *
     * @return mixed
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Type should be entered as Discount or Fee to show the type.
     *
     * @param mixed $type
     */
    public function setType($type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Code used for the discount or fee.
     */
    public function getCode(): string
    {
        return $this->code;
    }

    /**
     * Code used for the discount or fee.
     */
    public function setCode(string $code): self
    {
        $this->code = $code;

        return $this;
    }

    /**
     * Name for the discount of fee.
     */
    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    /**
     * Name for the discount of fee.
     */
    public function setDisplayName(?string $displayName): self
    {
        $this->displayName = $displayName;

        return $this;
    }

    /**
     * Description for the item.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Description for the item.
     */
    public function setDescription(string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * The amount type takes either "percentage" or "flat " and apply the "amount" field accordingly.
     *
     * @return mixed
     */
    public function getAmountType()
    {
        return $this->amountType;
    }

    /**
     * The amount type takes either "percentage" or "flat " and apply the "amount" field accordingly.
     *
     * @param mixed $amountType
     */
    public function setAmountType($amountType): self
    {
        $this->amountType = $amountType;

        return $this;
    }

    /**
     * Amount is either the flat amount or percentage you want discounted/added.
     */
    public function getAmount(): float
    {
        return $this->amount;
    }

    /**
     * Amount is either the flat amount or percentage you want discounted/added.
     */
    public function setAmount(float $amount): self
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * The maximum amount that can be applied for this item.
     */
    public function getLimit(): float
    {
        return $this->limit;
    }

    /**
     * The maximum amount that can be applied for this item.
     */
    public function setLimit(float $limit): self
    {
        $this->limit = $limit;

        return $this;
    }

    /**
     * Should tax be applied when the item is added on an estimate or invoice.
     */
    public function getTaxable(): bool
    {
        return $this->taxable;
    }

    /**
     * Should tax be applied when the item is added on an estimate or invoice.
     */
    public function setTaxable(bool $taxable): self
    {
        $this->taxable = $taxable;

        return $this;
    }

    /**
     * The category technicians will use to find the item.
     *
     * @return int[]|null
     */
    public function getCategories(): ?array
    {
        return $this->categories;
    }

    /**
     * The category technicians will use to find the item.
     *
     * @param int[]|null $categories
     */
    public function setCategories(?array $categories): self
    {
        $this->categories = $categories;

        return $this;
    }

    /**
     * The number of hours associated with the SKU.
     */
    public function getHours(): float
    {
        return $this->hours;
    }

    /**
     * The number of hours associated with the SKU.
     */
    public function setHours(float $hours): self
    {
        $this->hours = $hours;

        return $this;
    }

    /**
     * Images, videos or PDFs attached to SKU.
     *
     * @return PricebookV2SkuAssetResponse[]|null
     */
    public function getAssets(): ?array
    {
        return $this->assets;
    }

    /**
     * Images, videos or PDFs attached to SKU.
     *
     * @param PricebookV2SkuAssetResponse[]|null $assets
     */
    public function setAssets(?array $assets): self
    {
        $this->assets = $assets;

        return $this;
    }

    /**
     * The accounting account assigned to the SKU.
     */
    public function getAccount(): ?string
    {
        return $this->account;
    }

    /**
     * The accounting account assigned to the SKU.
     */
    public function setAccount(?string $account): self
    {
        $this->account = $account;

        return $this;
    }

    /**
     * A grouping of similar items that you'll then be able to track as a separate columns on the Technical Performance Board.
     */
    public function getCrossSaleGroup(): ?string
    {
        return $this->crossSaleGroup;
    }

    /**
     * A grouping of similar items that you'll then be able to track as a separate columns on the Technical Performance Board.
     */
    public function setCrossSaleGroup(?string $crossSaleGroup): self
    {
        $this->crossSaleGroup = $crossSaleGroup;

        return $this;
    }

    /**
     * Active shows if this item is currently active.
     */
    public function getActive(): bool
    {
        return $this->active;
    }

    /**
     * Active shows if this item is currently active.
     */
    public function setActive(bool $active): self
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Bonus.
     */
    public function getBonus(): float
    {
        return $this->bonus;
    }

    /**
     * Bonus.
     */
    public function setBonus(float $bonus): self
    {
        $this->bonus = $bonus;

        return $this;
    }

    /**
     * Flat rate bonus paid for this item.
     */
    public function getCommissionBonus(): float
    {
        return $this->commissionBonus;
    }

    /**
     * Flat rate bonus paid for this item.
     */
    public function setCommissionBonus(float $commissionBonus): self
    {
        $this->commissionBonus = $commissionBonus;

        return $this;
    }

    /**
     * PaysCommissions shows if this task pays commission.
     */
    public function getPaysCommission(): bool
    {
        return $this->paysCommission;
    }

    /**
     * PaysCommissions shows if this task pays commission.
     */
    public function setPaysCommission(bool $paysCommission): self
    {
        $this->paysCommission = $paysCommission;

        return $this;
    }

    /**
     * Exclude from payroll.
     */
    public function getExcludeFromPayroll(): bool
    {
        return $this->excludeFromPayroll;
    }

    /**
     * Exclude from payroll.
     */
    public function setExcludeFromPayroll(bool $excludeFromPayroll): self
    {
        $this->excludeFromPayroll = $excludeFromPayroll;

        return $this;
    }

    /**
     * List of external data attached to this job,.
     *
     * @return PricebookV2ExternalDataModel[]|null
     */
    public function getExternalData(): ?array
    {
        return $this->externalData;
    }

    /**
     * List of external data attached to this job,.
     *
     * @param PricebookV2ExternalDataModel[]|null $externalData
     */
    public function setExternalData(?array $externalData): self
    {
        $this->externalData = $externalData;

        return $this;
    }
}
