<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class CrmV2UpdateJobRequest
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * ID of the job's customer.
     *
     * @var int
     */
    protected $customerId;
    /**
     * ID of the job's location.
     *
     * @var int
     */
    protected $locationId;
    /**
     * ID of the job's business unit.
     *
     * @var int
     */
    protected $businessUnitId;
    /**
     * ID of job type.
     *
     * @var int
     */
    protected $jobTypeId;
    /**
     * Priority of the job.
     *
     * @var string
     */
    protected $priority;
    /**
     * ID of the job's campaign.
     *
     * @var int
     */
    protected $campaignId;
    /**
     * Job summary.
     *
     * @var string
     */
    protected $summary;
    /**
     * If set to true, update the business unit of invoice items on job's invoice.
     *
     * @var bool
     */
    protected $shouldUpdateInvoiceItems;
    /**
     * List of custom fields and their values. This list must describe the full list of custom fields on the job.
     * If job A has values for custom fields X and Y and this field only contains a model for custom field X, then
     * the value for custom field Y on job A will be removed.
     *
     * @var list<CrmV2CustomFieldModel>
     */
    protected $customFields;
    /**
     * List of tag types. This list must describe the full list of tags on the job. If job A has tags X and Y and
     * this field only contains a ID for tag X, then tag Y on job A will be removed.
     *
     * @var list<int>
     */
    protected $tagTypeIds;
    /**
     * External data update model.
     */
    protected $externalData;

    /**
     * ID of the job's customer.
     */
    public function getCustomerId(): int
    {
        return $this->customerId;
    }

    /**
     * ID of the job's customer.
     */
    public function setCustomerId(int $customerId): self
    {
        $this->initialized['customerId'] = true;
        $this->customerId = $customerId;

        return $this;
    }

    /**
     * ID of the job's location.
     */
    public function getLocationId(): int
    {
        return $this->locationId;
    }

    /**
     * ID of the job's location.
     */
    public function setLocationId(int $locationId): self
    {
        $this->initialized['locationId'] = true;
        $this->locationId = $locationId;

        return $this;
    }

    /**
     * ID of the job's business unit.
     */
    public function getBusinessUnitId(): int
    {
        return $this->businessUnitId;
    }

    /**
     * ID of the job's business unit.
     */
    public function setBusinessUnitId(int $businessUnitId): self
    {
        $this->initialized['businessUnitId'] = true;
        $this->businessUnitId = $businessUnitId;

        return $this;
    }

    /**
     * ID of job type.
     */
    public function getJobTypeId(): int
    {
        return $this->jobTypeId;
    }

    /**
     * ID of job type.
     */
    public function setJobTypeId(int $jobTypeId): self
    {
        $this->initialized['jobTypeId'] = true;
        $this->jobTypeId = $jobTypeId;

        return $this;
    }

    /**
     * Priority of the job.
     */
    public function getPriority(): string
    {
        return $this->priority;
    }

    /**
     * Priority of the job.
     */
    public function setPriority(string $priority): self
    {
        $this->initialized['priority'] = true;
        $this->priority = $priority;

        return $this;
    }

    /**
     * ID of the job's campaign.
     */
    public function getCampaignId(): int
    {
        return $this->campaignId;
    }

    /**
     * ID of the job's campaign.
     */
    public function setCampaignId(int $campaignId): self
    {
        $this->initialized['campaignId'] = true;
        $this->campaignId = $campaignId;

        return $this;
    }

    /**
     * Job summary.
     */
    public function getSummary(): string
    {
        return $this->summary;
    }

    /**
     * Job summary.
     */
    public function setSummary(string $summary): self
    {
        $this->initialized['summary'] = true;
        $this->summary = $summary;

        return $this;
    }

    /**
     * If set to true, update the business unit of invoice items on job's invoice.
     */
    public function getShouldUpdateInvoiceItems(): bool
    {
        return $this->shouldUpdateInvoiceItems;
    }

    /**
     * If set to true, update the business unit of invoice items on job's invoice.
     */
    public function setShouldUpdateInvoiceItems(bool $shouldUpdateInvoiceItems): self
    {
        $this->initialized['shouldUpdateInvoiceItems'] = true;
        $this->shouldUpdateInvoiceItems = $shouldUpdateInvoiceItems;

        return $this;
    }

    /**
     * List of custom fields and their values. This list must describe the full list of custom fields on the job.
     * If job A has values for custom fields X and Y and this field only contains a model for custom field X, then
     * the value for custom field Y on job A will be removed.
     *
     * @return list<CrmV2CustomFieldModel>
     */
    public function getCustomFields(): array
    {
        return $this->customFields;
    }

    /**
     * List of custom fields and their values. This list must describe the full list of custom fields on the job.
     * If job A has values for custom fields X and Y and this field only contains a model for custom field X, then
     * the value for custom field Y on job A will be removed.
     *
     * @param list<CrmV2CustomFieldModel> $customFields
     */
    public function setCustomFields(array $customFields): self
    {
        $this->initialized['customFields'] = true;
        $this->customFields = $customFields;

        return $this;
    }

    /**
     * List of tag types. This list must describe the full list of tags on the job. If job A has tags X and Y and
     * this field only contains a ID for tag X, then tag Y on job A will be removed.
     *
     * @return list<int>
     */
    public function getTagTypeIds(): array
    {
        return $this->tagTypeIds;
    }

    /**
     * List of tag types. This list must describe the full list of tags on the job. If job A has tags X and Y and
     * this field only contains a ID for tag X, then tag Y on job A will be removed.
     *
     * @param list<int> $tagTypeIds
     */
    public function setTagTypeIds(array $tagTypeIds): self
    {
        $this->initialized['tagTypeIds'] = true;
        $this->tagTypeIds = $tagTypeIds;

        return $this;
    }

    /**
     * External data update model.
     */
    public function getExternalData()
    {
        return $this->externalData;
    }

    /**
     * External data update model.
     */
    public function setExternalData($externalData): self
    {
        $this->initialized['externalData'] = true;
        $this->externalData = $externalData;

        return $this;
    }
}
