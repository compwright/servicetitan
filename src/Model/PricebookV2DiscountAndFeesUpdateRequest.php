<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class PricebookV2DiscountAndFeesUpdateRequest
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Type should be entered as Discount or Fee to show the type.
     */
    protected $type;
    /**
     * Code used for the discount or fee.
     *
     * @var string
     */
    protected $code;
    /**
     * Name for the discount of fee.
     *
     * @var string
     */
    protected $displayName;
    /**
     * Description for the item.
     *
     * @var string
     */
    protected $description;
    /**
     * The amount type takes either "percentage" or "flat " and apply the "amount" field accordingly.
     */
    protected $amountType;
    /**
     * Amount is either the flat amount or percentage you want discounted/added.
     *
     * @var float
     */
    protected $amount;
    /**
     * The maximum amount that can be applied for this item.
     *
     * @var float
     */
    protected $limit;
    /**
     * Should tax be applied when the item is added on an estimate or invoice.
     *
     * @var bool
     */
    protected $taxable;
    /**
     * The category technicians will use to find the item.
     *
     * @var list<int>
     */
    protected $categories;
    /**
     * The number of hours associated with the SKU.
     *
     * @var float
     */
    protected $hours;
    /**
     * Images, videos or PDFs attached to SKU.
     *
     * @var list<PricebookV2SkuAssetRequest>
     */
    protected $assets;
    /**
     * The accounting account assigned to the SKU.
     *
     * @var string
     */
    protected $account;
    /**
     * A grouping of similar items that you'll then be able to track as a separate columns on the Technical Performance Board.
     *
     * @var string
     */
    protected $crossSaleGroup;
    /**
     * Active shows if this item is currently active.
     *
     * @var bool
     */
    protected $active;
    /**
     * Bonus.
     *
     * @var float
     */
    protected $bonus;
    /**
     * Flat rate bonus paid for this item.
     *
     * @var float
     */
    protected $commissionBonus;
    /**
     * PaysCommissions shows if for this item commission payed.
     *
     * @var bool
     */
    protected $paysCommission;
    /**
     * Exclude from payroll.
     *
     * @var bool
     */
    protected $excludeFromPayroll;
    /**
     * External data update model.
     *
     * @var mixed|null
     */
    protected $externalData;

    /**
     * Type should be entered as Discount or Fee to show the type.
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Type should be entered as Discount or Fee to show the type.
     */
    public function setType($type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * Code used for the discount or fee.
     */
    public function getCode(): string
    {
        return $this->code;
    }

    /**
     * Code used for the discount or fee.
     */
    public function setCode(string $code): self
    {
        $this->initialized['code'] = true;
        $this->code = $code;

        return $this;
    }

    /**
     * Name for the discount of fee.
     */
    public function getDisplayName(): string
    {
        return $this->displayName;
    }

    /**
     * Name for the discount of fee.
     */
    public function setDisplayName(string $displayName): self
    {
        $this->initialized['displayName'] = true;
        $this->displayName = $displayName;

        return $this;
    }

    /**
     * Description for the item.
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Description for the item.
     */
    public function setDescription(string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    /**
     * The amount type takes either "percentage" or "flat " and apply the "amount" field accordingly.
     */
    public function getAmountType()
    {
        return $this->amountType;
    }

    /**
     * The amount type takes either "percentage" or "flat " and apply the "amount" field accordingly.
     */
    public function setAmountType($amountType): self
    {
        $this->initialized['amountType'] = true;
        $this->amountType = $amountType;

        return $this;
    }

    /**
     * Amount is either the flat amount or percentage you want discounted/added.
     */
    public function getAmount(): float
    {
        return $this->amount;
    }

    /**
     * Amount is either the flat amount or percentage you want discounted/added.
     */
    public function setAmount(float $amount): self
    {
        $this->initialized['amount'] = true;
        $this->amount = $amount;

        return $this;
    }

    /**
     * The maximum amount that can be applied for this item.
     */
    public function getLimit(): float
    {
        return $this->limit;
    }

    /**
     * The maximum amount that can be applied for this item.
     */
    public function setLimit(float $limit): self
    {
        $this->initialized['limit'] = true;
        $this->limit = $limit;

        return $this;
    }

    /**
     * Should tax be applied when the item is added on an estimate or invoice.
     */
    public function getTaxable(): bool
    {
        return $this->taxable;
    }

    /**
     * Should tax be applied when the item is added on an estimate or invoice.
     */
    public function setTaxable(bool $taxable): self
    {
        $this->initialized['taxable'] = true;
        $this->taxable = $taxable;

        return $this;
    }

    /**
     * The category technicians will use to find the item.
     *
     * @return list<int>
     */
    public function getCategories(): array
    {
        return $this->categories;
    }

    /**
     * The category technicians will use to find the item.
     *
     * @param list<int> $categories
     */
    public function setCategories(array $categories): self
    {
        $this->initialized['categories'] = true;
        $this->categories = $categories;

        return $this;
    }

    /**
     * The number of hours associated with the SKU.
     */
    public function getHours(): float
    {
        return $this->hours;
    }

    /**
     * The number of hours associated with the SKU.
     */
    public function setHours(float $hours): self
    {
        $this->initialized['hours'] = true;
        $this->hours = $hours;

        return $this;
    }

    /**
     * Images, videos or PDFs attached to SKU.
     *
     * @return list<PricebookV2SkuAssetRequest>
     */
    public function getAssets(): array
    {
        return $this->assets;
    }

    /**
     * Images, videos or PDFs attached to SKU.
     *
     * @param list<PricebookV2SkuAssetRequest> $assets
     */
    public function setAssets(array $assets): self
    {
        $this->initialized['assets'] = true;
        $this->assets = $assets;

        return $this;
    }

    /**
     * The accounting account assigned to the SKU.
     */
    public function getAccount(): string
    {
        return $this->account;
    }

    /**
     * The accounting account assigned to the SKU.
     */
    public function setAccount(string $account): self
    {
        $this->initialized['account'] = true;
        $this->account = $account;

        return $this;
    }

    /**
     * A grouping of similar items that you'll then be able to track as a separate columns on the Technical Performance Board.
     */
    public function getCrossSaleGroup(): string
    {
        return $this->crossSaleGroup;
    }

    /**
     * A grouping of similar items that you'll then be able to track as a separate columns on the Technical Performance Board.
     */
    public function setCrossSaleGroup(string $crossSaleGroup): self
    {
        $this->initialized['crossSaleGroup'] = true;
        $this->crossSaleGroup = $crossSaleGroup;

        return $this;
    }

    /**
     * Active shows if this item is currently active.
     */
    public function getActive(): bool
    {
        return $this->active;
    }

    /**
     * Active shows if this item is currently active.
     */
    public function setActive(bool $active): self
    {
        $this->initialized['active'] = true;
        $this->active = $active;

        return $this;
    }

    /**
     * Bonus.
     */
    public function getBonus(): float
    {
        return $this->bonus;
    }

    /**
     * Bonus.
     */
    public function setBonus(float $bonus): self
    {
        $this->initialized['bonus'] = true;
        $this->bonus = $bonus;

        return $this;
    }

    /**
     * Flat rate bonus paid for this item.
     */
    public function getCommissionBonus(): float
    {
        return $this->commissionBonus;
    }

    /**
     * Flat rate bonus paid for this item.
     */
    public function setCommissionBonus(float $commissionBonus): self
    {
        $this->initialized['commissionBonus'] = true;
        $this->commissionBonus = $commissionBonus;

        return $this;
    }

    /**
     * PaysCommissions shows if for this item commission payed.
     */
    public function getPaysCommission(): bool
    {
        return $this->paysCommission;
    }

    /**
     * PaysCommissions shows if for this item commission payed.
     */
    public function setPaysCommission(bool $paysCommission): self
    {
        $this->initialized['paysCommission'] = true;
        $this->paysCommission = $paysCommission;

        return $this;
    }

    /**
     * Exclude from payroll.
     */
    public function getExcludeFromPayroll(): bool
    {
        return $this->excludeFromPayroll;
    }

    /**
     * Exclude from payroll.
     */
    public function setExcludeFromPayroll(bool $excludeFromPayroll): self
    {
        $this->initialized['excludeFromPayroll'] = true;
        $this->excludeFromPayroll = $excludeFromPayroll;

        return $this;
    }

    /**
     * External data update model.
     */
    public function getExternalData()
    {
        return $this->externalData;
    }

    /**
     * External data update model.
     */
    public function setExternalData($externalData): self
    {
        $this->initialized['externalData'] = true;
        $this->externalData = $externalData;

        return $this;
    }
}
