<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class DispatchV2TechnicianShiftResponse
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Unique id of the shift record.
     *
     * @var int
     */
    protected $id;
    /**
     * How the shift is displayed and contributes to availability calculations.
     */
    protected $shiftType;
    /**
     * Descriptive identifier.
     *
     * @var string
     */
    protected $title;
    /**
     * Optional detailed explanation of the shift.
     *
     * @var string|null
     */
    protected $note;
    /**
     * Whether the shift is enabled.
     *
     * @var bool
     */
    protected $active;
    /**
     * &gt;Unique id of the technician this shift applies to.
     *
     * @var int
     */
    protected $technicianId;
    /**
     * When the shift begins.
     *
     * @var \DateTime
     */
    protected $start;
    /**
     * When the shift ends.
     *
     * @var \DateTime
     */
    protected $end;

    /**
     * Unique id of the shift record.
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Unique id of the shift record.
     */
    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * How the shift is displayed and contributes to availability calculations.
     */
    public function getShiftType()
    {
        return $this->shiftType;
    }

    /**
     * How the shift is displayed and contributes to availability calculations.
     */
    public function setShiftType($shiftType): self
    {
        $this->initialized['shiftType'] = true;
        $this->shiftType = $shiftType;

        return $this;
    }

    /**
     * Descriptive identifier.
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * Descriptive identifier.
     */
    public function setTitle(string $title): self
    {
        $this->initialized['title'] = true;
        $this->title = $title;

        return $this;
    }

    /**
     * Optional detailed explanation of the shift.
     */
    public function getNote(): ?string
    {
        return $this->note;
    }

    /**
     * Optional detailed explanation of the shift.
     */
    public function setNote(?string $note): self
    {
        $this->initialized['note'] = true;
        $this->note = $note;

        return $this;
    }

    /**
     * Whether the shift is enabled.
     */
    public function getActive(): bool
    {
        return $this->active;
    }

    /**
     * Whether the shift is enabled.
     */
    public function setActive(bool $active): self
    {
        $this->initialized['active'] = true;
        $this->active = $active;

        return $this;
    }

    /**
     * &gt;Unique id of the technician this shift applies to.
     */
    public function getTechnicianId(): int
    {
        return $this->technicianId;
    }

    /**
     * &gt;Unique id of the technician this shift applies to.
     */
    public function setTechnicianId(int $technicianId): self
    {
        $this->initialized['technicianId'] = true;
        $this->technicianId = $technicianId;

        return $this;
    }

    /**
     * When the shift begins.
     */
    public function getStart(): \DateTime
    {
        return $this->start;
    }

    /**
     * When the shift begins.
     */
    public function setStart(\DateTime $start): self
    {
        $this->initialized['start'] = true;
        $this->start = $start;

        return $this;
    }

    /**
     * When the shift ends.
     */
    public function getEnd(): \DateTime
    {
        return $this->end;
    }

    /**
     * When the shift ends.
     */
    public function setEnd(\DateTime $end): self
    {
        $this->initialized['end'] = true;
        $this->end = $end;

        return $this;
    }
}
