<?php
/**
 * AccountingV2InvoiceItemUpdateRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * AccountingV2InvoiceItemUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccountingV2InvoiceItemUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Accounting.V2.InvoiceItemUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sku_id' => 'int',
        'sku_name' => 'string',
        'technician_id' => 'int',
        'description' => 'string',
        'quantity' => 'float',
        'unit_price' => 'float',
        'cost' => 'float',
        'is_add_on' => 'bool',
        'signature' => 'string',
        'technician_acknowledgement_signature' => 'string',
        'installed_on' => '\DateTime',
        'inventory_warehouse_name' => 'string',
        'skip_updating_membership_prices' => 'bool',
        'item_group_name' => 'string',
        'item_group_root_id' => 'int',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sku_id' => 'int64',
        'sku_name' => null,
        'technician_id' => 'int64',
        'description' => null,
        'quantity' => 'decimal',
        'unit_price' => 'decimal',
        'cost' => 'decimal',
        'is_add_on' => null,
        'signature' => null,
        'technician_acknowledgement_signature' => null,
        'installed_on' => 'date-time',
        'inventory_warehouse_name' => null,
        'skip_updating_membership_prices' => null,
        'item_group_name' => null,
        'item_group_root_id' => 'int64',
        'id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku_id' => 'skuId',
        'sku_name' => 'skuName',
        'technician_id' => 'technicianId',
        'description' => 'description',
        'quantity' => 'quantity',
        'unit_price' => 'unitPrice',
        'cost' => 'cost',
        'is_add_on' => 'isAddOn',
        'signature' => 'signature',
        'technician_acknowledgement_signature' => 'technicianAcknowledgementSignature',
        'installed_on' => 'installedOn',
        'inventory_warehouse_name' => 'inventoryWarehouseName',
        'skip_updating_membership_prices' => 'skipUpdatingMembershipPrices',
        'item_group_name' => 'itemGroupName',
        'item_group_root_id' => 'itemGroupRootId',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku_id' => 'setSkuId',
        'sku_name' => 'setSkuName',
        'technician_id' => 'setTechnicianId',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'unit_price' => 'setUnitPrice',
        'cost' => 'setCost',
        'is_add_on' => 'setIsAddOn',
        'signature' => 'setSignature',
        'technician_acknowledgement_signature' => 'setTechnicianAcknowledgementSignature',
        'installed_on' => 'setInstalledOn',
        'inventory_warehouse_name' => 'setInventoryWarehouseName',
        'skip_updating_membership_prices' => 'setSkipUpdatingMembershipPrices',
        'item_group_name' => 'setItemGroupName',
        'item_group_root_id' => 'setItemGroupRootId',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku_id' => 'getSkuId',
        'sku_name' => 'getSkuName',
        'technician_id' => 'getTechnicianId',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'unit_price' => 'getUnitPrice',
        'cost' => 'getCost',
        'is_add_on' => 'getIsAddOn',
        'signature' => 'getSignature',
        'technician_acknowledgement_signature' => 'getTechnicianAcknowledgementSignature',
        'installed_on' => 'getInstalledOn',
        'inventory_warehouse_name' => 'getInventoryWarehouseName',
        'skip_updating_membership_prices' => 'getSkipUpdatingMembershipPrices',
        'item_group_name' => 'getItemGroupName',
        'item_group_root_id' => 'getItemGroupRootId',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku_id'] = $data['sku_id'] ?? null;
        $this->container['sku_name'] = $data['sku_name'] ?? null;
        $this->container['technician_id'] = $data['technician_id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['unit_price'] = $data['unit_price'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['is_add_on'] = $data['is_add_on'] ?? null;
        $this->container['signature'] = $data['signature'] ?? null;
        $this->container['technician_acknowledgement_signature'] = $data['technician_acknowledgement_signature'] ?? null;
        $this->container['installed_on'] = $data['installed_on'] ?? null;
        $this->container['inventory_warehouse_name'] = $data['inventory_warehouse_name'] ?? null;
        $this->container['skip_updating_membership_prices'] = $data['skip_updating_membership_prices'] ?? null;
        $this->container['item_group_name'] = $data['item_group_name'] ?? null;
        $this->container['item_group_root_id'] = $data['item_group_root_id'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku_id
     *
     * @return int|null
     */
    public function getSkuId()
    {
        return $this->container['sku_id'];
    }

    /**
     * Sets sku_id
     *
     * @param int|null $sku_id sku_id
     *
     * @return self
     */
    public function setSkuId($sku_id)
    {
        $this->container['sku_id'] = $sku_id;

        return $this;
    }

    /**
     * Gets sku_name
     *
     * @return string|null
     */
    public function getSkuName()
    {
        return $this->container['sku_name'];
    }

    /**
     * Sets sku_name
     *
     * @param string|null $sku_name sku_name
     *
     * @return self
     */
    public function setSkuName($sku_name)
    {
        $this->container['sku_name'] = $sku_name;

        return $this;
    }

    /**
     * Gets technician_id
     *
     * @return int|null
     */
    public function getTechnicianId()
    {
        return $this->container['technician_id'];
    }

    /**
     * Sets technician_id
     *
     * @param int|null $technician_id technician_id
     *
     * @return self
     */
    public function setTechnicianId($technician_id)
    {
        $this->container['technician_id'] = $technician_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price unit_price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets is_add_on
     *
     * @return bool|null
     */
    public function getIsAddOn()
    {
        return $this->container['is_add_on'];
    }

    /**
     * Sets is_add_on
     *
     * @param bool|null $is_add_on is_add_on
     *
     * @return self
     */
    public function setIsAddOn($is_add_on)
    {
        $this->container['is_add_on'] = $is_add_on;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature signature
     *
     * @return self
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets technician_acknowledgement_signature
     *
     * @return string|null
     */
    public function getTechnicianAcknowledgementSignature()
    {
        return $this->container['technician_acknowledgement_signature'];
    }

    /**
     * Sets technician_acknowledgement_signature
     *
     * @param string|null $technician_acknowledgement_signature technician_acknowledgement_signature
     *
     * @return self
     */
    public function setTechnicianAcknowledgementSignature($technician_acknowledgement_signature)
    {
        $this->container['technician_acknowledgement_signature'] = $technician_acknowledgement_signature;

        return $this;
    }

    /**
     * Gets installed_on
     *
     * @return \DateTime|null
     */
    public function getInstalledOn()
    {
        return $this->container['installed_on'];
    }

    /**
     * Sets installed_on
     *
     * @param \DateTime|null $installed_on installed_on
     *
     * @return self
     */
    public function setInstalledOn($installed_on)
    {
        $this->container['installed_on'] = $installed_on;

        return $this;
    }

    /**
     * Gets inventory_warehouse_name
     *
     * @return string|null
     */
    public function getInventoryWarehouseName()
    {
        return $this->container['inventory_warehouse_name'];
    }

    /**
     * Sets inventory_warehouse_name
     *
     * @param string|null $inventory_warehouse_name inventory_warehouse_name
     *
     * @return self
     */
    public function setInventoryWarehouseName($inventory_warehouse_name)
    {
        $this->container['inventory_warehouse_name'] = $inventory_warehouse_name;

        return $this;
    }

    /**
     * Gets skip_updating_membership_prices
     *
     * @return bool|null
     */
    public function getSkipUpdatingMembershipPrices()
    {
        return $this->container['skip_updating_membership_prices'];
    }

    /**
     * Sets skip_updating_membership_prices
     *
     * @param bool|null $skip_updating_membership_prices skip_updating_membership_prices
     *
     * @return self
     */
    public function setSkipUpdatingMembershipPrices($skip_updating_membership_prices)
    {
        $this->container['skip_updating_membership_prices'] = $skip_updating_membership_prices;

        return $this;
    }

    /**
     * Gets item_group_name
     *
     * @return string|null
     */
    public function getItemGroupName()
    {
        return $this->container['item_group_name'];
    }

    /**
     * Sets item_group_name
     *
     * @param string|null $item_group_name item_group_name
     *
     * @return self
     */
    public function setItemGroupName($item_group_name)
    {
        $this->container['item_group_name'] = $item_group_name;

        return $this;
    }

    /**
     * Gets item_group_root_id
     *
     * @return int|null
     */
    public function getItemGroupRootId()
    {
        return $this->container['item_group_root_id'];
    }

    /**
     * Sets item_group_root_id
     *
     * @param int|null $item_group_root_id item_group_root_id
     *
     * @return self
     */
    public function setItemGroupRootId($item_group_root_id)
    {
        $this->container['item_group_root_id'] = $item_group_root_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


