<?php
/**
 * CrmV2AppointmentAssignmentResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dispatch
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * CrmV2AppointmentAssignmentResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CrmV2AppointmentAssignmentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Crm.V2.AppointmentAssignmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'technician_id' => 'int',
        'technician_name' => 'string',
        'assigned_by_id' => 'int',
        'assigned_on' => '\DateTime',
        'status' => 'OneOfDispatchJobAppointmentAssignmentStatus',
        'is_paused' => 'bool',
        'job_id' => 'int',
        'appointment_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'technician_id' => 'int64',
        'technician_name' => null,
        'assigned_by_id' => 'int64',
        'assigned_on' => 'date-time',
        'status' => null,
        'is_paused' => null,
        'job_id' => 'int64',
        'appointment_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'technician_id' => 'technicianId',
        'technician_name' => 'technicianName',
        'assigned_by_id' => 'assignedById',
        'assigned_on' => 'assignedOn',
        'status' => 'status',
        'is_paused' => 'isPaused',
        'job_id' => 'jobId',
        'appointment_id' => 'appointmentId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'technician_id' => 'setTechnicianId',
        'technician_name' => 'setTechnicianName',
        'assigned_by_id' => 'setAssignedById',
        'assigned_on' => 'setAssignedOn',
        'status' => 'setStatus',
        'is_paused' => 'setIsPaused',
        'job_id' => 'setJobId',
        'appointment_id' => 'setAppointmentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'technician_id' => 'getTechnicianId',
        'technician_name' => 'getTechnicianName',
        'assigned_by_id' => 'getAssignedById',
        'assigned_on' => 'getAssignedOn',
        'status' => 'getStatus',
        'is_paused' => 'getIsPaused',
        'job_id' => 'getJobId',
        'appointment_id' => 'getAppointmentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['technician_id'] = $data['technician_id'] ?? null;
        $this->container['technician_name'] = $data['technician_name'] ?? null;
        $this->container['assigned_by_id'] = $data['assigned_by_id'] ?? null;
        $this->container['assigned_on'] = $data['assigned_on'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['is_paused'] = $data['is_paused'] ?? null;
        $this->container['job_id'] = $data['job_id'] ?? null;
        $this->container['appointment_id'] = $data['appointment_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['technician_id'] === null) {
            $invalidProperties[] = "'technician_id' can't be null";
        }
        if ($this->container['technician_name'] === null) {
            $invalidProperties[] = "'technician_name' can't be null";
        }
        if ($this->container['assigned_by_id'] === null) {
            $invalidProperties[] = "'assigned_by_id' can't be null";
        }
        if ($this->container['assigned_on'] === null) {
            $invalidProperties[] = "'assigned_on' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['is_paused'] === null) {
            $invalidProperties[] = "'is_paused' can't be null";
        }
        if ($this->container['job_id'] === null) {
            $invalidProperties[] = "'job_id' can't be null";
        }
        if ($this->container['appointment_id'] === null) {
            $invalidProperties[] = "'appointment_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the appointment assignment
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets technician_id
     *
     * @return int
     */
    public function getTechnicianId()
    {
        return $this->container['technician_id'];
    }

    /**
     * Sets technician_id
     *
     * @param int $technician_id ID of the technician
     *
     * @return self
     */
    public function setTechnicianId($technician_id)
    {
        $this->container['technician_id'] = $technician_id;

        return $this;
    }

    /**
     * Gets technician_name
     *
     * @return string
     */
    public function getTechnicianName()
    {
        return $this->container['technician_name'];
    }

    /**
     * Sets technician_name
     *
     * @param string $technician_name Name of the technician
     *
     * @return self
     */
    public function setTechnicianName($technician_name)
    {
        $this->container['technician_name'] = $technician_name;

        return $this;
    }

    /**
     * Gets assigned_by_id
     *
     * @return int
     */
    public function getAssignedById()
    {
        return $this->container['assigned_by_id'];
    }

    /**
     * Sets assigned_by_id
     *
     * @param int $assigned_by_id ID of the user who assigned the appointment assignment
     *
     * @return self
     */
    public function setAssignedById($assigned_by_id)
    {
        $this->container['assigned_by_id'] = $assigned_by_id;

        return $this;
    }

    /**
     * Gets assigned_on
     *
     * @return \DateTime
     */
    public function getAssignedOn()
    {
        return $this->container['assigned_on'];
    }

    /**
     * Sets assigned_on
     *
     * @param \DateTime $assigned_on Date/time (in UTC) when the appointment assignment was assigned
     *
     * @return self
     */
    public function setAssignedOn($assigned_on)
    {
        $this->container['assigned_on'] = $assigned_on;

        return $this;
    }

    /**
     * Gets status
     *
     * @return OneOfDispatchJobAppointmentAssignmentStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param OneOfDispatchJobAppointmentAssignmentStatus $status Status of the appointment assignment
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_paused
     *
     * @return bool
     */
    public function getIsPaused()
    {
        return $this->container['is_paused'];
    }

    /**
     * Sets is_paused
     *
     * @param bool $is_paused Whether appointment assignment is paused
     *
     * @return self
     */
    public function setIsPaused($is_paused)
    {
        $this->container['is_paused'] = $is_paused;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return int
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param int $job_id ID of the job
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets appointment_id
     *
     * @return int
     */
    public function getAppointmentId()
    {
        return $this->container['appointment_id'];
    }

    /**
     * Sets appointment_id
     *
     * @param int $appointment_id ID of the appointment
     *
     * @return self
     */
    public function setAppointmentId($appointment_id)
    {
        $this->container['appointment_id'] = $appointment_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


