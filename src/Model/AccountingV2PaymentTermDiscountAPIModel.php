<?php
/**
 * AccountingV2PaymentTermDiscountAPIModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * AccountingV2PaymentTermDiscountAPIModel Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccountingV2PaymentTermDiscountAPIModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Accounting.V2.PaymentTermDiscountAPIModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'discount_apply_to' => 'OneOfAccountingV2PaymentTermApplyTo',
        'discount' => 'float',
        'discount_type' => 'OneOfAccountingV2PaymentTermValueType',
        'account' => 'string',
        'apply_by' => 'OneOfAccountingV2DiscountAppliedBy',
        'apply_by_value' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'discount_apply_to' => null,
        'discount' => 'decimal',
        'discount_type' => null,
        'account' => null,
        'apply_by' => null,
        'apply_by_value' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'discount_apply_to' => 'discountApplyTo',
        'discount' => 'discount',
        'discount_type' => 'discountType',
        'account' => 'account',
        'apply_by' => 'applyBy',
        'apply_by_value' => 'applyByValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'discount_apply_to' => 'setDiscountApplyTo',
        'discount' => 'setDiscount',
        'discount_type' => 'setDiscountType',
        'account' => 'setAccount',
        'apply_by' => 'setApplyBy',
        'apply_by_value' => 'setApplyByValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'discount_apply_to' => 'getDiscountApplyTo',
        'discount' => 'getDiscount',
        'discount_type' => 'getDiscountType',
        'account' => 'getAccount',
        'apply_by' => 'getApplyBy',
        'apply_by_value' => 'getApplyByValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['discount_apply_to'] = $data['discount_apply_to'] ?? null;
        $this->container['discount'] = $data['discount'] ?? null;
        $this->container['discount_type'] = $data['discount_type'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['apply_by'] = $data['apply_by'] ?? null;
        $this->container['apply_by_value'] = $data['apply_by_value'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets discount_apply_to
     *
     * @return OneOfAccountingV2PaymentTermApplyTo|null
     */
    public function getDiscountApplyTo()
    {
        return $this->container['discount_apply_to'];
    }

    /**
     * Sets discount_apply_to
     *
     * @param OneOfAccountingV2PaymentTermApplyTo|null $discount_apply_to discount_apply_to
     *
     * @return self
     */
    public function setDiscountApplyTo($discount_apply_to)
    {
        $this->container['discount_apply_to'] = $discount_apply_to;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return OneOfAccountingV2PaymentTermValueType|null
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param OneOfAccountingV2PaymentTermValueType|null $discount_type discount_type
     *
     * @return self
     */
    public function setDiscountType($discount_type)
    {
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets apply_by
     *
     * @return OneOfAccountingV2DiscountAppliedBy|null
     */
    public function getApplyBy()
    {
        return $this->container['apply_by'];
    }

    /**
     * Sets apply_by
     *
     * @param OneOfAccountingV2DiscountAppliedBy|null $apply_by apply_by
     *
     * @return self
     */
    public function setApplyBy($apply_by)
    {
        $this->container['apply_by'] = $apply_by;

        return $this;
    }

    /**
     * Gets apply_by_value
     *
     * @return int|null
     */
    public function getApplyByValue()
    {
        return $this->container['apply_by_value'];
    }

    /**
     * Sets apply_by_value
     *
     * @param int|null $apply_by_value apply_by_value
     *
     * @return self
     */
    public function setApplyByValue($apply_by_value)
    {
        $this->container['apply_by_value'] = $apply_by_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


