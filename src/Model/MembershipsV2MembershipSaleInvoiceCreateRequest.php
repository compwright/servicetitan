<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class MembershipsV2MembershipSaleInvoiceCreateRequest
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * ID of the customer you are creating the Membership Sale Invoice for.
     *
     * @var int
     */
    protected $customerId;
    /**
     * Business unit ID.
     *
     * @var int
     */
    protected $businessUnitId;
    /**
     * ID of the sale task that is creating the membership.
     *
     * @var int
     */
    protected $saleTaskId;
    /**
     * ID of the duration/billing option to be used.
     *
     * @var int
     */
    protected $durationBillingId;
    /**
     * Discount location ID of this membership (null if all locations).
     *
     * @var int|null
     */
    protected $locationId;
    /**
     * Required if RecurringLocationId is set.
     * Determines how many of the customer's locations that recurring services should be added to: all, single, or none (which deletes existing recurring services).
     */
    protected $recurringServiceAction;
    /**
     * The location at which recurring services are scheduled (null if all locations).
     *
     * @var int|null
     */
    protected $recurringLocationId;

    /**
     * ID of the customer you are creating the Membership Sale Invoice for.
     */
    public function getCustomerId(): int
    {
        return $this->customerId;
    }

    /**
     * ID of the customer you are creating the Membership Sale Invoice for.
     */
    public function setCustomerId(int $customerId): self
    {
        $this->initialized['customerId'] = true;
        $this->customerId = $customerId;

        return $this;
    }

    /**
     * Business unit ID.
     */
    public function getBusinessUnitId(): int
    {
        return $this->businessUnitId;
    }

    /**
     * Business unit ID.
     */
    public function setBusinessUnitId(int $businessUnitId): self
    {
        $this->initialized['businessUnitId'] = true;
        $this->businessUnitId = $businessUnitId;

        return $this;
    }

    /**
     * ID of the sale task that is creating the membership.
     */
    public function getSaleTaskId(): int
    {
        return $this->saleTaskId;
    }

    /**
     * ID of the sale task that is creating the membership.
     */
    public function setSaleTaskId(int $saleTaskId): self
    {
        $this->initialized['saleTaskId'] = true;
        $this->saleTaskId = $saleTaskId;

        return $this;
    }

    /**
     * ID of the duration/billing option to be used.
     */
    public function getDurationBillingId(): int
    {
        return $this->durationBillingId;
    }

    /**
     * ID of the duration/billing option to be used.
     */
    public function setDurationBillingId(int $durationBillingId): self
    {
        $this->initialized['durationBillingId'] = true;
        $this->durationBillingId = $durationBillingId;

        return $this;
    }

    /**
     * Discount location ID of this membership (null if all locations).
     */
    public function getLocationId(): ?int
    {
        return $this->locationId;
    }

    /**
     * Discount location ID of this membership (null if all locations).
     */
    public function setLocationId(?int $locationId): self
    {
        $this->initialized['locationId'] = true;
        $this->locationId = $locationId;

        return $this;
    }

    /**
     * Required if RecurringLocationId is set.
     * Determines how many of the customer's locations that recurring services should be added to: all, single, or none (which deletes existing recurring services).
     */
    public function getRecurringServiceAction()
    {
        return $this->recurringServiceAction;
    }

    /**
     * Required if RecurringLocationId is set.
     * Determines how many of the customer's locations that recurring services should be added to: all, single, or none (which deletes existing recurring services).
     */
    public function setRecurringServiceAction($recurringServiceAction): self
    {
        $this->initialized['recurringServiceAction'] = true;
        $this->recurringServiceAction = $recurringServiceAction;

        return $this;
    }

    /**
     * The location at which recurring services are scheduled (null if all locations).
     */
    public function getRecurringLocationId(): ?int
    {
        return $this->recurringLocationId;
    }

    /**
     * The location at which recurring services are scheduled (null if all locations).
     */
    public function setRecurringLocationId(?int $recurringLocationId): self
    {
        $this->initialized['recurringLocationId'] = true;
        $this->recurringLocationId = $recurringLocationId;

        return $this;
    }
}
