<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class AccountingV2TaxRateResponse
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Tax Rate Id.
     *
     * @var int|null
     */
    protected $id;
    /**
     * Tax Rate Name.
     *
     * @var string|null
     */
    protected $taxName;
    /**
     * Indicates how the tax rate is applied (Subtotal, Labor, Material).
     *
     * @var list<string>
     */
    protected $taxBaseType;
    /**
     * Tax rate as a fractional/decimal value.
     *
     * @var float
     */
    protected $taxRate;
    /**
     * The Quickbooks item that relates to this tax rate.
     *
     * @var string|null
     */
    protected $salesTaxItem;

    /**
     * Tax Rate Id.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Tax Rate Id.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * Tax Rate Name.
     */
    public function getTaxName(): ?string
    {
        return $this->taxName;
    }

    /**
     * Tax Rate Name.
     */
    public function setTaxName(?string $taxName): self
    {
        $this->initialized['taxName'] = true;
        $this->taxName = $taxName;

        return $this;
    }

    /**
     * Indicates how the tax rate is applied (Subtotal, Labor, Material).
     *
     * @return list<string>
     */
    public function getTaxBaseType(): array
    {
        return $this->taxBaseType;
    }

    /**
     * Indicates how the tax rate is applied (Subtotal, Labor, Material).
     *
     * @param list<string> $taxBaseType
     */
    public function setTaxBaseType(array $taxBaseType): self
    {
        $this->initialized['taxBaseType'] = true;
        $this->taxBaseType = $taxBaseType;

        return $this;
    }

    /**
     * Tax rate as a fractional/decimal value.
     */
    public function getTaxRate(): float
    {
        return $this->taxRate;
    }

    /**
     * Tax rate as a fractional/decimal value.
     */
    public function setTaxRate(float $taxRate): self
    {
        $this->initialized['taxRate'] = true;
        $this->taxRate = $taxRate;

        return $this;
    }

    /**
     * The Quickbooks item that relates to this tax rate.
     */
    public function getSalesTaxItem(): ?string
    {
        return $this->salesTaxItem;
    }

    /**
     * The Quickbooks item that relates to this tax rate.
     */
    public function setSalesTaxItem(?string $salesTaxItem): self
    {
        $this->initialized['salesTaxItem'] = true;
        $this->salesTaxItem = $salesTaxItem;

        return $this;
    }
}
