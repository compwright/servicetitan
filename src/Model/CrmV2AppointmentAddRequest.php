<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class CrmV2AppointmentAddRequest
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * ID of job for new appointment.
     *
     * @var int
     */
    protected $jobId;
    /**
     * Start date/time (in UTC) of new appointment.
     *
     * @var \DateTime
     */
    protected $start;
    /**
     * End date/time (in UTC) of new appointment.
     *
     * @var \DateTime
     */
    protected $end;
    /**
     * Arrival window start date/time (in UTC) for new appointment, if configured.
     *
     * @var \DateTime|null
     */
    protected $arrivalWindowStart;
    /**
     * Arrival window end date/time (in UTC) for new appointment, if configured.
     *
     * @var \DateTime|null
     */
    protected $arrivalWindowEnd;
    /**
     * List of IDs of technicians to assign to new appointment.
     *
     * @var list<int>|null
     */
    protected $technicianIds;
    /**
     * Special instructions associated to the appointment.
     *
     * @var string|null
     */
    protected $specialInstructions;

    /**
     * ID of job for new appointment.
     */
    public function getJobId(): int
    {
        return $this->jobId;
    }

    /**
     * ID of job for new appointment.
     */
    public function setJobId(int $jobId): self
    {
        $this->initialized['jobId'] = true;
        $this->jobId = $jobId;

        return $this;
    }

    /**
     * Start date/time (in UTC) of new appointment.
     */
    public function getStart(): \DateTime
    {
        return $this->start;
    }

    /**
     * Start date/time (in UTC) of new appointment.
     */
    public function setStart(\DateTime $start): self
    {
        $this->initialized['start'] = true;
        $this->start = $start;

        return $this;
    }

    /**
     * End date/time (in UTC) of new appointment.
     */
    public function getEnd(): \DateTime
    {
        return $this->end;
    }

    /**
     * End date/time (in UTC) of new appointment.
     */
    public function setEnd(\DateTime $end): self
    {
        $this->initialized['end'] = true;
        $this->end = $end;

        return $this;
    }

    /**
     * Arrival window start date/time (in UTC) for new appointment, if configured.
     */
    public function getArrivalWindowStart(): ?\DateTime
    {
        return $this->arrivalWindowStart;
    }

    /**
     * Arrival window start date/time (in UTC) for new appointment, if configured.
     */
    public function setArrivalWindowStart(?\DateTime $arrivalWindowStart): self
    {
        $this->initialized['arrivalWindowStart'] = true;
        $this->arrivalWindowStart = $arrivalWindowStart;

        return $this;
    }

    /**
     * Arrival window end date/time (in UTC) for new appointment, if configured.
     */
    public function getArrivalWindowEnd(): ?\DateTime
    {
        return $this->arrivalWindowEnd;
    }

    /**
     * Arrival window end date/time (in UTC) for new appointment, if configured.
     */
    public function setArrivalWindowEnd(?\DateTime $arrivalWindowEnd): self
    {
        $this->initialized['arrivalWindowEnd'] = true;
        $this->arrivalWindowEnd = $arrivalWindowEnd;

        return $this;
    }

    /**
     * List of IDs of technicians to assign to new appointment.
     *
     * @return list<int>|null
     */
    public function getTechnicianIds(): ?array
    {
        return $this->technicianIds;
    }

    /**
     * List of IDs of technicians to assign to new appointment.
     *
     * @param list<int>|null $technicianIds
     */
    public function setTechnicianIds(?array $technicianIds): self
    {
        $this->initialized['technicianIds'] = true;
        $this->technicianIds = $technicianIds;

        return $this;
    }

    /**
     * Special instructions associated to the appointment.
     */
    public function getSpecialInstructions(): ?string
    {
        return $this->specialInstructions;
    }

    /**
     * Special instructions associated to the appointment.
     */
    public function setSpecialInstructions(?string $specialInstructions): self
    {
        $this->initialized['specialInstructions'] = true;
        $this->specialInstructions = $specialInstructions;

        return $this;
    }
}
