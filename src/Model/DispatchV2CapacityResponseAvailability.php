<?php
/**
 * DispatchV2CapacityResponseAvailability
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dispatch
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * DispatchV2CapacityResponseAvailability Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DispatchV2CapacityResponseAvailability implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dispatch.V2.CapacityResponseAvailability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start' => '\DateTime',
        'end' => '\DateTime',
        'business_unit_ids' => 'int[]',
        'total_availability' => 'double',
        'open_availability' => 'double',
        'technicians' => '\CompWright\ServiceTitan\Model\DispatchV2CapacityResponseTechnician[]',
        'is_exceeding_ideal_booking_percentage' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start' => 'date-time',
        'end' => 'date-time',
        'business_unit_ids' => 'int64',
        'total_availability' => 'double',
        'open_availability' => 'double',
        'technicians' => null,
        'is_exceeding_ideal_booking_percentage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start' => 'start',
        'end' => 'end',
        'business_unit_ids' => 'businessUnitIds',
        'total_availability' => 'totalAvailability',
        'open_availability' => 'openAvailability',
        'technicians' => 'technicians',
        'is_exceeding_ideal_booking_percentage' => 'isExceedingIdealBookingPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start' => 'setStart',
        'end' => 'setEnd',
        'business_unit_ids' => 'setBusinessUnitIds',
        'total_availability' => 'setTotalAvailability',
        'open_availability' => 'setOpenAvailability',
        'technicians' => 'setTechnicians',
        'is_exceeding_ideal_booking_percentage' => 'setIsExceedingIdealBookingPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start' => 'getStart',
        'end' => 'getEnd',
        'business_unit_ids' => 'getBusinessUnitIds',
        'total_availability' => 'getTotalAvailability',
        'open_availability' => 'getOpenAvailability',
        'technicians' => 'getTechnicians',
        'is_exceeding_ideal_booking_percentage' => 'getIsExceedingIdealBookingPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start'] = $data['start'] ?? null;
        $this->container['end'] = $data['end'] ?? null;
        $this->container['business_unit_ids'] = $data['business_unit_ids'] ?? null;
        $this->container['total_availability'] = $data['total_availability'] ?? null;
        $this->container['open_availability'] = $data['open_availability'] ?? null;
        $this->container['technicians'] = $data['technicians'] ?? null;
        $this->container['is_exceeding_ideal_booking_percentage'] = $data['is_exceeding_ideal_booking_percentage'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['end'] === null) {
            $invalidProperties[] = "'end' can't be null";
        }
        if ($this->container['business_unit_ids'] === null) {
            $invalidProperties[] = "'business_unit_ids' can't be null";
        }
        if ($this->container['total_availability'] === null) {
            $invalidProperties[] = "'total_availability' can't be null";
        }
        if ($this->container['open_availability'] === null) {
            $invalidProperties[] = "'open_availability' can't be null";
        }
        if ($this->container['technicians'] === null) {
            $invalidProperties[] = "'technicians' can't be null";
        }
        if ($this->container['is_exceeding_ideal_booking_percentage'] === null) {
            $invalidProperties[] = "'is_exceeding_ideal_booking_percentage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start When the availability time frame starts
     *
     * @return self
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end When the availability time frame ends
     *
     * @return self
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets business_unit_ids
     *
     * @return int[]
     */
    public function getBusinessUnitIds()
    {
        return $this->container['business_unit_ids'];
    }

    /**
     * Sets business_unit_ids
     *
     * @param int[] $business_unit_ids Business units that the availability applies to
     *
     * @return self
     */
    public function setBusinessUnitIds($business_unit_ids)
    {
        $this->container['business_unit_ids'] = $business_unit_ids;

        return $this;
    }

    /**
     * Gets total_availability
     *
     * @return double
     */
    public function getTotalAvailability()
    {
        return $this->container['total_availability'];
    }

    /**
     * Sets total_availability
     *
     * @param double $total_availability Number of jobs that total capacity can allow to be booked during this time frame
     *
     * @return self
     */
    public function setTotalAvailability($total_availability)
    {
        $this->container['total_availability'] = $total_availability;

        return $this;
    }

    /**
     * Gets open_availability
     *
     * @return double
     */
    public function getOpenAvailability()
    {
        return $this->container['open_availability'];
    }

    /**
     * Sets open_availability
     *
     * @param double $open_availability Number of remaining jobs that can be booked during this time frame
     *
     * @return self
     */
    public function setOpenAvailability($open_availability)
    {
        $this->container['open_availability'] = $open_availability;

        return $this;
    }

    /**
     * Gets technicians
     *
     * @return \CompWright\ServiceTitan\Model\DispatchV2CapacityResponseTechnician[]
     */
    public function getTechnicians()
    {
        return $this->container['technicians'];
    }

    /**
     * Sets technicians
     *
     * @param \CompWright\ServiceTitan\Model\DispatchV2CapacityResponseTechnician[] $technicians Technician details for this availability time frame
     *
     * @return self
     */
    public function setTechnicians($technicians)
    {
        $this->container['technicians'] = $technicians;

        return $this;
    }

    /**
     * Gets is_exceeding_ideal_booking_percentage
     *
     * @return bool
     */
    public function getIsExceedingIdealBookingPercentage()
    {
        return $this->container['is_exceeding_ideal_booking_percentage'];
    }

    /**
     * Sets is_exceeding_ideal_booking_percentage
     *
     * @param bool $is_exceeding_ideal_booking_percentage Indicate if Ideal Booking Percentage is exceeded
     *
     * @return self
     */
    public function setIsExceedingIdealBookingPercentage($is_exceeding_ideal_booking_percentage)
    {
        $this->container['is_exceeding_ideal_booking_percentage'] = $is_exceeding_ideal_booking_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


