<?php
/**
 * CrmV2JobResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Job Planning and Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * CrmV2JobResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CrmV2JobResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Crm.V2.JobResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'job_number' => 'string',
        'customer_id' => 'int',
        'location_id' => 'int',
        'job_status' => 'string',
        'completed_on' => '\DateTime',
        'business_unit_id' => 'int',
        'job_type_id' => 'int',
        'priority' => 'string',
        'campaign_id' => 'int',
        'summary' => 'string',
        'custom_fields' => '\CompWright\ServiceTitan\Model\CustomFieldApiModel[]',
        'appointment_count' => 'int',
        'first_appointment_id' => 'int',
        'last_appointment_id' => 'int',
        'recall_for_id' => 'int',
        'warranty_id' => 'int',
        'job_generated_lead_source' => 'OneOfJpmJobGeneratedLeadSource',
        'no_charge' => 'bool',
        'notifications_enabled' => 'bool',
        'created_on' => '\DateTime',
        'created_by_id' => 'int',
        'modified_on' => '\DateTime',
        'tag_type_ids' => 'int[]',
        'lead_call_id' => 'int',
        'booking_id' => 'int',
        'sold_by_id' => 'int',
        'external_data' => '\CompWright\ServiceTitan\Model\CrmV2ExternalDataModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'job_number' => null,
        'customer_id' => 'int64',
        'location_id' => 'int64',
        'job_status' => null,
        'completed_on' => 'date-time',
        'business_unit_id' => 'int64',
        'job_type_id' => 'int64',
        'priority' => null,
        'campaign_id' => 'int64',
        'summary' => null,
        'custom_fields' => null,
        'appointment_count' => 'int64',
        'first_appointment_id' => 'int64',
        'last_appointment_id' => 'int64',
        'recall_for_id' => 'int64',
        'warranty_id' => 'int64',
        'job_generated_lead_source' => null,
        'no_charge' => null,
        'notifications_enabled' => null,
        'created_on' => 'date-time',
        'created_by_id' => 'int64',
        'modified_on' => 'date-time',
        'tag_type_ids' => 'int64',
        'lead_call_id' => 'int64',
        'booking_id' => 'int64',
        'sold_by_id' => 'int64',
        'external_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'job_number' => 'jobNumber',
        'customer_id' => 'customerId',
        'location_id' => 'locationId',
        'job_status' => 'jobStatus',
        'completed_on' => 'completedOn',
        'business_unit_id' => 'businessUnitId',
        'job_type_id' => 'jobTypeId',
        'priority' => 'priority',
        'campaign_id' => 'campaignId',
        'summary' => 'summary',
        'custom_fields' => 'customFields',
        'appointment_count' => 'appointmentCount',
        'first_appointment_id' => 'firstAppointmentId',
        'last_appointment_id' => 'lastAppointmentId',
        'recall_for_id' => 'recallForId',
        'warranty_id' => 'warrantyId',
        'job_generated_lead_source' => 'jobGeneratedLeadSource',
        'no_charge' => 'noCharge',
        'notifications_enabled' => 'notificationsEnabled',
        'created_on' => 'createdOn',
        'created_by_id' => 'createdById',
        'modified_on' => 'modifiedOn',
        'tag_type_ids' => 'tagTypeIds',
        'lead_call_id' => 'leadCallId',
        'booking_id' => 'bookingId',
        'sold_by_id' => 'soldById',
        'external_data' => 'externalData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'job_number' => 'setJobNumber',
        'customer_id' => 'setCustomerId',
        'location_id' => 'setLocationId',
        'job_status' => 'setJobStatus',
        'completed_on' => 'setCompletedOn',
        'business_unit_id' => 'setBusinessUnitId',
        'job_type_id' => 'setJobTypeId',
        'priority' => 'setPriority',
        'campaign_id' => 'setCampaignId',
        'summary' => 'setSummary',
        'custom_fields' => 'setCustomFields',
        'appointment_count' => 'setAppointmentCount',
        'first_appointment_id' => 'setFirstAppointmentId',
        'last_appointment_id' => 'setLastAppointmentId',
        'recall_for_id' => 'setRecallForId',
        'warranty_id' => 'setWarrantyId',
        'job_generated_lead_source' => 'setJobGeneratedLeadSource',
        'no_charge' => 'setNoCharge',
        'notifications_enabled' => 'setNotificationsEnabled',
        'created_on' => 'setCreatedOn',
        'created_by_id' => 'setCreatedById',
        'modified_on' => 'setModifiedOn',
        'tag_type_ids' => 'setTagTypeIds',
        'lead_call_id' => 'setLeadCallId',
        'booking_id' => 'setBookingId',
        'sold_by_id' => 'setSoldById',
        'external_data' => 'setExternalData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'job_number' => 'getJobNumber',
        'customer_id' => 'getCustomerId',
        'location_id' => 'getLocationId',
        'job_status' => 'getJobStatus',
        'completed_on' => 'getCompletedOn',
        'business_unit_id' => 'getBusinessUnitId',
        'job_type_id' => 'getJobTypeId',
        'priority' => 'getPriority',
        'campaign_id' => 'getCampaignId',
        'summary' => 'getSummary',
        'custom_fields' => 'getCustomFields',
        'appointment_count' => 'getAppointmentCount',
        'first_appointment_id' => 'getFirstAppointmentId',
        'last_appointment_id' => 'getLastAppointmentId',
        'recall_for_id' => 'getRecallForId',
        'warranty_id' => 'getWarrantyId',
        'job_generated_lead_source' => 'getJobGeneratedLeadSource',
        'no_charge' => 'getNoCharge',
        'notifications_enabled' => 'getNotificationsEnabled',
        'created_on' => 'getCreatedOn',
        'created_by_id' => 'getCreatedById',
        'modified_on' => 'getModifiedOn',
        'tag_type_ids' => 'getTagTypeIds',
        'lead_call_id' => 'getLeadCallId',
        'booking_id' => 'getBookingId',
        'sold_by_id' => 'getSoldById',
        'external_data' => 'getExternalData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['job_number'] = $data['job_number'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['location_id'] = $data['location_id'] ?? null;
        $this->container['job_status'] = $data['job_status'] ?? null;
        $this->container['completed_on'] = $data['completed_on'] ?? null;
        $this->container['business_unit_id'] = $data['business_unit_id'] ?? null;
        $this->container['job_type_id'] = $data['job_type_id'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['campaign_id'] = $data['campaign_id'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
        $this->container['appointment_count'] = $data['appointment_count'] ?? null;
        $this->container['first_appointment_id'] = $data['first_appointment_id'] ?? null;
        $this->container['last_appointment_id'] = $data['last_appointment_id'] ?? null;
        $this->container['recall_for_id'] = $data['recall_for_id'] ?? null;
        $this->container['warranty_id'] = $data['warranty_id'] ?? null;
        $this->container['job_generated_lead_source'] = $data['job_generated_lead_source'] ?? null;
        $this->container['no_charge'] = $data['no_charge'] ?? null;
        $this->container['notifications_enabled'] = $data['notifications_enabled'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['created_by_id'] = $data['created_by_id'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['tag_type_ids'] = $data['tag_type_ids'] ?? null;
        $this->container['lead_call_id'] = $data['lead_call_id'] ?? null;
        $this->container['booking_id'] = $data['booking_id'] ?? null;
        $this->container['sold_by_id'] = $data['sold_by_id'] ?? null;
        $this->container['external_data'] = $data['external_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['job_number'] === null) {
            $invalidProperties[] = "'job_number' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['location_id'] === null) {
            $invalidProperties[] = "'location_id' can't be null";
        }
        if ($this->container['job_status'] === null) {
            $invalidProperties[] = "'job_status' can't be null";
        }
        if ($this->container['business_unit_id'] === null) {
            $invalidProperties[] = "'business_unit_id' can't be null";
        }
        if ($this->container['job_type_id'] === null) {
            $invalidProperties[] = "'job_type_id' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['campaign_id'] === null) {
            $invalidProperties[] = "'campaign_id' can't be null";
        }
        if ($this->container['custom_fields'] === null) {
            $invalidProperties[] = "'custom_fields' can't be null";
        }
        if ($this->container['appointment_count'] === null) {
            $invalidProperties[] = "'appointment_count' can't be null";
        }
        if ($this->container['first_appointment_id'] === null) {
            $invalidProperties[] = "'first_appointment_id' can't be null";
        }
        if ($this->container['last_appointment_id'] === null) {
            $invalidProperties[] = "'last_appointment_id' can't be null";
        }
        if ($this->container['no_charge'] === null) {
            $invalidProperties[] = "'no_charge' can't be null";
        }
        if ($this->container['notifications_enabled'] === null) {
            $invalidProperties[] = "'notifications_enabled' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['created_by_id'] === null) {
            $invalidProperties[] = "'created_by_id' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['tag_type_ids'] === null) {
            $invalidProperties[] = "'tag_type_ids' can't be null";
        }
        if ($this->container['external_data'] === null) {
            $invalidProperties[] = "'external_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the job
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets job_number
     *
     * @return string
     */
    public function getJobNumber()
    {
        return $this->container['job_number'];
    }

    /**
     * Sets job_number
     *
     * @param string $job_number Job number
     *
     * @return self
     */
    public function setJobNumber($job_number)
    {
        $this->container['job_number'] = $job_number;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id ID of the job's customer
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id ID of the job's location
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets job_status
     *
     * @return string
     */
    public function getJobStatus()
    {
        return $this->container['job_status'];
    }

    /**
     * Sets job_status
     *
     * @param string $job_status Status of the job
     *
     * @return self
     */
    public function setJobStatus($job_status)
    {
        $this->container['job_status'] = $job_status;

        return $this;
    }

    /**
     * Gets completed_on
     *
     * @return \DateTime|null
     */
    public function getCompletedOn()
    {
        return $this->container['completed_on'];
    }

    /**
     * Sets completed_on
     *
     * @param \DateTime|null $completed_on Date/time (in UTC) when the job was completed
     *
     * @return self
     */
    public function setCompletedOn($completed_on)
    {
        $this->container['completed_on'] = $completed_on;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int $business_unit_id ID of the job's business unit
     *
     * @return self
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets job_type_id
     *
     * @return int
     */
    public function getJobTypeId()
    {
        return $this->container['job_type_id'];
    }

    /**
     * Sets job_type_id
     *
     * @param int $job_type_id ID of job type
     *
     * @return self
     */
    public function setJobTypeId($job_type_id)
    {
        $this->container['job_type_id'] = $job_type_id;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string $priority Priority of the job
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param int $campaign_id ID of the job's campaign
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary Job summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \CompWright\ServiceTitan\Model\CustomFieldApiModel[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \CompWright\ServiceTitan\Model\CustomFieldApiModel[] $custom_fields Custom fields on the job
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets appointment_count
     *
     * @return int
     */
    public function getAppointmentCount()
    {
        return $this->container['appointment_count'];
    }

    /**
     * Sets appointment_count
     *
     * @param int $appointment_count Number of appointments on the job
     *
     * @return self
     */
    public function setAppointmentCount($appointment_count)
    {
        $this->container['appointment_count'] = $appointment_count;

        return $this;
    }

    /**
     * Gets first_appointment_id
     *
     * @return int
     */
    public function getFirstAppointmentId()
    {
        return $this->container['first_appointment_id'];
    }

    /**
     * Sets first_appointment_id
     *
     * @param int $first_appointment_id ID of the first appointment on the job
     *
     * @return self
     */
    public function setFirstAppointmentId($first_appointment_id)
    {
        $this->container['first_appointment_id'] = $first_appointment_id;

        return $this;
    }

    /**
     * Gets last_appointment_id
     *
     * @return int
     */
    public function getLastAppointmentId()
    {
        return $this->container['last_appointment_id'];
    }

    /**
     * Sets last_appointment_id
     *
     * @param int $last_appointment_id ID of the last appointment on the job
     *
     * @return self
     */
    public function setLastAppointmentId($last_appointment_id)
    {
        $this->container['last_appointment_id'] = $last_appointment_id;

        return $this;
    }

    /**
     * Gets recall_for_id
     *
     * @return int|null
     */
    public function getRecallForId()
    {
        return $this->container['recall_for_id'];
    }

    /**
     * Sets recall_for_id
     *
     * @param int|null $recall_for_id ID of the job for which this job is a recall
     *
     * @return self
     */
    public function setRecallForId($recall_for_id)
    {
        $this->container['recall_for_id'] = $recall_for_id;

        return $this;
    }

    /**
     * Gets warranty_id
     *
     * @return int|null
     */
    public function getWarrantyId()
    {
        return $this->container['warranty_id'];
    }

    /**
     * Sets warranty_id
     *
     * @param int|null $warranty_id ID of the job for which this job is a warranty
     *
     * @return self
     */
    public function setWarrantyId($warranty_id)
    {
        $this->container['warranty_id'] = $warranty_id;

        return $this;
    }

    /**
     * Gets job_generated_lead_source
     *
     * @return OneOfJpmJobGeneratedLeadSource|null
     */
    public function getJobGeneratedLeadSource()
    {
        return $this->container['job_generated_lead_source'];
    }

    /**
     * Sets job_generated_lead_source
     *
     * @param OneOfJpmJobGeneratedLeadSource|null $job_generated_lead_source Object that contains:             JobId: ID of the job from which this job was generated             EmployeeId: ID of the office user or technician
     *
     * @return self
     */
    public function setJobGeneratedLeadSource($job_generated_lead_source)
    {
        $this->container['job_generated_lead_source'] = $job_generated_lead_source;

        return $this;
    }

    /**
     * Gets no_charge
     *
     * @return bool
     */
    public function getNoCharge()
    {
        return $this->container['no_charge'];
    }

    /**
     * Sets no_charge
     *
     * @param bool $no_charge Whether the job is a no-charge job
     *
     * @return self
     */
    public function setNoCharge($no_charge)
    {
        $this->container['no_charge'] = $no_charge;

        return $this;
    }

    /**
     * Gets notifications_enabled
     *
     * @return bool
     */
    public function getNotificationsEnabled()
    {
        return $this->container['notifications_enabled'];
    }

    /**
     * Sets notifications_enabled
     *
     * @param bool $notifications_enabled Whether notifications will be sent to customers
     *
     * @return self
     */
    public function setNotificationsEnabled($notifications_enabled)
    {
        $this->container['notifications_enabled'] = $notifications_enabled;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on Date/time (in UTC) when the job was created
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int $created_by_id ID of the user who created the job
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on Date/time (in UTC) when job was last modified
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets tag_type_ids
     *
     * @return int[]
     */
    public function getTagTypeIds()
    {
        return $this->container['tag_type_ids'];
    }

    /**
     * Sets tag_type_ids
     *
     * @param int[] $tag_type_ids Tags on the job
     *
     * @return self
     */
    public function setTagTypeIds($tag_type_ids)
    {
        $this->container['tag_type_ids'] = $tag_type_ids;

        return $this;
    }

    /**
     * Gets lead_call_id
     *
     * @return int|null
     */
    public function getLeadCallId()
    {
        return $this->container['lead_call_id'];
    }

    /**
     * Sets lead_call_id
     *
     * @param int|null $lead_call_id ID of the Call that resulted in this job
     *
     * @return self
     */
    public function setLeadCallId($lead_call_id)
    {
        $this->container['lead_call_id'] = $lead_call_id;

        return $this;
    }

    /**
     * Gets booking_id
     *
     * @return int|null
     */
    public function getBookingId()
    {
        return $this->container['booking_id'];
    }

    /**
     * Sets booking_id
     *
     * @param int|null $booking_id ID of the Booking that resulted in this job
     *
     * @return self
     */
    public function setBookingId($booking_id)
    {
        $this->container['booking_id'] = $booking_id;

        return $this;
    }

    /**
     * Gets sold_by_id
     *
     * @return int|null
     */
    public function getSoldById()
    {
        return $this->container['sold_by_id'];
    }

    /**
     * Sets sold_by_id
     *
     * @param int|null $sold_by_id ID of the Technician that sold this job
     *
     * @return self
     */
    public function setSoldById($sold_by_id)
    {
        $this->container['sold_by_id'] = $sold_by_id;

        return $this;
    }

    /**
     * Gets external_data
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2ExternalDataModel[]
     */
    public function getExternalData()
    {
        return $this->container['external_data'];
    }

    /**
     * Sets external_data
     *
     * @param \CompWright\ServiceTitan\Model\CrmV2ExternalDataModel[] $external_data List of external data attached to this job, that corresponds to the application guid provided in the request.
     *
     * @return self
     */
    public function setExternalData($external_data)
    {
        $this->container['external_data'] = $external_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


