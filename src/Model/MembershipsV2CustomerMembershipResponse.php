<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class MembershipsV2CustomerMembershipResponse
{
    /**
     * Customer membership ID.
     *
     * @var int
     */
    protected $id;
    /**
     * When customer membership was created.
     *
     * @var \DateTime
     */
    protected $createdOn;
    /**
     * ID of the user that created this membership.
     *
     * @var int|null
     */
    protected $createdById;
    /**
     * When customer membership was last modified.
     *
     * @var \DateTime
     */
    protected $modifiedOn;
    /**
     * Follow up on date.
     *
     * @var \DateTime
     */
    protected $followUpOn;
    /**
     * When customer membership was or will be cancelled.
     *
     * @var \DateTime|null
     */
    protected $cancellationDate;
    /**
     * Beginning date of customer membership.
     *
     * @var \DateTime|null
     */
    protected $from;
    /**
     * Next scheduled billing date.
     *
     * @var \DateTime|null
     */
    protected $nextScheduledBillDate;
    /**
     * End date of customer membership.
     *
     * @var \DateTime|null
     */
    protected $to;
    /**
     * How often the customer membership is billed.
     *
     * @var mixed
     */
    protected $billingFrequency;
    /**
     * Renewal billing frequency.
     *
     * @var mixed|null
     */
    protected $renewalBillingFrequency;
    /**
     * Current status of the customer membership.
     *
     * @var mixed
     */
    protected $status;
    /**
     * Follow-up status of the customer membership.
     *
     * @var mixed
     */
    protected $followUpStatus;
    /**
     * Whether customer membership is active.
     *
     * @var bool
     */
    protected $active;
    /**
     * Initial deferred revenue.
     *
     * @var float
     */
    protected $initialDeferredRevenue;
    /**
     * Duration of customer membership in months.
     *
     * @var int|null
     */
    protected $duration;
    /**
     * Renewal duration.
     *
     * @var int|null
     */
    protected $renewalDuration;
    /**
     * Business unit ID.
     *
     * @var int
     */
    protected $businessUnitId;
    /**
     * Customer ID of membership.
     *
     * @var int
     */
    protected $customerId;
    /**
     * The membership type ID of the customer membership.
     *
     * @var int
     */
    protected $membershipTypeId;
    /**
     * ID of the user that activated this membership.
     *
     * @var int|null
     */
    protected $activatedById;
    /**
     * ID of the invoice item that is the sale task of this membership.
     *
     * @var int|null
     */
    protected $activatedFromId;
    /**
     * ID of the invoice template used for membership billing.
     *
     * @var int|null
     */
    protected $billingTemplateId;
    /**
     * Cancellation balance invoice ID.
     *
     * @var int|null
     */
    protected $cancellationBalanceInvoiceId;
    /**
     * ID of the invoice that either charged or refunded the deferred revenue balance of the customer membership.
     *
     * @var int|null
     */
    protected $cancellationInvoiceId;
    /**
     * ID of custom followup status.
     *
     * @var int|null
     */
    protected $followUpCustomStatusId;
    /**
     * ID of location for this customer membership.
     *
     * @var int|null
     */
    protected $locationId;
    /**
     * Preferred payment method ID.
     *
     * @var int|null
     */
    protected $paymentMethodId;
    /**
     * ID of payment type.
     *
     * @var int|null
     */
    protected $paymentTypeId;
    /**
     * Recurring Location ID.
     *
     * @var int|null
     */
    protected $recurringLocationId;
    /**
     * Task ID that renews this membership.
     *
     * @var int|null
     */
    protected $renewalMembershipTaskId;
    /**
     * ID of the user that renewed this membership.
     *
     * @var int|null
     */
    protected $renewedById;
    /**
     * ID of the user that was credited for the sale of this membership.
     *
     * @var int|null
     */
    protected $soldById;
    /**
     * Customer Purchase Order.
     *
     * @var string|null
     */
    protected $customerPo;
    /**
     * Internal import ID label.
     *
     * @var string|null
     */
    protected $importId;
    /**
     * Memo for customer membership.
     *
     * @var string|null
     */
    protected $memo;

    /**
     * Customer membership ID.
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Customer membership ID.
     */
    public function setId(int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * When customer membership was created.
     */
    public function getCreatedOn(): \DateTime
    {
        return $this->createdOn;
    }

    /**
     * When customer membership was created.
     */
    public function setCreatedOn(\DateTime $createdOn): self
    {
        $this->createdOn = $createdOn;

        return $this;
    }

    /**
     * ID of the user that created this membership.
     */
    public function getCreatedById(): ?int
    {
        return $this->createdById;
    }

    /**
     * ID of the user that created this membership.
     */
    public function setCreatedById(?int $createdById): self
    {
        $this->createdById = $createdById;

        return $this;
    }

    /**
     * When customer membership was last modified.
     */
    public function getModifiedOn(): \DateTime
    {
        return $this->modifiedOn;
    }

    /**
     * When customer membership was last modified.
     */
    public function setModifiedOn(\DateTime $modifiedOn): self
    {
        $this->modifiedOn = $modifiedOn;

        return $this;
    }

    /**
     * Follow up on date.
     */
    public function getFollowUpOn(): \DateTime
    {
        return $this->followUpOn;
    }

    /**
     * Follow up on date.
     */
    public function setFollowUpOn(\DateTime $followUpOn): self
    {
        $this->followUpOn = $followUpOn;

        return $this;
    }

    /**
     * When customer membership was or will be cancelled.
     */
    public function getCancellationDate(): ?\DateTime
    {
        return $this->cancellationDate;
    }

    /**
     * When customer membership was or will be cancelled.
     */
    public function setCancellationDate(?\DateTime $cancellationDate): self
    {
        $this->cancellationDate = $cancellationDate;

        return $this;
    }

    /**
     * Beginning date of customer membership.
     */
    public function getFrom(): ?\DateTime
    {
        return $this->from;
    }

    /**
     * Beginning date of customer membership.
     */
    public function setFrom(?\DateTime $from): self
    {
        $this->from = $from;

        return $this;
    }

    /**
     * Next scheduled billing date.
     */
    public function getNextScheduledBillDate(): ?\DateTime
    {
        return $this->nextScheduledBillDate;
    }

    /**
     * Next scheduled billing date.
     */
    public function setNextScheduledBillDate(?\DateTime $nextScheduledBillDate): self
    {
        $this->nextScheduledBillDate = $nextScheduledBillDate;

        return $this;
    }

    /**
     * End date of customer membership.
     */
    public function getTo(): ?\DateTime
    {
        return $this->to;
    }

    /**
     * End date of customer membership.
     */
    public function setTo(?\DateTime $to): self
    {
        $this->to = $to;

        return $this;
    }

    /**
     * How often the customer membership is billed.
     *
     * @return mixed
     */
    public function getBillingFrequency()
    {
        return $this->billingFrequency;
    }

    /**
     * How often the customer membership is billed.
     *
     * @param mixed $billingFrequency
     */
    public function setBillingFrequency($billingFrequency): self
    {
        $this->billingFrequency = $billingFrequency;

        return $this;
    }

    /**
     * Renewal billing frequency.
     *
     * @return mixed
     */
    public function getRenewalBillingFrequency()
    {
        return $this->renewalBillingFrequency;
    }

    /**
     * Renewal billing frequency.
     *
     * @param mixed $renewalBillingFrequency
     */
    public function setRenewalBillingFrequency($renewalBillingFrequency): self
    {
        $this->renewalBillingFrequency = $renewalBillingFrequency;

        return $this;
    }

    /**
     * Current status of the customer membership.
     *
     * @return mixed
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Current status of the customer membership.
     *
     * @param mixed $status
     */
    public function setStatus($status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Follow-up status of the customer membership.
     *
     * @return mixed
     */
    public function getFollowUpStatus()
    {
        return $this->followUpStatus;
    }

    /**
     * Follow-up status of the customer membership.
     *
     * @param mixed $followUpStatus
     */
    public function setFollowUpStatus($followUpStatus): self
    {
        $this->followUpStatus = $followUpStatus;

        return $this;
    }

    /**
     * Whether customer membership is active.
     */
    public function getActive(): bool
    {
        return $this->active;
    }

    /**
     * Whether customer membership is active.
     */
    public function setActive(bool $active): self
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Initial deferred revenue.
     */
    public function getInitialDeferredRevenue(): float
    {
        return $this->initialDeferredRevenue;
    }

    /**
     * Initial deferred revenue.
     */
    public function setInitialDeferredRevenue(float $initialDeferredRevenue): self
    {
        $this->initialDeferredRevenue = $initialDeferredRevenue;

        return $this;
    }

    /**
     * Duration of customer membership in months.
     */
    public function getDuration(): ?int
    {
        return $this->duration;
    }

    /**
     * Duration of customer membership in months.
     */
    public function setDuration(?int $duration): self
    {
        $this->duration = $duration;

        return $this;
    }

    /**
     * Renewal duration.
     */
    public function getRenewalDuration(): ?int
    {
        return $this->renewalDuration;
    }

    /**
     * Renewal duration.
     */
    public function setRenewalDuration(?int $renewalDuration): self
    {
        $this->renewalDuration = $renewalDuration;

        return $this;
    }

    /**
     * Business unit ID.
     */
    public function getBusinessUnitId(): int
    {
        return $this->businessUnitId;
    }

    /**
     * Business unit ID.
     */
    public function setBusinessUnitId(int $businessUnitId): self
    {
        $this->businessUnitId = $businessUnitId;

        return $this;
    }

    /**
     * Customer ID of membership.
     */
    public function getCustomerId(): int
    {
        return $this->customerId;
    }

    /**
     * Customer ID of membership.
     */
    public function setCustomerId(int $customerId): self
    {
        $this->customerId = $customerId;

        return $this;
    }

    /**
     * The membership type ID of the customer membership.
     */
    public function getMembershipTypeId(): int
    {
        return $this->membershipTypeId;
    }

    /**
     * The membership type ID of the customer membership.
     */
    public function setMembershipTypeId(int $membershipTypeId): self
    {
        $this->membershipTypeId = $membershipTypeId;

        return $this;
    }

    /**
     * ID of the user that activated this membership.
     */
    public function getActivatedById(): ?int
    {
        return $this->activatedById;
    }

    /**
     * ID of the user that activated this membership.
     */
    public function setActivatedById(?int $activatedById): self
    {
        $this->activatedById = $activatedById;

        return $this;
    }

    /**
     * ID of the invoice item that is the sale task of this membership.
     */
    public function getActivatedFromId(): ?int
    {
        return $this->activatedFromId;
    }

    /**
     * ID of the invoice item that is the sale task of this membership.
     */
    public function setActivatedFromId(?int $activatedFromId): self
    {
        $this->activatedFromId = $activatedFromId;

        return $this;
    }

    /**
     * ID of the invoice template used for membership billing.
     */
    public function getBillingTemplateId(): ?int
    {
        return $this->billingTemplateId;
    }

    /**
     * ID of the invoice template used for membership billing.
     */
    public function setBillingTemplateId(?int $billingTemplateId): self
    {
        $this->billingTemplateId = $billingTemplateId;

        return $this;
    }

    /**
     * Cancellation balance invoice ID.
     */
    public function getCancellationBalanceInvoiceId(): ?int
    {
        return $this->cancellationBalanceInvoiceId;
    }

    /**
     * Cancellation balance invoice ID.
     */
    public function setCancellationBalanceInvoiceId(?int $cancellationBalanceInvoiceId): self
    {
        $this->cancellationBalanceInvoiceId = $cancellationBalanceInvoiceId;

        return $this;
    }

    /**
     * ID of the invoice that either charged or refunded the deferred revenue balance of the customer membership.
     */
    public function getCancellationInvoiceId(): ?int
    {
        return $this->cancellationInvoiceId;
    }

    /**
     * ID of the invoice that either charged or refunded the deferred revenue balance of the customer membership.
     */
    public function setCancellationInvoiceId(?int $cancellationInvoiceId): self
    {
        $this->cancellationInvoiceId = $cancellationInvoiceId;

        return $this;
    }

    /**
     * ID of custom followup status.
     */
    public function getFollowUpCustomStatusId(): ?int
    {
        return $this->followUpCustomStatusId;
    }

    /**
     * ID of custom followup status.
     */
    public function setFollowUpCustomStatusId(?int $followUpCustomStatusId): self
    {
        $this->followUpCustomStatusId = $followUpCustomStatusId;

        return $this;
    }

    /**
     * ID of location for this customer membership.
     */
    public function getLocationId(): ?int
    {
        return $this->locationId;
    }

    /**
     * ID of location for this customer membership.
     */
    public function setLocationId(?int $locationId): self
    {
        $this->locationId = $locationId;

        return $this;
    }

    /**
     * Preferred payment method ID.
     */
    public function getPaymentMethodId(): ?int
    {
        return $this->paymentMethodId;
    }

    /**
     * Preferred payment method ID.
     */
    public function setPaymentMethodId(?int $paymentMethodId): self
    {
        $this->paymentMethodId = $paymentMethodId;

        return $this;
    }

    /**
     * ID of payment type.
     */
    public function getPaymentTypeId(): ?int
    {
        return $this->paymentTypeId;
    }

    /**
     * ID of payment type.
     */
    public function setPaymentTypeId(?int $paymentTypeId): self
    {
        $this->paymentTypeId = $paymentTypeId;

        return $this;
    }

    /**
     * Recurring Location ID.
     */
    public function getRecurringLocationId(): ?int
    {
        return $this->recurringLocationId;
    }

    /**
     * Recurring Location ID.
     */
    public function setRecurringLocationId(?int $recurringLocationId): self
    {
        $this->recurringLocationId = $recurringLocationId;

        return $this;
    }

    /**
     * Task ID that renews this membership.
     */
    public function getRenewalMembershipTaskId(): ?int
    {
        return $this->renewalMembershipTaskId;
    }

    /**
     * Task ID that renews this membership.
     */
    public function setRenewalMembershipTaskId(?int $renewalMembershipTaskId): self
    {
        $this->renewalMembershipTaskId = $renewalMembershipTaskId;

        return $this;
    }

    /**
     * ID of the user that renewed this membership.
     */
    public function getRenewedById(): ?int
    {
        return $this->renewedById;
    }

    /**
     * ID of the user that renewed this membership.
     */
    public function setRenewedById(?int $renewedById): self
    {
        $this->renewedById = $renewedById;

        return $this;
    }

    /**
     * ID of the user that was credited for the sale of this membership.
     */
    public function getSoldById(): ?int
    {
        return $this->soldById;
    }

    /**
     * ID of the user that was credited for the sale of this membership.
     */
    public function setSoldById(?int $soldById): self
    {
        $this->soldById = $soldById;

        return $this;
    }

    /**
     * Customer Purchase Order.
     */
    public function getCustomerPo(): ?string
    {
        return $this->customerPo;
    }

    /**
     * Customer Purchase Order.
     */
    public function setCustomerPo(?string $customerPo): self
    {
        $this->customerPo = $customerPo;

        return $this;
    }

    /**
     * Internal import ID label.
     */
    public function getImportId(): ?string
    {
        return $this->importId;
    }

    /**
     * Internal import ID label.
     */
    public function setImportId(?string $importId): self
    {
        $this->importId = $importId;

        return $this;
    }

    /**
     * Memo for customer membership.
     */
    public function getMemo(): ?string
    {
        return $this->memo;
    }

    /**
     * Memo for customer membership.
     */
    public function setMemo(?string $memo): self
    {
        $this->memo = $memo;

        return $this;
    }
}
