<?php
/**
 * MembershipsV2RecurringServiceTypeResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Memberships
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * MembershipsV2RecurringServiceTypeResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MembershipsV2RecurringServiceTypeResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Memberships.V2.RecurringServiceTypeResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'created_on' => '\DateTime',
        'created_by_id' => 'int',
        'modified_on' => '\DateTime',
        'active' => 'bool',
        'recurrence_type' => 'OneOfMembershipsV2ServiceRecurrenceType',
        'recurrence_interval' => 'int',
        'recurrence_months' => '\CompWright\ServiceTitan\Model\MembershipsV2Month[]',
        'duration_type' => 'OneOfMembershipsV2ServiceRecurrenceDuration',
        'duration_length' => 'int',
        'invoice_template_id' => 'int',
        'business_unit_id' => 'int',
        'job_type_id' => 'int',
        'priority' => 'OneOfMembershipsV2Priority',
        'campaign_id' => 'int',
        'job_summary' => 'string',
        'name' => 'string',
        'import_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'created_on' => 'date-time',
        'created_by_id' => 'int64',
        'modified_on' => 'date-time',
        'active' => null,
        'recurrence_type' => null,
        'recurrence_interval' => 'int32',
        'recurrence_months' => null,
        'duration_type' => null,
        'duration_length' => 'int32',
        'invoice_template_id' => 'int64',
        'business_unit_id' => 'int64',
        'job_type_id' => 'int64',
        'priority' => null,
        'campaign_id' => 'int64',
        'job_summary' => null,
        'name' => null,
        'import_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_on' => 'createdOn',
        'created_by_id' => 'createdById',
        'modified_on' => 'modifiedOn',
        'active' => 'active',
        'recurrence_type' => 'recurrenceType',
        'recurrence_interval' => 'recurrenceInterval',
        'recurrence_months' => 'recurrenceMonths',
        'duration_type' => 'durationType',
        'duration_length' => 'durationLength',
        'invoice_template_id' => 'invoiceTemplateId',
        'business_unit_id' => 'businessUnitId',
        'job_type_id' => 'jobTypeId',
        'priority' => 'priority',
        'campaign_id' => 'campaignId',
        'job_summary' => 'jobSummary',
        'name' => 'name',
        'import_id' => 'importId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_on' => 'setCreatedOn',
        'created_by_id' => 'setCreatedById',
        'modified_on' => 'setModifiedOn',
        'active' => 'setActive',
        'recurrence_type' => 'setRecurrenceType',
        'recurrence_interval' => 'setRecurrenceInterval',
        'recurrence_months' => 'setRecurrenceMonths',
        'duration_type' => 'setDurationType',
        'duration_length' => 'setDurationLength',
        'invoice_template_id' => 'setInvoiceTemplateId',
        'business_unit_id' => 'setBusinessUnitId',
        'job_type_id' => 'setJobTypeId',
        'priority' => 'setPriority',
        'campaign_id' => 'setCampaignId',
        'job_summary' => 'setJobSummary',
        'name' => 'setName',
        'import_id' => 'setImportId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_on' => 'getCreatedOn',
        'created_by_id' => 'getCreatedById',
        'modified_on' => 'getModifiedOn',
        'active' => 'getActive',
        'recurrence_type' => 'getRecurrenceType',
        'recurrence_interval' => 'getRecurrenceInterval',
        'recurrence_months' => 'getRecurrenceMonths',
        'duration_type' => 'getDurationType',
        'duration_length' => 'getDurationLength',
        'invoice_template_id' => 'getInvoiceTemplateId',
        'business_unit_id' => 'getBusinessUnitId',
        'job_type_id' => 'getJobTypeId',
        'priority' => 'getPriority',
        'campaign_id' => 'getCampaignId',
        'job_summary' => 'getJobSummary',
        'name' => 'getName',
        'import_id' => 'getImportId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['created_by_id'] = $data['created_by_id'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['recurrence_type'] = $data['recurrence_type'] ?? null;
        $this->container['recurrence_interval'] = $data['recurrence_interval'] ?? null;
        $this->container['recurrence_months'] = $data['recurrence_months'] ?? null;
        $this->container['duration_type'] = $data['duration_type'] ?? null;
        $this->container['duration_length'] = $data['duration_length'] ?? null;
        $this->container['invoice_template_id'] = $data['invoice_template_id'] ?? null;
        $this->container['business_unit_id'] = $data['business_unit_id'] ?? null;
        $this->container['job_type_id'] = $data['job_type_id'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['campaign_id'] = $data['campaign_id'] ?? null;
        $this->container['job_summary'] = $data['job_summary'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['import_id'] = $data['import_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['recurrence_type'] === null) {
            $invalidProperties[] = "'recurrence_type' can't be null";
        }
        if ($this->container['recurrence_interval'] === null) {
            $invalidProperties[] = "'recurrence_interval' can't be null";
        }
        if ($this->container['recurrence_months'] === null) {
            $invalidProperties[] = "'recurrence_months' can't be null";
        }
        if ($this->container['duration_type'] === null) {
            $invalidProperties[] = "'duration_type' can't be null";
        }
        if ($this->container['duration_length'] === null) {
            $invalidProperties[] = "'duration_length' can't be null";
        }
        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Recurring service type ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on When recurring service type was created
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return int|null
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param int|null $created_by_id ID of the user that created this recurring service type
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on When recurring service type was modified
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Whether recurring service type is active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets recurrence_type
     *
     * @return OneOfMembershipsV2ServiceRecurrenceType
     */
    public function getRecurrenceType()
    {
        return $this->container['recurrence_type'];
    }

    /**
     * Sets recurrence_type
     *
     * @param OneOfMembershipsV2ServiceRecurrenceType $recurrence_type The recurrence type (e.g. Daily, Weekly, Monthly)
     *
     * @return self
     */
    public function setRecurrenceType($recurrence_type)
    {
        $this->container['recurrence_type'] = $recurrence_type;

        return $this;
    }

    /**
     * Gets recurrence_interval
     *
     * @return int
     */
    public function getRecurrenceInterval()
    {
        return $this->container['recurrence_interval'];
    }

    /**
     * Sets recurrence_interval
     *
     * @param int $recurrence_interval The recurrence interval for the given recurrence type
     *
     * @return self
     */
    public function setRecurrenceInterval($recurrence_interval)
    {
        $this->container['recurrence_interval'] = $recurrence_interval;

        return $this;
    }

    /**
     * Gets recurrence_months
     *
     * @return \CompWright\ServiceTitan\Model\MembershipsV2Month[]
     */
    public function getRecurrenceMonths()
    {
        return $this->container['recurrence_months'];
    }

    /**
     * Sets recurrence_months
     *
     * @param \CompWright\ServiceTitan\Model\MembershipsV2Month[] $recurrence_months A list of months when the recurring service occurs, if it is a seasonal recurrence type
     *
     * @return self
     */
    public function setRecurrenceMonths($recurrence_months)
    {
        $this->container['recurrence_months'] = $recurrence_months;

        return $this;
    }

    /**
     * Gets duration_type
     *
     * @return OneOfMembershipsV2ServiceRecurrenceDuration
     */
    public function getDurationType()
    {
        return $this->container['duration_type'];
    }

    /**
     * Sets duration_type
     *
     * @param OneOfMembershipsV2ServiceRecurrenceDuration $duration_type The recurrence duration type
     *
     * @return self
     */
    public function setDurationType($duration_type)
    {
        $this->container['duration_type'] = $duration_type;

        return $this;
    }

    /**
     * Gets duration_length
     *
     * @return int
     */
    public function getDurationLength()
    {
        return $this->container['duration_length'];
    }

    /**
     * Sets duration_length
     *
     * @param int $duration_length The recurrence duration length (number of events)
     *
     * @return self
     */
    public function setDurationLength($duration_length)
    {
        $this->container['duration_length'] = $duration_length;

        return $this;
    }

    /**
     * Gets invoice_template_id
     *
     * @return int|null
     */
    public function getInvoiceTemplateId()
    {
        return $this->container['invoice_template_id'];
    }

    /**
     * Sets invoice_template_id
     *
     * @param int|null $invoice_template_id Invoice template ID
     *
     * @return self
     */
    public function setInvoiceTemplateId($invoice_template_id)
    {
        $this->container['invoice_template_id'] = $invoice_template_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int|null
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int|null $business_unit_id Business unit ID
     *
     * @return self
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets job_type_id
     *
     * @return int|null
     */
    public function getJobTypeId()
    {
        return $this->container['job_type_id'];
    }

    /**
     * Sets job_type_id
     *
     * @param int|null $job_type_id Job type ID
     *
     * @return self
     */
    public function setJobTypeId($job_type_id)
    {
        $this->container['job_type_id'] = $job_type_id;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return OneOfMembershipsV2Priority
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param OneOfMembershipsV2Priority $priority Priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return int|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param int|null $campaign_id Campaign ID
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets job_summary
     *
     * @return string|null
     */
    public function getJobSummary()
    {
        return $this->container['job_summary'];
    }

    /**
     * Sets job_summary
     *
     * @param string|null $job_summary Job summary
     *
     * @return self
     */
    public function setJobSummary($job_summary)
    {
        $this->container['job_summary'] = $job_summary;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Recurring service type name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets import_id
     *
     * @return string|null
     */
    public function getImportId()
    {
        return $this->container['import_id'];
    }

    /**
     * Sets import_id
     *
     * @param string|null $import_id Import ID
     *
     * @return self
     */
    public function setImportId($import_id)
    {
        $this->container['import_id'] = $import_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


