<?php
/**
 * DispatchV2ZoneResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Dispatch
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * DispatchV2ZoneResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DispatchV2ZoneResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dispatch.V2.ZoneResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'active' => 'bool',
        'name' => 'string',
        'zips' => 'string[]',
        'cities' => 'string[]',
        'territory_numbers' => 'string[]',
        'locn_numbers' => 'string[]',
        'created_by' => 'int',
        'created_on' => '\DateTime',
        'modified_on' => '\DateTime',
        'service_days_enabled' => 'bool',
        'service_days' => 'string[]',
        'business_units' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'active' => null,
        'name' => null,
        'zips' => null,
        'cities' => null,
        'territory_numbers' => null,
        'locn_numbers' => null,
        'created_by' => 'int64',
        'created_on' => 'date-time',
        'modified_on' => 'date-time',
        'service_days_enabled' => null,
        'service_days' => null,
        'business_units' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'active' => 'active',
        'name' => 'name',
        'zips' => 'zips',
        'cities' => 'cities',
        'territory_numbers' => 'territoryNumbers',
        'locn_numbers' => 'locnNumbers',
        'created_by' => 'createdBy',
        'created_on' => 'createdOn',
        'modified_on' => 'modifiedOn',
        'service_days_enabled' => 'serviceDaysEnabled',
        'service_days' => 'serviceDays',
        'business_units' => 'businessUnits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'active' => 'setActive',
        'name' => 'setName',
        'zips' => 'setZips',
        'cities' => 'setCities',
        'territory_numbers' => 'setTerritoryNumbers',
        'locn_numbers' => 'setLocnNumbers',
        'created_by' => 'setCreatedBy',
        'created_on' => 'setCreatedOn',
        'modified_on' => 'setModifiedOn',
        'service_days_enabled' => 'setServiceDaysEnabled',
        'service_days' => 'setServiceDays',
        'business_units' => 'setBusinessUnits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'active' => 'getActive',
        'name' => 'getName',
        'zips' => 'getZips',
        'cities' => 'getCities',
        'territory_numbers' => 'getTerritoryNumbers',
        'locn_numbers' => 'getLocnNumbers',
        'created_by' => 'getCreatedBy',
        'created_on' => 'getCreatedOn',
        'modified_on' => 'getModifiedOn',
        'service_days_enabled' => 'getServiceDaysEnabled',
        'service_days' => 'getServiceDays',
        'business_units' => 'getBusinessUnits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['zips'] = $data['zips'] ?? null;
        $this->container['cities'] = $data['cities'] ?? null;
        $this->container['territory_numbers'] = $data['territory_numbers'] ?? null;
        $this->container['locn_numbers'] = $data['locn_numbers'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['service_days_enabled'] = $data['service_days_enabled'] ?? null;
        $this->container['service_days'] = $data['service_days'] ?? null;
        $this->container['business_units'] = $data['business_units'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['service_days_enabled'] === null) {
            $invalidProperties[] = "'service_days_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique id of the zone record
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Whether the zone is enabled
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Descriptive identifier
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets zips
     *
     * @return string[]|null
     */
    public function getZips()
    {
        return $this->container['zips'];
    }

    /**
     * Sets zips
     *
     * @param string[]|null $zips A list of assigned zip codes to the zone
     *
     * @return self
     */
    public function setZips($zips)
    {
        $this->container['zips'] = $zips;

        return $this;
    }

    /**
     * Gets cities
     *
     * @return string[]|null
     */
    public function getCities()
    {
        return $this->container['cities'];
    }

    /**
     * Sets cities
     *
     * @param string[]|null $cities A list of assigned cities to the zone
     *
     * @return self
     */
    public function setCities($cities)
    {
        $this->container['cities'] = $cities;

        return $this;
    }

    /**
     * Gets territory_numbers
     *
     * @return string[]|null
     */
    public function getTerritoryNumbers()
    {
        return $this->container['territory_numbers'];
    }

    /**
     * Sets territory_numbers
     *
     * @param string[]|null $territory_numbers A list of assigned territory numbers to the zone
     *
     * @return self
     */
    public function setTerritoryNumbers($territory_numbers)
    {
        $this->container['territory_numbers'] = $territory_numbers;

        return $this;
    }

    /**
     * Gets locn_numbers
     *
     * @return string[]|null
     */
    public function getLocnNumbers()
    {
        return $this->container['locn_numbers'];
    }

    /**
     * Sets locn_numbers
     *
     * @param string[]|null $locn_numbers A list of assigned LOCN numbers to the zone
     *
     * @return self
     */
    public function setLocnNumbers($locn_numbers)
    {
        $this->container['locn_numbers'] = $locn_numbers;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int $created_by User ID who created the zone
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on Date/time (in UTC) the zone was created
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on Date/time (in UTC) the zone was last modified
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets service_days_enabled
     *
     * @return bool
     */
    public function getServiceDaysEnabled()
    {
        return $this->container['service_days_enabled'];
    }

    /**
     * Sets service_days_enabled
     *
     * @param bool $service_days_enabled Whether the service days option is enabled
     *
     * @return self
     */
    public function setServiceDaysEnabled($service_days_enabled)
    {
        $this->container['service_days_enabled'] = $service_days_enabled;

        return $this;
    }

    /**
     * Gets service_days
     *
     * @return string[]|null
     */
    public function getServiceDays()
    {
        return $this->container['service_days'];
    }

    /**
     * Sets service_days
     *
     * @param string[]|null $service_days A list of assigned service days
     *
     * @return self
     */
    public function setServiceDays($service_days)
    {
        $this->container['service_days'] = $service_days;

        return $this;
    }

    /**
     * Gets business_units
     *
     * @return int[]|null
     */
    public function getBusinessUnits()
    {
        return $this->container['business_units'];
    }

    /**
     * Sets business_units
     *
     * @param int[]|null $business_units A list of assigned business units
     *
     * @return self
     */
    public function setBusinessUnits($business_units)
    {
        $this->container['business_units'] = $business_units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


