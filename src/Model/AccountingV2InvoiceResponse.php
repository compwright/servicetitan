<?php
/**
 * AccountingV2InvoiceResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * AccountingV2InvoiceResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccountingV2InvoiceResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Accounting.V2.InvoiceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'sync_status' => 'string',
        'summary' => 'string',
        'reference_number' => 'string',
        'invoice_date' => '\DateTime',
        'due_date' => '\DateTime',
        'sub_total' => 'string',
        'sales_tax' => 'string',
        'sales_tax_code' => 'OneOfAccountingV2SalesTaxResponse',
        'total' => 'string',
        'balance' => 'string',
        'customer' => 'OneOfAccountingV2NamedFieldResponse',
        'customer_address' => 'OneOfAccountingV2AddressResponse',
        'location_address' => 'OneOfAccountingV2AddressResponse',
        'business_unit' => 'OneOfAccountingV2NamedFieldResponse',
        'term_name' => 'string',
        'created_by' => 'string',
        'batch' => 'OneOfAccountingV2BatchResponse',
        'modified_on' => '\DateTime',
        'adjustment_to_id' => 'int',
        'job' => 'OneOfAccountingV2JobResponse',
        'project_id' => 'int',
        'royalty' => 'OneOfAccountingV2RoyaltyResponse',
        'employee_info' => 'OneOfAccountingV2EmployeeInfoResponse',
        'commission_eligibility_date' => 'string',
        'items' => '\CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse[]',
        'custom_fields' => '\CompWright\ServiceTitan\Model\AccountingV2CustomFieldResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'sync_status' => null,
        'summary' => null,
        'reference_number' => null,
        'invoice_date' => 'date-time',
        'due_date' => 'date-time',
        'sub_total' => null,
        'sales_tax' => null,
        'sales_tax_code' => null,
        'total' => null,
        'balance' => null,
        'customer' => null,
        'customer_address' => null,
        'location_address' => null,
        'business_unit' => null,
        'term_name' => null,
        'created_by' => null,
        'batch' => null,
        'modified_on' => 'date-time',
        'adjustment_to_id' => 'int64',
        'job' => null,
        'project_id' => 'int64',
        'royalty' => null,
        'employee_info' => null,
        'commission_eligibility_date' => null,
        'items' => null,
        'custom_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sync_status' => 'syncStatus',
        'summary' => 'summary',
        'reference_number' => 'referenceNumber',
        'invoice_date' => 'invoiceDate',
        'due_date' => 'dueDate',
        'sub_total' => 'subTotal',
        'sales_tax' => 'salesTax',
        'sales_tax_code' => 'salesTaxCode',
        'total' => 'total',
        'balance' => 'balance',
        'customer' => 'customer',
        'customer_address' => 'customerAddress',
        'location_address' => 'locationAddress',
        'business_unit' => 'businessUnit',
        'term_name' => 'termName',
        'created_by' => 'createdBy',
        'batch' => 'batch',
        'modified_on' => 'modifiedOn',
        'adjustment_to_id' => 'adjustmentToId',
        'job' => 'job',
        'project_id' => 'projectId',
        'royalty' => 'royalty',
        'employee_info' => 'employeeInfo',
        'commission_eligibility_date' => 'commissionEligibilityDate',
        'items' => 'items',
        'custom_fields' => 'customFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sync_status' => 'setSyncStatus',
        'summary' => 'setSummary',
        'reference_number' => 'setReferenceNumber',
        'invoice_date' => 'setInvoiceDate',
        'due_date' => 'setDueDate',
        'sub_total' => 'setSubTotal',
        'sales_tax' => 'setSalesTax',
        'sales_tax_code' => 'setSalesTaxCode',
        'total' => 'setTotal',
        'balance' => 'setBalance',
        'customer' => 'setCustomer',
        'customer_address' => 'setCustomerAddress',
        'location_address' => 'setLocationAddress',
        'business_unit' => 'setBusinessUnit',
        'term_name' => 'setTermName',
        'created_by' => 'setCreatedBy',
        'batch' => 'setBatch',
        'modified_on' => 'setModifiedOn',
        'adjustment_to_id' => 'setAdjustmentToId',
        'job' => 'setJob',
        'project_id' => 'setProjectId',
        'royalty' => 'setRoyalty',
        'employee_info' => 'setEmployeeInfo',
        'commission_eligibility_date' => 'setCommissionEligibilityDate',
        'items' => 'setItems',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sync_status' => 'getSyncStatus',
        'summary' => 'getSummary',
        'reference_number' => 'getReferenceNumber',
        'invoice_date' => 'getInvoiceDate',
        'due_date' => 'getDueDate',
        'sub_total' => 'getSubTotal',
        'sales_tax' => 'getSalesTax',
        'sales_tax_code' => 'getSalesTaxCode',
        'total' => 'getTotal',
        'balance' => 'getBalance',
        'customer' => 'getCustomer',
        'customer_address' => 'getCustomerAddress',
        'location_address' => 'getLocationAddress',
        'business_unit' => 'getBusinessUnit',
        'term_name' => 'getTermName',
        'created_by' => 'getCreatedBy',
        'batch' => 'getBatch',
        'modified_on' => 'getModifiedOn',
        'adjustment_to_id' => 'getAdjustmentToId',
        'job' => 'getJob',
        'project_id' => 'getProjectId',
        'royalty' => 'getRoyalty',
        'employee_info' => 'getEmployeeInfo',
        'commission_eligibility_date' => 'getCommissionEligibilityDate',
        'items' => 'getItems',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['sync_status'] = $data['sync_status'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['reference_number'] = $data['reference_number'] ?? null;
        $this->container['invoice_date'] = $data['invoice_date'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['sub_total'] = $data['sub_total'] ?? null;
        $this->container['sales_tax'] = $data['sales_tax'] ?? null;
        $this->container['sales_tax_code'] = $data['sales_tax_code'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['customer_address'] = $data['customer_address'] ?? null;
        $this->container['location_address'] = $data['location_address'] ?? null;
        $this->container['business_unit'] = $data['business_unit'] ?? null;
        $this->container['term_name'] = $data['term_name'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['batch'] = $data['batch'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['adjustment_to_id'] = $data['adjustment_to_id'] ?? null;
        $this->container['job'] = $data['job'] ?? null;
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['royalty'] = $data['royalty'] ?? null;
        $this->container['employee_info'] = $data['employee_info'] ?? null;
        $this->container['commission_eligibility_date'] = $data['commission_eligibility_date'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return string|null
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param string|null $sync_status sync_status
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number reference_number
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime|null $invoice_date invoice_date
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return string|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param string|null $sub_total sub_total
     *
     * @return self
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets sales_tax
     *
     * @return string|null
     */
    public function getSalesTax()
    {
        return $this->container['sales_tax'];
    }

    /**
     * Sets sales_tax
     *
     * @param string|null $sales_tax sales_tax
     *
     * @return self
     */
    public function setSalesTax($sales_tax)
    {
        $this->container['sales_tax'] = $sales_tax;

        return $this;
    }

    /**
     * Gets sales_tax_code
     *
     * @return OneOfAccountingV2SalesTaxResponse|null
     */
    public function getSalesTaxCode()
    {
        return $this->container['sales_tax_code'];
    }

    /**
     * Sets sales_tax_code
     *
     * @param OneOfAccountingV2SalesTaxResponse|null $sales_tax_code sales_tax_code
     *
     * @return self
     */
    public function setSalesTaxCode($sales_tax_code)
    {
        $this->container['sales_tax_code'] = $sales_tax_code;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return string|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return OneOfAccountingV2NamedFieldResponse|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param OneOfAccountingV2NamedFieldResponse|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_address
     *
     * @return OneOfAccountingV2AddressResponse|null
     */
    public function getCustomerAddress()
    {
        return $this->container['customer_address'];
    }

    /**
     * Sets customer_address
     *
     * @param OneOfAccountingV2AddressResponse|null $customer_address customer_address
     *
     * @return self
     */
    public function setCustomerAddress($customer_address)
    {
        $this->container['customer_address'] = $customer_address;

        return $this;
    }

    /**
     * Gets location_address
     *
     * @return OneOfAccountingV2AddressResponse|null
     */
    public function getLocationAddress()
    {
        return $this->container['location_address'];
    }

    /**
     * Sets location_address
     *
     * @param OneOfAccountingV2AddressResponse|null $location_address location_address
     *
     * @return self
     */
    public function setLocationAddress($location_address)
    {
        $this->container['location_address'] = $location_address;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return OneOfAccountingV2NamedFieldResponse|null
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param OneOfAccountingV2NamedFieldResponse|null $business_unit business_unit
     *
     * @return self
     */
    public function setBusinessUnit($business_unit)
    {
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets term_name
     *
     * @return string|null
     */
    public function getTermName()
    {
        return $this->container['term_name'];
    }

    /**
     * Sets term_name
     *
     * @param string|null $term_name term_name
     *
     * @return self
     */
    public function setTermName($term_name)
    {
        $this->container['term_name'] = $term_name;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return OneOfAccountingV2BatchResponse|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param OneOfAccountingV2BatchResponse|null $batch batch
     *
     * @return self
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime|null
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime|null $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets adjustment_to_id
     *
     * @return int|null
     */
    public function getAdjustmentToId()
    {
        return $this->container['adjustment_to_id'];
    }

    /**
     * Sets adjustment_to_id
     *
     * @param int|null $adjustment_to_id adjustment_to_id
     *
     * @return self
     */
    public function setAdjustmentToId($adjustment_to_id)
    {
        $this->container['adjustment_to_id'] = $adjustment_to_id;

        return $this;
    }

    /**
     * Gets job
     *
     * @return OneOfAccountingV2JobResponse|null
     */
    public function getJob()
    {
        return $this->container['job'];
    }

    /**
     * Sets job
     *
     * @param OneOfAccountingV2JobResponse|null $job job
     *
     * @return self
     */
    public function setJob($job)
    {
        $this->container['job'] = $job;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets royalty
     *
     * @return OneOfAccountingV2RoyaltyResponse|null
     */
    public function getRoyalty()
    {
        return $this->container['royalty'];
    }

    /**
     * Sets royalty
     *
     * @param OneOfAccountingV2RoyaltyResponse|null $royalty royalty
     *
     * @return self
     */
    public function setRoyalty($royalty)
    {
        $this->container['royalty'] = $royalty;

        return $this;
    }

    /**
     * Gets employee_info
     *
     * @return OneOfAccountingV2EmployeeInfoResponse|null
     */
    public function getEmployeeInfo()
    {
        return $this->container['employee_info'];
    }

    /**
     * Sets employee_info
     *
     * @param OneOfAccountingV2EmployeeInfoResponse|null $employee_info employee_info
     *
     * @return self
     */
    public function setEmployeeInfo($employee_info)
    {
        $this->container['employee_info'] = $employee_info;

        return $this;
    }

    /**
     * Gets commission_eligibility_date
     *
     * @return string|null
     */
    public function getCommissionEligibilityDate()
    {
        return $this->container['commission_eligibility_date'];
    }

    /**
     * Sets commission_eligibility_date
     *
     * @param string|null $commission_eligibility_date commission_eligibility_date
     *
     * @return self
     */
    public function setCommissionEligibilityDate($commission_eligibility_date)
    {
        $this->container['commission_eligibility_date'] = $commission_eligibility_date;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemResponse[]|null $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \CompWright\ServiceTitan\Model\AccountingV2CustomFieldResponse[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \CompWright\ServiceTitan\Model\AccountingV2CustomFieldResponse[]|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


