<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class InventoryV2PurchaseOrderTypeResponse
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Purchase order type Id.
     *
     * @var int
     */
    protected $id;
    /**
     * Purchase order type Name.
     *
     * @var string
     */
    protected $name;
    /**
     * Active.
     *
     * @var bool
     */
    protected $active;
    /**
     * Automatically receive purchase order.
     *
     * @var bool
     */
    protected $automaticallyReceive;
    /**
     * Display purchase order type to technicain on mobile.
     *
     * @var bool
     */
    protected $displayToTechnician;
    /**
     * Default Selection for Impact to Technician Payroll on Purchase Order.
     *
     * @var bool
     */
    protected $impactToTechnicianPayroll;
    /**
     * Allow permitted technicians to send and receive POs of this type.
     *
     * @var bool
     */
    protected $allowTechniciansToSendPo;
    /**
     * Default number of days to offset required date.
     *
     * @var int
     */
    protected $defaultRequiredDateDaysOffset;
    /**
     * Skip weekends.
     *
     * @var bool
     */
    protected $skipWeekends;
    /**
     * Exclude tax from job costing.
     *
     * @var bool
     */
    protected $excludeTaxFromJobCosting;

    /**
     * Purchase order type Id.
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Purchase order type Id.
     */
    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * Purchase order type Name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Purchase order type Name.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Active.
     */
    public function getActive(): bool
    {
        return $this->active;
    }

    /**
     * Active.
     */
    public function setActive(bool $active): self
    {
        $this->initialized['active'] = true;
        $this->active = $active;

        return $this;
    }

    /**
     * Automatically receive purchase order.
     */
    public function getAutomaticallyReceive(): bool
    {
        return $this->automaticallyReceive;
    }

    /**
     * Automatically receive purchase order.
     */
    public function setAutomaticallyReceive(bool $automaticallyReceive): self
    {
        $this->initialized['automaticallyReceive'] = true;
        $this->automaticallyReceive = $automaticallyReceive;

        return $this;
    }

    /**
     * Display purchase order type to technicain on mobile.
     */
    public function getDisplayToTechnician(): bool
    {
        return $this->displayToTechnician;
    }

    /**
     * Display purchase order type to technicain on mobile.
     */
    public function setDisplayToTechnician(bool $displayToTechnician): self
    {
        $this->initialized['displayToTechnician'] = true;
        $this->displayToTechnician = $displayToTechnician;

        return $this;
    }

    /**
     * Default Selection for Impact to Technician Payroll on Purchase Order.
     */
    public function getImpactToTechnicianPayroll(): bool
    {
        return $this->impactToTechnicianPayroll;
    }

    /**
     * Default Selection for Impact to Technician Payroll on Purchase Order.
     */
    public function setImpactToTechnicianPayroll(bool $impactToTechnicianPayroll): self
    {
        $this->initialized['impactToTechnicianPayroll'] = true;
        $this->impactToTechnicianPayroll = $impactToTechnicianPayroll;

        return $this;
    }

    /**
     * Allow permitted technicians to send and receive POs of this type.
     */
    public function getAllowTechniciansToSendPo(): bool
    {
        return $this->allowTechniciansToSendPo;
    }

    /**
     * Allow permitted technicians to send and receive POs of this type.
     */
    public function setAllowTechniciansToSendPo(bool $allowTechniciansToSendPo): self
    {
        $this->initialized['allowTechniciansToSendPo'] = true;
        $this->allowTechniciansToSendPo = $allowTechniciansToSendPo;

        return $this;
    }

    /**
     * Default number of days to offset required date.
     */
    public function getDefaultRequiredDateDaysOffset(): int
    {
        return $this->defaultRequiredDateDaysOffset;
    }

    /**
     * Default number of days to offset required date.
     */
    public function setDefaultRequiredDateDaysOffset(int $defaultRequiredDateDaysOffset): self
    {
        $this->initialized['defaultRequiredDateDaysOffset'] = true;
        $this->defaultRequiredDateDaysOffset = $defaultRequiredDateDaysOffset;

        return $this;
    }

    /**
     * Skip weekends.
     */
    public function getSkipWeekends(): bool
    {
        return $this->skipWeekends;
    }

    /**
     * Skip weekends.
     */
    public function setSkipWeekends(bool $skipWeekends): self
    {
        $this->initialized['skipWeekends'] = true;
        $this->skipWeekends = $skipWeekends;

        return $this;
    }

    /**
     * Exclude tax from job costing.
     */
    public function getExcludeTaxFromJobCosting(): bool
    {
        return $this->excludeTaxFromJobCosting;
    }

    /**
     * Exclude tax from job costing.
     */
    public function setExcludeTaxFromJobCosting(bool $excludeTaxFromJobCosting): self
    {
        $this->initialized['excludeTaxFromJobCosting'] = true;
        $this->excludeTaxFromJobCosting = $excludeTaxFromJobCosting;

        return $this;
    }
}
