<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Model;

class MembershipsV2LocationRecurringServiceResponse
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Recurring service ID.
     *
     * @var int
     */
    protected $id;
    /**
     * Recurring service name.
     *
     * @var string
     */
    protected $name;
    /**
     * Whether recurring service is active.
     *
     * @var bool
     */
    protected $active;
    /**
     * When recurring service was created.
     *
     * @var \DateTime
     */
    protected $createdOn;
    /**
     * ID of the user that created this recurring service.
     *
     * @var int|null
     */
    protected $createdById;
    /**
     * When recurring service was modified.
     *
     * @var \DateTime
     */
    protected $modifiedOn;
    /**
     * Internal import ID label.
     *
     * @var string|null
     */
    protected $importId;
    /**
     * Customer membership ID.
     *
     * @var int|null
     */
    protected $membershipId;
    /**
     * Location ID.
     *
     * @var int
     */
    protected $locationId;
    /**
     * Recurring Service Type ID.
     *
     * @var int
     */
    protected $recurringServiceTypeId;
    /**
     * The recurrence duration type.
     */
    protected $durationType;
    /**
     * The duration length for the given duration type.
     *
     * @var int
     */
    protected $durationLength;
    /**
     * Beginning date of recurring service.
     *
     * @var \DateTime|null
     */
    protected $from;
    /**
     * End date of recurring service.
     *
     * @var \DateTime|null
     */
    protected $to;
    /**
     * Memo.
     *
     * @var string|null
     */
    protected $memo;
    /**
     * Invoice template ID.
     *
     * @var int|null
     */
    protected $invoiceTemplateId;
    /**
     * Invoice template ID for the 2nd year and following (for ongoing memberships).
     *
     * @var int|null
     */
    protected $invoiceTemplateForFollowingYearsId;
    /**
     * Whether first visit is complete.
     *
     * @var bool
     */
    protected $firstVisitComplete;
    /**
     * ID of the invoice item that is the sale task of this membership.
     *
     * @var int|null
     */
    protected $activatedFromId;
    /**
     * Recurring service allocation.
     *
     * @var float
     */
    protected $allocation;
    /**
     * Business unit ID.
     *
     * @var int|null
     */
    protected $businessUnitId;
    /**
     * Job type ID.
     *
     * @var int|null
     */
    protected $jobTypeId;
    /**
     * Campaign ID.
     *
     * @var int|null
     */
    protected $campaignId;
    /**
     * Recurring service priority.
     */
    protected $priority;
    /**
     * Job summary.
     *
     * @var string|null
     */
    protected $jobSummary;
    /**
     * The recurrence type (e.g. Daily, Weekly, Monthly, etc.).
     */
    protected $recurrenceType;
    /**
     * The recurrence interval for the given recurrence type.
     * Can be 0 when RecurrenceType is Seasonal.
     *
     * @var int
     */
    protected $recurrenceInterval;
    /**
     * A list of months when the recurring service occurs, if it is a seasonal recurrence type.
     *
     * @var list<string>
     */
    protected $recurrenceMonths;
    /**
     * A list specifying which days of the week this recurring service recurs when
     * RecurrenceType is Weekly.
     *
     * @var list<string>
     */
    protected $recurrenceDaysOfWeek;
    /**
     * Enum value corresponding to which week of the month this recurring service recurs when
     * RecurrenceType is NthWeekdayOfMonth. Used with RecurrenceDayOfNthWeek.
     */
    protected $recurrenceWeek;
    /**
     * Enum value corresponding to which day of the week this recurring service recurs when
     * RecurrenceType is NthWeekdayOfMonth. Used with RecurrenceWeek.
     *
     * @var mixed|null
     */
    protected $recurrenceDayOfNthWeek;
    /**
     * A list of days of the month on which this recurring service recurs when
     * RecurrenceType is Monthly.
     *
     * @var list<int>
     */
    protected $recurrenceDaysOfMonth;
    /**
     * Job start time.
     *
     * @var string|null
     */
    protected $jobStartTime;
    /**
     * Estimated payroll cost.
     *
     * @var float|null
     */
    protected $estimatedPayrollCost;

    /**
     * Recurring service ID.
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Recurring service ID.
     */
    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * Recurring service name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Recurring service name.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Whether recurring service is active.
     */
    public function getActive(): bool
    {
        return $this->active;
    }

    /**
     * Whether recurring service is active.
     */
    public function setActive(bool $active): self
    {
        $this->initialized['active'] = true;
        $this->active = $active;

        return $this;
    }

    /**
     * When recurring service was created.
     */
    public function getCreatedOn(): \DateTime
    {
        return $this->createdOn;
    }

    /**
     * When recurring service was created.
     */
    public function setCreatedOn(\DateTime $createdOn): self
    {
        $this->initialized['createdOn'] = true;
        $this->createdOn = $createdOn;

        return $this;
    }

    /**
     * ID of the user that created this recurring service.
     */
    public function getCreatedById(): ?int
    {
        return $this->createdById;
    }

    /**
     * ID of the user that created this recurring service.
     */
    public function setCreatedById(?int $createdById): self
    {
        $this->initialized['createdById'] = true;
        $this->createdById = $createdById;

        return $this;
    }

    /**
     * When recurring service was modified.
     */
    public function getModifiedOn(): \DateTime
    {
        return $this->modifiedOn;
    }

    /**
     * When recurring service was modified.
     */
    public function setModifiedOn(\DateTime $modifiedOn): self
    {
        $this->initialized['modifiedOn'] = true;
        $this->modifiedOn = $modifiedOn;

        return $this;
    }

    /**
     * Internal import ID label.
     */
    public function getImportId(): ?string
    {
        return $this->importId;
    }

    /**
     * Internal import ID label.
     */
    public function setImportId(?string $importId): self
    {
        $this->initialized['importId'] = true;
        $this->importId = $importId;

        return $this;
    }

    /**
     * Customer membership ID.
     */
    public function getMembershipId(): ?int
    {
        return $this->membershipId;
    }

    /**
     * Customer membership ID.
     */
    public function setMembershipId(?int $membershipId): self
    {
        $this->initialized['membershipId'] = true;
        $this->membershipId = $membershipId;

        return $this;
    }

    /**
     * Location ID.
     */
    public function getLocationId(): int
    {
        return $this->locationId;
    }

    /**
     * Location ID.
     */
    public function setLocationId(int $locationId): self
    {
        $this->initialized['locationId'] = true;
        $this->locationId = $locationId;

        return $this;
    }

    /**
     * Recurring Service Type ID.
     */
    public function getRecurringServiceTypeId(): int
    {
        return $this->recurringServiceTypeId;
    }

    /**
     * Recurring Service Type ID.
     */
    public function setRecurringServiceTypeId(int $recurringServiceTypeId): self
    {
        $this->initialized['recurringServiceTypeId'] = true;
        $this->recurringServiceTypeId = $recurringServiceTypeId;

        return $this;
    }

    /**
     * The recurrence duration type.
     */
    public function getDurationType()
    {
        return $this->durationType;
    }

    /**
     * The recurrence duration type.
     */
    public function setDurationType($durationType): self
    {
        $this->initialized['durationType'] = true;
        $this->durationType = $durationType;

        return $this;
    }

    /**
     * The duration length for the given duration type.
     */
    public function getDurationLength(): int
    {
        return $this->durationLength;
    }

    /**
     * The duration length for the given duration type.
     */
    public function setDurationLength(int $durationLength): self
    {
        $this->initialized['durationLength'] = true;
        $this->durationLength = $durationLength;

        return $this;
    }

    /**
     * Beginning date of recurring service.
     */
    public function getFrom(): ?\DateTime
    {
        return $this->from;
    }

    /**
     * Beginning date of recurring service.
     */
    public function setFrom(?\DateTime $from): self
    {
        $this->initialized['from'] = true;
        $this->from = $from;

        return $this;
    }

    /**
     * End date of recurring service.
     */
    public function getTo(): ?\DateTime
    {
        return $this->to;
    }

    /**
     * End date of recurring service.
     */
    public function setTo(?\DateTime $to): self
    {
        $this->initialized['to'] = true;
        $this->to = $to;

        return $this;
    }

    /**
     * Memo.
     */
    public function getMemo(): ?string
    {
        return $this->memo;
    }

    /**
     * Memo.
     */
    public function setMemo(?string $memo): self
    {
        $this->initialized['memo'] = true;
        $this->memo = $memo;

        return $this;
    }

    /**
     * Invoice template ID.
     */
    public function getInvoiceTemplateId(): ?int
    {
        return $this->invoiceTemplateId;
    }

    /**
     * Invoice template ID.
     */
    public function setInvoiceTemplateId(?int $invoiceTemplateId): self
    {
        $this->initialized['invoiceTemplateId'] = true;
        $this->invoiceTemplateId = $invoiceTemplateId;

        return $this;
    }

    /**
     * Invoice template ID for the 2nd year and following (for ongoing memberships).
     */
    public function getInvoiceTemplateForFollowingYearsId(): ?int
    {
        return $this->invoiceTemplateForFollowingYearsId;
    }

    /**
     * Invoice template ID for the 2nd year and following (for ongoing memberships).
     */
    public function setInvoiceTemplateForFollowingYearsId(?int $invoiceTemplateForFollowingYearsId): self
    {
        $this->initialized['invoiceTemplateForFollowingYearsId'] = true;
        $this->invoiceTemplateForFollowingYearsId = $invoiceTemplateForFollowingYearsId;

        return $this;
    }

    /**
     * Whether first visit is complete.
     */
    public function getFirstVisitComplete(): bool
    {
        return $this->firstVisitComplete;
    }

    /**
     * Whether first visit is complete.
     */
    public function setFirstVisitComplete(bool $firstVisitComplete): self
    {
        $this->initialized['firstVisitComplete'] = true;
        $this->firstVisitComplete = $firstVisitComplete;

        return $this;
    }

    /**
     * ID of the invoice item that is the sale task of this membership.
     */
    public function getActivatedFromId(): ?int
    {
        return $this->activatedFromId;
    }

    /**
     * ID of the invoice item that is the sale task of this membership.
     */
    public function setActivatedFromId(?int $activatedFromId): self
    {
        $this->initialized['activatedFromId'] = true;
        $this->activatedFromId = $activatedFromId;

        return $this;
    }

    /**
     * Recurring service allocation.
     */
    public function getAllocation(): float
    {
        return $this->allocation;
    }

    /**
     * Recurring service allocation.
     */
    public function setAllocation(float $allocation): self
    {
        $this->initialized['allocation'] = true;
        $this->allocation = $allocation;

        return $this;
    }

    /**
     * Business unit ID.
     */
    public function getBusinessUnitId(): ?int
    {
        return $this->businessUnitId;
    }

    /**
     * Business unit ID.
     */
    public function setBusinessUnitId(?int $businessUnitId): self
    {
        $this->initialized['businessUnitId'] = true;
        $this->businessUnitId = $businessUnitId;

        return $this;
    }

    /**
     * Job type ID.
     */
    public function getJobTypeId(): ?int
    {
        return $this->jobTypeId;
    }

    /**
     * Job type ID.
     */
    public function setJobTypeId(?int $jobTypeId): self
    {
        $this->initialized['jobTypeId'] = true;
        $this->jobTypeId = $jobTypeId;

        return $this;
    }

    /**
     * Campaign ID.
     */
    public function getCampaignId(): ?int
    {
        return $this->campaignId;
    }

    /**
     * Campaign ID.
     */
    public function setCampaignId(?int $campaignId): self
    {
        $this->initialized['campaignId'] = true;
        $this->campaignId = $campaignId;

        return $this;
    }

    /**
     * Recurring service priority.
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Recurring service priority.
     */
    public function setPriority($priority): self
    {
        $this->initialized['priority'] = true;
        $this->priority = $priority;

        return $this;
    }

    /**
     * Job summary.
     */
    public function getJobSummary(): ?string
    {
        return $this->jobSummary;
    }

    /**
     * Job summary.
     */
    public function setJobSummary(?string $jobSummary): self
    {
        $this->initialized['jobSummary'] = true;
        $this->jobSummary = $jobSummary;

        return $this;
    }

    /**
     * The recurrence type (e.g. Daily, Weekly, Monthly, etc.).
     */
    public function getRecurrenceType()
    {
        return $this->recurrenceType;
    }

    /**
     * The recurrence type (e.g. Daily, Weekly, Monthly, etc.).
     */
    public function setRecurrenceType($recurrenceType): self
    {
        $this->initialized['recurrenceType'] = true;
        $this->recurrenceType = $recurrenceType;

        return $this;
    }

    /**
     * The recurrence interval for the given recurrence type.
     * Can be 0 when RecurrenceType is Seasonal.
     */
    public function getRecurrenceInterval(): int
    {
        return $this->recurrenceInterval;
    }

    /**
     * The recurrence interval for the given recurrence type.
     * Can be 0 when RecurrenceType is Seasonal.
     */
    public function setRecurrenceInterval(int $recurrenceInterval): self
    {
        $this->initialized['recurrenceInterval'] = true;
        $this->recurrenceInterval = $recurrenceInterval;

        return $this;
    }

    /**
     * A list of months when the recurring service occurs, if it is a seasonal recurrence type.
     *
     * @return list<string>
     */
    public function getRecurrenceMonths(): array
    {
        return $this->recurrenceMonths;
    }

    /**
     * A list of months when the recurring service occurs, if it is a seasonal recurrence type.
     *
     * @param list<string> $recurrenceMonths
     */
    public function setRecurrenceMonths(array $recurrenceMonths): self
    {
        $this->initialized['recurrenceMonths'] = true;
        $this->recurrenceMonths = $recurrenceMonths;

        return $this;
    }

    /**
     * A list specifying which days of the week this recurring service recurs when
     * RecurrenceType is Weekly.
     *
     * @return list<string>
     */
    public function getRecurrenceDaysOfWeek(): array
    {
        return $this->recurrenceDaysOfWeek;
    }

    /**
     * A list specifying which days of the week this recurring service recurs when
     * RecurrenceType is Weekly.
     *
     * @param list<string> $recurrenceDaysOfWeek
     */
    public function setRecurrenceDaysOfWeek(array $recurrenceDaysOfWeek): self
    {
        $this->initialized['recurrenceDaysOfWeek'] = true;
        $this->recurrenceDaysOfWeek = $recurrenceDaysOfWeek;

        return $this;
    }

    /**
     * Enum value corresponding to which week of the month this recurring service recurs when
     * RecurrenceType is NthWeekdayOfMonth. Used with RecurrenceDayOfNthWeek.
     */
    public function getRecurrenceWeek()
    {
        return $this->recurrenceWeek;
    }

    /**
     * Enum value corresponding to which week of the month this recurring service recurs when
     * RecurrenceType is NthWeekdayOfMonth. Used with RecurrenceDayOfNthWeek.
     */
    public function setRecurrenceWeek($recurrenceWeek): self
    {
        $this->initialized['recurrenceWeek'] = true;
        $this->recurrenceWeek = $recurrenceWeek;

        return $this;
    }

    /**
     * Enum value corresponding to which day of the week this recurring service recurs when
     * RecurrenceType is NthWeekdayOfMonth. Used with RecurrenceWeek.
     */
    public function getRecurrenceDayOfNthWeek()
    {
        return $this->recurrenceDayOfNthWeek;
    }

    /**
     * Enum value corresponding to which day of the week this recurring service recurs when
     * RecurrenceType is NthWeekdayOfMonth. Used with RecurrenceWeek.
     */
    public function setRecurrenceDayOfNthWeek($recurrenceDayOfNthWeek): self
    {
        $this->initialized['recurrenceDayOfNthWeek'] = true;
        $this->recurrenceDayOfNthWeek = $recurrenceDayOfNthWeek;

        return $this;
    }

    /**
     * A list of days of the month on which this recurring service recurs when
     * RecurrenceType is Monthly.
     *
     * @return list<int>
     */
    public function getRecurrenceDaysOfMonth(): array
    {
        return $this->recurrenceDaysOfMonth;
    }

    /**
     * A list of days of the month on which this recurring service recurs when
     * RecurrenceType is Monthly.
     *
     * @param list<int> $recurrenceDaysOfMonth
     */
    public function setRecurrenceDaysOfMonth(array $recurrenceDaysOfMonth): self
    {
        $this->initialized['recurrenceDaysOfMonth'] = true;
        $this->recurrenceDaysOfMonth = $recurrenceDaysOfMonth;

        return $this;
    }

    /**
     * Job start time.
     */
    public function getJobStartTime(): ?string
    {
        return $this->jobStartTime;
    }

    /**
     * Job start time.
     */
    public function setJobStartTime(?string $jobStartTime): self
    {
        $this->initialized['jobStartTime'] = true;
        $this->jobStartTime = $jobStartTime;

        return $this;
    }

    /**
     * Estimated payroll cost.
     */
    public function getEstimatedPayrollCost(): ?float
    {
        return $this->estimatedPayrollCost;
    }

    /**
     * Estimated payroll cost.
     */
    public function setEstimatedPayrollCost(?float $estimatedPayrollCost): self
    {
        $this->initialized['estimatedPayrollCost'] = true;
        $this->estimatedPayrollCost = $estimatedPayrollCost;

        return $this;
    }
}
