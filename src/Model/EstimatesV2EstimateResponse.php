<?php
/**
 * EstimatesV2EstimateResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales & Estimates
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Model;

use \ArrayAccess;
use \CompWright\ServiceTitan\ObjectSerializer;

/**
 * EstimatesV2EstimateResponse Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EstimatesV2EstimateResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Estimates.V2.EstimateResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'job_id' => 'int',
        'project_id' => 'int',
        'name' => 'string',
        'job_number' => 'string',
        'status' => 'OneOfEstimatesV2EstimateStatusModel',
        'summary' => 'string',
        'modified_on' => '\DateTime',
        'sold_on' => '\DateTime',
        'sold_by' => 'int',
        'active' => 'bool',
        'items' => '\CompWright\ServiceTitan\Model\EstimatesV2EstimateItemResponse[]',
        'external_links' => '\CompWright\ServiceTitan\Model\EstimatesV2ExternalLinkResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'job_id' => 'int64',
        'project_id' => 'int64',
        'name' => null,
        'job_number' => null,
        'status' => null,
        'summary' => null,
        'modified_on' => 'date-time',
        'sold_on' => 'date-time',
        'sold_by' => 'int64',
        'active' => null,
        'items' => null,
        'external_links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'job_id' => 'jobId',
        'project_id' => 'projectId',
        'name' => 'name',
        'job_number' => 'jobNumber',
        'status' => 'status',
        'summary' => 'summary',
        'modified_on' => 'modifiedOn',
        'sold_on' => 'soldOn',
        'sold_by' => 'soldBy',
        'active' => 'active',
        'items' => 'items',
        'external_links' => 'externalLinks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'job_id' => 'setJobId',
        'project_id' => 'setProjectId',
        'name' => 'setName',
        'job_number' => 'setJobNumber',
        'status' => 'setStatus',
        'summary' => 'setSummary',
        'modified_on' => 'setModifiedOn',
        'sold_on' => 'setSoldOn',
        'sold_by' => 'setSoldBy',
        'active' => 'setActive',
        'items' => 'setItems',
        'external_links' => 'setExternalLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'job_id' => 'getJobId',
        'project_id' => 'getProjectId',
        'name' => 'getName',
        'job_number' => 'getJobNumber',
        'status' => 'getStatus',
        'summary' => 'getSummary',
        'modified_on' => 'getModifiedOn',
        'sold_on' => 'getSoldOn',
        'sold_by' => 'getSoldBy',
        'active' => 'getActive',
        'items' => 'getItems',
        'external_links' => 'getExternalLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['job_id'] = $data['job_id'] ?? null;
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['job_number'] = $data['job_number'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['sold_on'] = $data['sold_on'] ?? null;
        $this->container['sold_by'] = $data['sold_by'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['external_links'] = $data['external_links'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return int|null
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param int|null $job_id job_id
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets job_number
     *
     * @return string|null
     */
    public function getJobNumber()
    {
        return $this->container['job_number'];
    }

    /**
     * Sets job_number
     *
     * @param string|null $job_number job_number
     *
     * @return self
     */
    public function setJobNumber($job_number)
    {
        $this->container['job_number'] = $job_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return OneOfEstimatesV2EstimateStatusModel|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param OneOfEstimatesV2EstimateStatusModel|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets sold_on
     *
     * @return \DateTime|null
     */
    public function getSoldOn()
    {
        return $this->container['sold_on'];
    }

    /**
     * Sets sold_on
     *
     * @param \DateTime|null $sold_on sold_on
     *
     * @return self
     */
    public function setSoldOn($sold_on)
    {
        $this->container['sold_on'] = $sold_on;

        return $this;
    }

    /**
     * Gets sold_by
     *
     * @return int|null
     */
    public function getSoldBy()
    {
        return $this->container['sold_by'];
    }

    /**
     * Sets sold_by
     *
     * @param int|null $sold_by sold_by
     *
     * @return self
     */
    public function setSoldBy($sold_by)
    {
        $this->container['sold_by'] = $sold_by;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \CompWright\ServiceTitan\Model\EstimatesV2EstimateItemResponse[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \CompWright\ServiceTitan\Model\EstimatesV2EstimateItemResponse[]|null $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets external_links
     *
     * @return \CompWright\ServiceTitan\Model\EstimatesV2ExternalLinkResponse[]|null
     */
    public function getExternalLinks()
    {
        return $this->container['external_links'];
    }

    /**
     * Sets external_links
     *
     * @param \CompWright\ServiceTitan\Model\EstimatesV2ExternalLinkResponse[]|null $external_links external_links
     *
     * @return self
     */
    public function setExternalLinks($external_links)
    {
        $this->container['external_links'] = $external_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


