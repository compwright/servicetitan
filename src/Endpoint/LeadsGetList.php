<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Endpoint;

class LeadsGetList extends \CompWright\ServiceTitan\Runtime\Client\BaseEndpoint implements \CompWright\ServiceTitan\Runtime\Client\Endpoint
{
    use \CompWright\ServiceTitan\Runtime\Client\EndpointTrait;
    protected $tenant;

    /**
     * Gets a list of leads.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     *     @var string $ids Perform lookup by multiple IDs (maximum 50)
     *     @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     *     @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     *     @var int $customerId Format - int64. Filters by associated customer
     *     @var bool $isProspect Allows to filter leads where the customer doesn't have a job, or there is no customer.
     *     @var bool $withoutCustomer Allows to filter leads that don't have a customer or location record associated to it.
     *     @var string $status Filters by status\
     *     @var string $customerCity Filters by customer city
     *     @var string $customerState Filters by customer state
     *     @var string $customerZip Filters by customer zip
     *     @var string $customerCreatedOnOrAfter Format - date-time (as date-time in RFC3339). Returns customers who were created on or before a certain date/time (in UTC)
     *     @var string $customerCreatedBefore Format - date-time (as date-time in RFC3339). Returns customers who were created after a certain date/time (in UTC)
     *     @var string $customerModifiedOnOrAfter Format - date-time (as date-time in RFC3339). Returns customers who were modified on or before a certain date/time (in UTC)
     *     @var string $sort Applies sorting by the specified field:\
    Available fields are: Id, ModifiedOn, CreatedOn.
     * }
     */
    public function __construct(int $tenant, array $queryParameters = [])
    {
        $this->tenant = $tenant;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{tenant}'], [$this->tenant], '/crm/v2/tenant/{tenant}/leads');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['page', 'pageSize', 'includeTotal', 'ids', 'createdBefore', 'createdOnOrAfter', 'modifiedBefore', 'modifiedOnOrAfter', 'customerId', 'isProspect', 'withoutCustomer', 'status', 'customerCity', 'customerState', 'customerZip', 'customerCreatedOnOrAfter', 'customerCreatedBefore', 'customerModifiedOnOrAfter', 'sort']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('page', ['int', 'null']);
        $optionsResolver->setAllowedTypes('pageSize', ['int', 'null']);
        $optionsResolver->setAllowedTypes('includeTotal', ['bool', 'null']);
        $optionsResolver->setAllowedTypes('ids', ['string']);
        $optionsResolver->setAllowedTypes('createdBefore', ['string', 'null']);
        $optionsResolver->setAllowedTypes('createdOnOrAfter', ['string', 'null']);
        $optionsResolver->setAllowedTypes('modifiedBefore', ['string', 'null']);
        $optionsResolver->setAllowedTypes('modifiedOnOrAfter', ['string', 'null']);
        $optionsResolver->setAllowedTypes('customerId', ['int', 'null']);
        $optionsResolver->setAllowedTypes('isProspect', ['bool', 'null']);
        $optionsResolver->setAllowedTypes('withoutCustomer', ['bool', 'null']);
        $optionsResolver->setAllowedTypes('status', ['string', 'null']);
        $optionsResolver->setAllowedTypes('customerCity', ['string']);
        $optionsResolver->setAllowedTypes('customerState', ['string']);
        $optionsResolver->setAllowedTypes('customerZip', ['string']);
        $optionsResolver->setAllowedTypes('customerCreatedOnOrAfter', ['string', 'null']);
        $optionsResolver->setAllowedTypes('customerCreatedBefore', ['string', 'null']);
        $optionsResolver->setAllowedTypes('customerModifiedOnOrAfter', ['string', 'null']);
        $optionsResolver->setAllowedTypes('sort', ['string']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsGetListBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2LeadResponse|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'CompWright\\ServiceTitan\\Model\\PaginatedResponseOfCrmV2LeadResponse', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \CompWright\ServiceTitan\Exception\LeadsGetListBadRequestException($serializer->deserialize($body, 'CompWright\\ServiceTitan\\Model\\ApiErrorResponse', 'json'));
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['appKey', 'bearerToken'];
    }
}
