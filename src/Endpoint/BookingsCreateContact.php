<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Endpoint;

class BookingsCreateContact extends \CompWright\ServiceTitan\Runtime\Client\BaseEndpoint implements \CompWright\ServiceTitan\Runtime\Client\Endpoint
{
    use \CompWright\ServiceTitan\Runtime\Client\EndpointTrait;
    protected $booking_provider;
    protected $id;
    protected $tenant;

    /**
     * Creates a contact on the specified booking for a booking provider.
     *
     * @param int $bookingProvider format - int64
     * @param int $id              format - int64
     * @param int $tenant          Tenant ID
     */
    public function __construct(int $bookingProvider, int $id, int $tenant, ?\CompWright\ServiceTitan\Model\CrmV2ContactCreateRequest $requestBody = null)
    {
        $this->booking_provider = $bookingProvider;
        $this->id = $id;
        $this->tenant = $tenant;
        $this->body = $requestBody;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return str_replace(['{booking_provider}', '{id}', '{tenant}'], [$this->booking_provider, $this->id, $this->tenant], '/crm/v2/tenant/{tenant}/booking-provider/{booking_provider}/bookings/{id}/contacts');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \CompWright\ServiceTitan\Model\CrmV2ContactCreateRequest) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * @return \CompWright\ServiceTitan\Model\CrmV2BookingContactResponse|null
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsCreateContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsCreateContactNotFoundException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'CompWright\ServiceTitan\Model\CrmV2BookingContactResponse', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \CompWright\ServiceTitan\Exception\BookingsCreateContactBadRequestException($serializer->deserialize($body, 'CompWright\ServiceTitan\Model\ApiErrorResponse', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \CompWright\ServiceTitan\Exception\BookingsCreateContactNotFoundException($serializer->deserialize($body, 'CompWright\ServiceTitan\Model\ApiErrorResponse', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['appKey', 'bearerToken'];
    }
}
