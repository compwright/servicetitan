<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Endpoint;

class CustomersGetList extends \CompWright\ServiceTitan\Runtime\Client\BaseEndpoint implements \CompWright\ServiceTitan\Runtime\Client\Endpoint
{
    use \CompWright\ServiceTitan\Runtime\Client\EndpointTrait;
    protected $tenant;

    /**
     * Gets a list of Customers.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     *     @var string $sort Applies sorting by the specified field:\
     *     @var string $ids returns specific customer records by customer ID
     *     @var string $createdBefore Format - date-time (as date-time in RFC3339). Returns customer records created before the requested date (in UTC)
     *     @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Returns customer records created on or after the requested date (in UTC)
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Returns customer records modified before the requested date (in UTC)
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Returns customer records modified after the requested date (in UTC)
     *     @var string $name returns customer records by name
     *     @var string $street returns customer records by street
     *     @var string $unit returns customer records by unit
     *     @var string $city returns customer records by city
     *     @var string $state returns customer records by state
     *     @var string $zip returns customer records by zip
     *     @var string $country returns customer records by country
     *     @var float $latitude Format - double. Returns customer records by latitude.
     *     @var float $longitude Format - double. Returns customer records by longitude.
     *     @var string $phone returns customer records by phone number of contacts
     *     @var string $active Returns customer records by active status. only active items will be returned by default.\
    Values: [True, Any, False]
     * }
     */
    public function __construct(int $tenant, array $queryParameters = [])
    {
        $this->tenant = $tenant;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{tenant}'], [$this->tenant], '/crm/v2/tenant/{tenant}/customers');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['page', 'pageSize', 'includeTotal', 'sort', 'ids', 'createdBefore', 'createdOnOrAfter', 'modifiedBefore', 'modifiedOnOrAfter', 'name', 'street', 'unit', 'city', 'state', 'zip', 'country', 'latitude', 'longitude', 'phone', 'active']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('page', ['int', 'null']);
        $optionsResolver->setAllowedTypes('pageSize', ['int', 'null']);
        $optionsResolver->setAllowedTypes('includeTotal', ['bool', 'null']);
        $optionsResolver->setAllowedTypes('sort', ['string']);
        $optionsResolver->setAllowedTypes('ids', ['string']);
        $optionsResolver->setAllowedTypes('createdBefore', ['string', 'null']);
        $optionsResolver->setAllowedTypes('createdOnOrAfter', ['string', 'null']);
        $optionsResolver->setAllowedTypes('modifiedBefore', ['string', 'null']);
        $optionsResolver->setAllowedTypes('modifiedOnOrAfter', ['string', 'null']);
        $optionsResolver->setAllowedTypes('name', ['string']);
        $optionsResolver->setAllowedTypes('street', ['string']);
        $optionsResolver->setAllowedTypes('unit', ['string']);
        $optionsResolver->setAllowedTypes('city', ['string']);
        $optionsResolver->setAllowedTypes('state', ['string']);
        $optionsResolver->setAllowedTypes('zip', ['string']);
        $optionsResolver->setAllowedTypes('country', ['string']);
        $optionsResolver->setAllowedTypes('latitude', ['float', 'null']);
        $optionsResolver->setAllowedTypes('longitude', ['float', 'null']);
        $optionsResolver->setAllowedTypes('phone', ['string']);
        $optionsResolver->setAllowedTypes('active', ['string', 'null']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetListBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CustomersCustomerResponse|null
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'CompWright\\ServiceTitan\\Model\\PaginatedResponseOfCrmV2CustomersCustomerResponse', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \CompWright\ServiceTitan\Exception\CustomersGetListBadRequestException($serializer->deserialize($body, 'CompWright\\ServiceTitan\\Model\\ApiErrorResponse', 'json'));
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['appKey', 'bearerToken'];
    }
}
