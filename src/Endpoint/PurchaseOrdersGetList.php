<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Endpoint;

class PurchaseOrdersGetList extends \CompWright\ServiceTitan\Runtime\Client\BaseEndpoint implements \CompWright\ServiceTitan\Runtime\Client\Endpoint
{
    use \CompWright\ServiceTitan\Runtime\Client\EndpointTrait;
    protected $tenant;

    /**
     * Get a list of purchase orders.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var string $status Filters by PO status
     * @var string $number Filters by PO number
     * @var int    $jobId Format - int64. Filters by JobId associated with PO
     * @var int    $technicianId Format - int64. Filter by TechnicianId associated with PO
     * @var int    $projectId Format - int64. Filter by ProjectId associated with PO
     * @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     * @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     * @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     * @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     * @var string $dateOnOrAfter Format - date-time (as date-time in RFC3339). Return POs with date on or after certain date/time
     * @var string $dateBefore Format - date-time (as date-time in RFC3339). Return POs with date before certain date/time
     * @var string $sentOnOrAfter Format - date-time (as date-time in RFC3339). Return POs sent on or after certain date/time
     * @var string $sentBefore Format - date-time (as date-time in RFC3339). Return POs sent before certain date/time
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     *             }
     */
    public function __construct(int $tenant, array $queryParameters = [])
    {
        $this->tenant = $tenant;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{tenant}'], [$this->tenant], '/inventory/v2/tenant/{tenant}/purchase-orders');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['ids', 'status', 'number', 'jobId', 'technicianId', 'projectId', 'createdOnOrAfter', 'createdBefore', 'modifiedOnOrAfter', 'modifiedBefore', 'dateOnOrAfter', 'dateBefore', 'sentOnOrAfter', 'sentBefore', 'page', 'pageSize', 'includeTotal']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('ids', ['string']);
        $optionsResolver->addAllowedTypes('status', ['string']);
        $optionsResolver->addAllowedTypes('number', ['string']);
        $optionsResolver->addAllowedTypes('jobId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('technicianId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('projectId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('createdOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('createdBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('modifiedOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('modifiedBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('dateOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('dateBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('sentOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('sentBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('page', ['int', 'null']);
        $optionsResolver->addAllowedTypes('pageSize', ['int', 'null']);
        $optionsResolver->addAllowedTypes('includeTotal', ['bool', 'null']);

        return $optionsResolver;
    }

    /**
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2PurchaseOrderResponse|null
     *
     * @throws \CompWright\ServiceTitan\Exception\PurchaseOrdersGetListBadRequestException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2PurchaseOrderResponse', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \CompWright\ServiceTitan\Exception\PurchaseOrdersGetListBadRequestException($serializer->deserialize($body, 'CompWright\ServiceTitan\Model\ApiErrorResponse', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['appKey', 'bearerToken'];
    }
}
