<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan\Endpoint;

class JobsGetList extends \CompWright\ServiceTitan\Runtime\Client\BaseEndpoint implements \CompWright\ServiceTitan\Runtime\Client\Endpoint
{
    use \CompWright\ServiceTitan\Runtime\Client\EndpointTrait;
    protected $tenant;

    /**
     * Gets a list of jobs.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var string $number Filters by job number
     * @var int    $projectId Format - int64. Filters by project ID
     * @var int    $bookingId Format - int64. Filters by booking ID that resulted in this job
     * @var string $jobStatus Filters by job status. Supported statuses are "Scheduled", "InProgress", "Hold", "Completed", and "Canceled"
     * @var string $appointmentStatus Filters by appointment status. Return a job if it has any appointment with the specified status.
     *             Supported statues are "Scheduled", "Dispatched", "Working", "Hold", "Done", "Canceled", "Unused"
     * @var string $firstAppointmentStartsOnOrAfter Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts on or after date/time (in UTC). Use with
     *             "firstAppointmentStartsBefore" to find jobs whose first appointment is within the specified date range.
     * @var string $firstAppointmentStartsBefore Format - date-time (as date-time in RFC3339). Return jobs whose first appointment starts before date/time (in UTC)
     * @var string $appointmentStartsOnOrAfter Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC)
     * @var string $appointmentStartsBefore Format - date-time (as date-time in RFC3339). Return jobs if any appointment starts after date/time (in UTC)
     * @var int    $technicianId Format - int64. Return jobs if technician is assigned to any appointment
     * @var int    $customerId Format - int64. Filters by job's customer ID
     * @var int    $locationId Format - int64. Filters by job's location ID
     * @var int    $soldById Format - int64. Filters by the technician who sold the job
     * @var int    $jobTypeId Format - int64. Filters by job type ID
     * @var int    $campaignId Format - int64. Filters by job's campaign ID
     * @var int    $businessUnitId Format - int64. Filters by job's business unit ID
     * @var int    $invoiceId Format - int64. Filters by job's invoice ID
     * @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     * @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     * @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     * @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     * @var string $completedOnOrAfter Format - date-time (as date-time in RFC3339). Return jobs that are completed after a certain date/time (in UTC)
     * @var string $completedBefore Format - date-time (as date-time in RFC3339). Return jobs that are completed before a certain date/time (in UTC)
     * @var string $sort Applies sorting by the specified field:\
     *             "?sort=+FieldName" for ascending order,\
     *             "?sort=-FieldName" for descending order.\
     *             \
     *             Available fields are: Id, ModifiedOn, CreatedOn.
     * @var string $externalDataApplicationGuid Format - guid. If this guid is provided, external data corresponding to
     *             this application guid will be returned.
     *             }
     */
    public function __construct(int $tenant, array $queryParameters = [])
    {
        $this->tenant = $tenant;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{tenant}'], [$this->tenant], '/jpm/v2/tenant/{tenant}/jobs');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['page', 'pageSize', 'includeTotal', 'ids', 'number', 'projectId', 'bookingId', 'jobStatus', 'appointmentStatus', 'firstAppointmentStartsOnOrAfter', 'firstAppointmentStartsBefore', 'appointmentStartsOnOrAfter', 'appointmentStartsBefore', 'technicianId', 'customerId', 'locationId', 'soldById', 'jobTypeId', 'campaignId', 'businessUnitId', 'invoiceId', 'createdBefore', 'createdOnOrAfter', 'modifiedBefore', 'modifiedOnOrAfter', 'completedOnOrAfter', 'completedBefore', 'sort', 'externalDataApplicationGuid']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('page', ['int', 'null']);
        $optionsResolver->addAllowedTypes('pageSize', ['int', 'null']);
        $optionsResolver->addAllowedTypes('includeTotal', ['bool', 'null']);
        $optionsResolver->addAllowedTypes('ids', ['string']);
        $optionsResolver->addAllowedTypes('number', ['string']);
        $optionsResolver->addAllowedTypes('projectId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('bookingId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('jobStatus', ['string']);
        $optionsResolver->addAllowedTypes('appointmentStatus', ['string']);
        $optionsResolver->addAllowedTypes('firstAppointmentStartsOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('firstAppointmentStartsBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('appointmentStartsOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('appointmentStartsBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('technicianId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('customerId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('locationId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('soldById', ['int', 'null']);
        $optionsResolver->addAllowedTypes('jobTypeId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('campaignId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('businessUnitId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('invoiceId', ['int', 'null']);
        $optionsResolver->addAllowedTypes('createdBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('createdOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('modifiedBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('modifiedOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('completedOnOrAfter', ['string', 'null']);
        $optionsResolver->addAllowedTypes('completedBefore', ['string', 'null']);
        $optionsResolver->addAllowedTypes('sort', ['string']);
        $optionsResolver->addAllowedTypes('externalDataApplicationGuid', ['string', 'null']);

        return $optionsResolver;
    }

    /**
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse|null
     *
     * @throws \CompWright\ServiceTitan\Exception\JobsGetListBadRequestException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobResponse', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \CompWright\ServiceTitan\Exception\JobsGetListBadRequestException($serializer->deserialize($body, 'CompWright\ServiceTitan\Model\ApiErrorResponse', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['appKey', 'bearerToken'];
    }
}
