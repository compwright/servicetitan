<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan;

class PayrollClient extends Runtime\Client\Client
{
    /**
     * Gets a list of gross pay items.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $employeeType The type of employee\
     *             Values: [Technician, Employee]
     * @var int    $employeeId Format - int64. The Employee ID
     * @var string $payrollIds The payroll ID
     * @var string $dateOnOrAfter Format - date-time (as date-time in RFC3339). Return items having date after certain date/time (in UTC)
     * @var string $dateOnOrBefore Format - date-time (as date-time in RFC3339). Return items having date before certain date/time (in UTC)
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPayrollV2GrossPayItemsGrossPayItemResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GrossPayItemsGetListBadRequestException
     */
    public function grossPayItemsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GrossPayItemsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Creates new gross pay item.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModificationResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GrossPayItemsCreateBadRequestException
     * @throws Exception\GrossPayItemsCreateConflictException
     */
    public function grossPayItemsCreate(int $tenant, ?Model\PayrollV2GrossPayItemsGrossPayItemCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GrossPayItemsCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Delete specified gross pay item.
     *
     * @param int    $id     Format - int64. The gross pay item ID
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GrossPayItemsDeleteBadRequestException
     */
    public function grossPayItemsDelete(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GrossPayItemsDelete($id, $tenant), $fetch);
    }

    /**
     * Update specified gross pay item.
     *
     * @param int    $id     Format - int64. The gross pay item ID
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModificationResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GrossPayItemsUpdateBadRequestException
     * @throws Exception\GrossPayItemsUpdateConflictException
     */
    public function grossPayItemsUpdate(int $id, int $tenant, ?Model\PayrollV2GrossPayItemsGrossPayItemUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GrossPayItemsUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of job splits.
     *
     * @param int    $job    Format - int64. The job ID
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PayrollV2JobSplitsJobSplitResponse[]|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\JobSplitsGetListBadRequestException
     * @throws Exception\JobSplitsGetListConflictException
     */
    public function jobSplitsGetList(int $job, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\JobSplitsGetList($job, $tenant), $fetch);
    }

    /**
     * Gets a list of payroll activity codes.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int  $page Format - int32. The logical number of page to return, starting from 1
     * @var int  $pageSize Format - int32. How many records to return (50 by default)
     * @var bool $includeTotal Whether total count should be returned
     *           }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPayrollV2PayrollActivityCodesPayrollActivityCodeResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ActivityCodesGetListBadRequestException
     */
    public function activityCodesGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ActivityCodesGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Gets payroll activity code specified by ID.
     *
     * @param int    $id     Format - int64. ID of the payroll activity code
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PayrollV2PayrollActivityCodesPayrollActivityCodeResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ActivityCodesGetBadRequestException
     * @throws Exception\ActivityCodesGetNotFoundException
     */
    public function activityCodesGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ActivityCodesGet($id, $tenant), $fetch);
    }

    /**
     * Gets a list of payroll adjustments.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $employeeIds The comma separated list of employee IDs
     * @var string $postedOnOrAfter Format - date-time (as date-time in RFC3339). Return payroll adjustments posted on or after certain date/time (in UTC)
     * @var string $postedOnOrBefore Format - date-time (as date-time in RFC3339). Return payroll adjustments posted on or before certain date/time (in UTC)
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPayrollV2PayrollAdjustmentsPayrollAdjustmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PayrollAdjustmentsGetListBadRequestException
     */
    public function payrollAdjustmentsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PayrollAdjustmentsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Creates new payroll adjustment.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ModificationResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PayrollAdjustmentsCreateBadRequestException
     * @throws Exception\PayrollAdjustmentsCreateConflictException
     */
    public function payrollAdjustmentsCreate(int $tenant, ?Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PayrollAdjustmentsCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Gets payroll adjustment specified by ID.
     *
     * @param int   $id              Format - int64. The ID of payroll adjustment
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var string $employeeType The employee type\
     *             Values: [Technician, Employee]
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PayrollV2PayrollAdjustmentsPayrollAdjustmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PayrollAdjustmentsGetBadRequestException
     * @throws Exception\PayrollAdjustmentsGetNotFoundException
     */
    public function payrollAdjustmentsGet(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PayrollAdjustmentsGet($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Gets a list of payrolls.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var string $employeeType The type of employee\
     *             Values: [Technician, Employee]
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $startedOnOrAfter Format - date-time (as date-time in RFC3339). Return items having start date after certain date/time (in UTC)
     * @var string $endedOnOrBefore Format - date-time (as date-time in RFC3339). Return items having end date before certain date/time (in UTC)
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPayrollV2PayrollsPayrollResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PayrollsGetListBadRequestException
     * @throws Exception\PayrollsGetListConflictException
     */
    public function payrollsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PayrollsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Gets a list of technician payrolls.
     *
     * @param int   $technician      Format - int64. The technician ID
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $startedOnOrAfter Format - date-time (as date-time in RFC3339). Return items having start date after certain date/time (in UTC)
     * @var string $endedOnOrBefore Format - date-time (as date-time in RFC3339). Return items having end date before certain date/time (in UTC)
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPayrollV2PayrollsPayrollResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PayrollsGetTechnicianPayrollsBadRequestException
     * @throws Exception\PayrollsGetTechnicianPayrollsConflictException
     */
    public function payrollsGetTechnicianPayrolls(int $technician, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PayrollsGetTechnicianPayrolls($technician, $tenant, $queryParameters), $fetch);
    }

    /**
     * Gets a list of employee payrolls.
     *
     * @param int   $employee        Format - int64. The employee ID
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $startedOnOrAfter Format - date-time (as date-time in RFC3339). Return items having start date after certain date/time (in UTC)
     * @var string $endedOnOrBefore Format - date-time (as date-time in RFC3339). Return items having end date before certain date/time (in UTC)
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPayrollV2PayrollsPayrollResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PayrollsGetEmployeePayrollsBadRequestException
     * @throws Exception\PayrollsGetEmployeePayrollsConflictException
     */
    public function payrollsGetEmployeePayrolls(int $employee, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PayrollsGetEmployeePayrolls($employee, $tenant, $queryParameters), $fetch);
    }

    /**
     * Gets a list of timesheet codes.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int  $page Format - int32. The logical number of page to return, starting from 1
     * @var int  $pageSize Format - int32. How many records to return (50 by default)
     * @var bool $includeTotal Whether total count should be returned
     *           }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPayrollV2TimesheetCodesTimesheetCodeResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\TimesheetCodesGetListBadRequestException
     */
    public function timesheetCodesGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\TimesheetCodesGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Gets timesheet code specified by ID.
     *
     * @param int    $id     Format - int64. The timesheet code ID
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PayrollV2TimesheetCodesTimesheetCodeResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\TimesheetCodesGetBadRequestException
     * @throws Exception\TimesheetCodesGetNotFoundException
     */
    public function timesheetCodesGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\TimesheetCodesGet($id, $tenant), $fetch);
    }

    /**
     * Gets a list of job timesheets.
     *
     * @param int   $job             format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $technicianId Format - int64. The technician ID
     * @var string $startedOn Format - date-time (as date-time in RFC3339). Return items having dispatch, arrive, cancel or done dates after certain date/time (in UTC)
     * @var string $endedOn Format - date-time (as date-time in RFC3339). Return items having dispatch, arrive, cancel or done dates before certain date/time (in UTC)
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PayrollV2TimesheetsJobTimesheetResponse[]|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\TimesheetsGetJobTimesheetsBadRequestException
     */
    public function timesheetsGetJobTimesheets(int $job, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\TimesheetsGetJobTimesheets($job, $tenant, $queryParameters), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://api.servicetitan.io');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
