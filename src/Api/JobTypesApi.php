<?php
/**
 * JobTypesApi
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Job Planning and Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CompWright\ServiceTitan\ApiException;
use CompWright\ServiceTitan\Configuration;
use CompWright\ServiceTitan\HeaderSelector;
use CompWright\ServiceTitan\ObjectSerializer;

/**
 * JobTypesApi Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JobTypesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation jobTypesCreate
     *
     * Creates a job type
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CreateJobTypeRequest $crm_v2_create_job_type_request crm_v2_create_job_type_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\CrmV2JobTypeResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobTypesCreate($tenant, $crm_v2_create_job_type_request = null)
    {
        list($response) = $this->jobTypesCreateWithHttpInfo($tenant, $crm_v2_create_job_type_request);
        return $response;
    }

    /**
     * Operation jobTypesCreateWithHttpInfo
     *
     * Creates a job type
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CreateJobTypeRequest $crm_v2_create_job_type_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\CrmV2JobTypeResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobTypesCreateWithHttpInfo($tenant, $crm_v2_create_job_type_request = null)
    {
        $request = $this->jobTypesCreateRequest($tenant, $crm_v2_create_job_type_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobTypesCreateAsync
     *
     * Creates a job type
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CreateJobTypeRequest $crm_v2_create_job_type_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobTypesCreateAsync($tenant, $crm_v2_create_job_type_request = null)
    {
        return $this->jobTypesCreateAsyncWithHttpInfo($tenant, $crm_v2_create_job_type_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobTypesCreateAsyncWithHttpInfo
     *
     * Creates a job type
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CreateJobTypeRequest $crm_v2_create_job_type_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobTypesCreateAsyncWithHttpInfo($tenant, $crm_v2_create_job_type_request = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse';
        $request = $this->jobTypesCreateRequest($tenant, $crm_v2_create_job_type_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobTypesCreate'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2CreateJobTypeRequest $crm_v2_create_job_type_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobTypesCreateRequest($tenant, $crm_v2_create_job_type_request = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobTypesCreate'
            );
        }

        $resourcePath = '/jpm/v2/tenant/{tenant}/job-types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($crm_v2_create_job_type_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($crm_v2_create_job_type_request));
            } else {
                $httpBody = $crm_v2_create_job_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobTypesGet
     *
     * Gets a job type by ID
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\CrmV2JobTypeResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobTypesGet($id, $tenant, $external_data_application_guid = null)
    {
        list($response) = $this->jobTypesGetWithHttpInfo($id, $tenant, $external_data_application_guid);
        return $response;
    }

    /**
     * Operation jobTypesGetWithHttpInfo
     *
     * Gets a job type by ID
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\CrmV2JobTypeResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobTypesGetWithHttpInfo($id, $tenant, $external_data_application_guid = null)
    {
        $request = $this->jobTypesGetRequest($id, $tenant, $external_data_application_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobTypesGetAsync
     *
     * Gets a job type by ID
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobTypesGetAsync($id, $tenant, $external_data_application_guid = null)
    {
        return $this->jobTypesGetAsyncWithHttpInfo($id, $tenant, $external_data_application_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobTypesGetAsyncWithHttpInfo
     *
     * Gets a job type by ID
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobTypesGetAsyncWithHttpInfo($id, $tenant, $external_data_application_guid = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse';
        $request = $this->jobTypesGetRequest($id, $tenant, $external_data_application_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobTypesGet'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobTypesGetRequest($id, $tenant, $external_data_application_guid = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobTypesGet'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobTypesGet'
            );
        }

        $resourcePath = '/jpm/v2/tenant/{tenant}/job-types/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($external_data_application_guid !== null) {
            if('form' === 'form' && is_array($external_data_application_guid)) {
                foreach($external_data_application_guid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['externalDataApplicationGuid'] = $external_data_application_guid;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobTypesGetList
     *
     * Gets a list of job types
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $name Filters by job type name (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $order_by Orders results by a field. Supported fields are \&quot;id\&quot;, \&quot;modifiedOn\&quot;, and \&quot;createdOn\&quot; (optional)
     * @param  string $order_by_direction Specifies order direction of results. Supported values are \&quot;asc\&quot;/\&quot;ascending\&quot; and \&quot;desc\&quot;/\&quot;descending\&quot; (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobTypeResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobTypesGetList($tenant, $name = null, $ids = null, $page = null, $page_size = null, $include_total = null, $active = null, $order_by = null, $order_by_direction = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $external_data_application_guid = null)
    {
        list($response) = $this->jobTypesGetListWithHttpInfo($tenant, $name, $ids, $page, $page_size, $include_total, $active, $order_by, $order_by_direction, $created_before, $created_on_or_after, $modified_before, $modified_on_or_after, $external_data_application_guid);
        return $response;
    }

    /**
     * Operation jobTypesGetListWithHttpInfo
     *
     * Gets a list of job types
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $name Filters by job type name (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $order_by Orders results by a field. Supported fields are \&quot;id\&quot;, \&quot;modifiedOn\&quot;, and \&quot;createdOn\&quot; (optional)
     * @param  string $order_by_direction Specifies order direction of results. Supported values are \&quot;asc\&quot;/\&quot;ascending\&quot; and \&quot;desc\&quot;/\&quot;descending\&quot; (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobTypeResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobTypesGetListWithHttpInfo($tenant, $name = null, $ids = null, $page = null, $page_size = null, $include_total = null, $active = null, $order_by = null, $order_by_direction = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $external_data_application_guid = null)
    {
        $request = $this->jobTypesGetListRequest($tenant, $name, $ids, $page, $page_size, $include_total, $active, $order_by, $order_by_direction, $created_before, $created_on_or_after, $modified_before, $modified_on_or_after, $external_data_application_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobTypeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobTypeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobTypeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobTypeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobTypesGetListAsync
     *
     * Gets a list of job types
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $name Filters by job type name (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $order_by Orders results by a field. Supported fields are \&quot;id\&quot;, \&quot;modifiedOn\&quot;, and \&quot;createdOn\&quot; (optional)
     * @param  string $order_by_direction Specifies order direction of results. Supported values are \&quot;asc\&quot;/\&quot;ascending\&quot; and \&quot;desc\&quot;/\&quot;descending\&quot; (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobTypesGetListAsync($tenant, $name = null, $ids = null, $page = null, $page_size = null, $include_total = null, $active = null, $order_by = null, $order_by_direction = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $external_data_application_guid = null)
    {
        return $this->jobTypesGetListAsyncWithHttpInfo($tenant, $name, $ids, $page, $page_size, $include_total, $active, $order_by, $order_by_direction, $created_before, $created_on_or_after, $modified_before, $modified_on_or_after, $external_data_application_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobTypesGetListAsyncWithHttpInfo
     *
     * Gets a list of job types
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $name Filters by job type name (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $order_by Orders results by a field. Supported fields are \&quot;id\&quot;, \&quot;modifiedOn\&quot;, and \&quot;createdOn\&quot; (optional)
     * @param  string $order_by_direction Specifies order direction of results. Supported values are \&quot;asc\&quot;/\&quot;ascending\&quot; and \&quot;desc\&quot;/\&quot;descending\&quot; (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobTypesGetListAsyncWithHttpInfo($tenant, $name = null, $ids = null, $page = null, $page_size = null, $include_total = null, $active = null, $order_by = null, $order_by_direction = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $external_data_application_guid = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2JobTypeResponse';
        $request = $this->jobTypesGetListRequest($tenant, $name, $ids, $page, $page_size, $include_total, $active, $order_by, $order_by_direction, $created_before, $created_on_or_after, $modified_before, $modified_on_or_after, $external_data_application_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobTypesGetList'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $name Filters by job type name (optional)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $order_by Orders results by a field. Supported fields are \&quot;id\&quot;, \&quot;modifiedOn\&quot;, and \&quot;createdOn\&quot; (optional)
     * @param  string $order_by_direction Specifies order direction of results. Supported values are \&quot;asc\&quot;/\&quot;ascending\&quot; and \&quot;desc\&quot;/\&quot;descending\&quot; (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  string $external_data_application_guid Format - guid. If this guid is provided, external data corresponding to this application guid will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobTypesGetListRequest($tenant, $name = null, $ids = null, $page = null, $page_size = null, $include_total = null, $active = null, $order_by = null, $order_by_direction = null, $created_before = null, $created_on_or_after = null, $modified_before = null, $modified_on_or_after = null, $external_data_application_guid = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobTypesGetList'
            );
        }

        $resourcePath = '/jpm/v2/tenant/{tenant}/job-types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($ids !== null) {
            if('form' === 'form' && is_array($ids)) {
                foreach($ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ids'] = $ids;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }
        // query params
        if ($include_total !== null) {
            if('form' === 'form' && is_array($include_total)) {
                foreach($include_total as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeTotal'] = $include_total;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderBy'] = $order_by;
            }
        }
        // query params
        if ($order_by_direction !== null) {
            if('form' === 'form' && is_array($order_by_direction)) {
                foreach($order_by_direction as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderByDirection'] = $order_by_direction;
            }
        }
        // query params
        if ($created_before !== null) {
            if('form' === 'form' && is_array($created_before)) {
                foreach($created_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdBefore'] = $created_before;
            }
        }
        // query params
        if ($created_on_or_after !== null) {
            if('form' === 'form' && is_array($created_on_or_after)) {
                foreach($created_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdOnOrAfter'] = $created_on_or_after;
            }
        }
        // query params
        if ($modified_before !== null) {
            if('form' === 'form' && is_array($modified_before)) {
                foreach($modified_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedBefore'] = $modified_before;
            }
        }
        // query params
        if ($modified_on_or_after !== null) {
            if('form' === 'form' && is_array($modified_on_or_after)) {
                foreach($modified_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedOnOrAfter'] = $modified_on_or_after;
            }
        }
        // query params
        if ($external_data_application_guid !== null) {
            if('form' === 'form' && is_array($external_data_application_guid)) {
                foreach($external_data_application_guid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['externalDataApplicationGuid'] = $external_data_application_guid;
            }
        }


        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jobTypesUpdate
     *
     * Creates a job type
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobTypeRequest $crm_v2_update_job_type_request crm_v2_update_job_type_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\CrmV2JobTypeResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function jobTypesUpdate($id, $tenant, $crm_v2_update_job_type_request = null)
    {
        list($response) = $this->jobTypesUpdateWithHttpInfo($id, $tenant, $crm_v2_update_job_type_request);
        return $response;
    }

    /**
     * Operation jobTypesUpdateWithHttpInfo
     *
     * Creates a job type
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobTypeRequest $crm_v2_update_job_type_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\CrmV2JobTypeResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jobTypesUpdateWithHttpInfo($id, $tenant, $crm_v2_update_job_type_request = null)
    {
        $request = $this->jobTypesUpdateRequest($id, $tenant, $crm_v2_update_job_type_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jobTypesUpdateAsync
     *
     * Creates a job type
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobTypeRequest $crm_v2_update_job_type_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobTypesUpdateAsync($id, $tenant, $crm_v2_update_job_type_request = null)
    {
        return $this->jobTypesUpdateAsyncWithHttpInfo($id, $tenant, $crm_v2_update_job_type_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jobTypesUpdateAsyncWithHttpInfo
     *
     * Creates a job type
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobTypeRequest $crm_v2_update_job_type_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jobTypesUpdateAsyncWithHttpInfo($id, $tenant, $crm_v2_update_job_type_request = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\CrmV2JobTypeResponse';
        $request = $this->jobTypesUpdateRequest($id, $tenant, $crm_v2_update_job_type_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jobTypesUpdate'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\CrmV2UpdateJobTypeRequest $crm_v2_update_job_type_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jobTypesUpdateRequest($id, $tenant, $crm_v2_update_job_type_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling jobTypesUpdate'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling jobTypesUpdate'
            );
        }

        $resourcePath = '/jpm/v2/tenant/{tenant}/job-types/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($crm_v2_update_job_type_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($crm_v2_update_job_type_request));
            } else {
                $httpBody = $crm_v2_update_job_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
