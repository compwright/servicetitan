<?php
/**
 * InvoicesApi
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Accounting
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CompWright\ServiceTitan\ApiException;
use CompWright\ServiceTitan\Configuration;
use CompWright\ServiceTitan\HeaderSelector;
use CompWright\ServiceTitan\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation invoicesCreateAdjustmentInvoice
     *
     * create adjustment invoice
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2AdjustmentInvoiceCreateRequest $accounting_v2_adjustment_invoice_create_request accounting_v2_adjustment_invoice_create_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function invoicesCreateAdjustmentInvoice($tenant, $accounting_v2_adjustment_invoice_create_request = null)
    {
        list($response) = $this->invoicesCreateAdjustmentInvoiceWithHttpInfo($tenant, $accounting_v2_adjustment_invoice_create_request);
        return $response;
    }

    /**
     * Operation invoicesCreateAdjustmentInvoiceWithHttpInfo
     *
     * create adjustment invoice
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2AdjustmentInvoiceCreateRequest $accounting_v2_adjustment_invoice_create_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesCreateAdjustmentInvoiceWithHttpInfo($tenant, $accounting_v2_adjustment_invoice_create_request = null)
    {
        $request = $this->invoicesCreateAdjustmentInvoiceRequest($tenant, $accounting_v2_adjustment_invoice_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesCreateAdjustmentInvoiceAsync
     *
     * create adjustment invoice
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2AdjustmentInvoiceCreateRequest $accounting_v2_adjustment_invoice_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesCreateAdjustmentInvoiceAsync($tenant, $accounting_v2_adjustment_invoice_create_request = null)
    {
        return $this->invoicesCreateAdjustmentInvoiceAsyncWithHttpInfo($tenant, $accounting_v2_adjustment_invoice_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesCreateAdjustmentInvoiceAsyncWithHttpInfo
     *
     * create adjustment invoice
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2AdjustmentInvoiceCreateRequest $accounting_v2_adjustment_invoice_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesCreateAdjustmentInvoiceAsyncWithHttpInfo($tenant, $accounting_v2_adjustment_invoice_create_request = null)
    {
        $returnType = 'int';
        $request = $this->invoicesCreateAdjustmentInvoiceRequest($tenant, $accounting_v2_adjustment_invoice_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesCreateAdjustmentInvoice'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2AdjustmentInvoiceCreateRequest $accounting_v2_adjustment_invoice_create_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesCreateAdjustmentInvoiceRequest($tenant, $accounting_v2_adjustment_invoice_create_request = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling invoicesCreateAdjustmentInvoice'
            );
        }

        $resourcePath = '/accounting/v2/tenant/{tenant}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($accounting_v2_adjustment_invoice_create_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($accounting_v2_adjustment_invoice_create_request));
            } else {
                $httpBody = $accounting_v2_adjustment_invoice_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesDeleteInvoiceItem
     *
     * delete invoice item
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $item_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function invoicesDeleteInvoiceItem($invoice_id, $item_id, $tenant)
    {
        $this->invoicesDeleteInvoiceItemWithHttpInfo($invoice_id, $item_id, $tenant);
    }

    /**
     * Operation invoicesDeleteInvoiceItemWithHttpInfo
     *
     * delete invoice item
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $item_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesDeleteInvoiceItemWithHttpInfo($invoice_id, $item_id, $tenant)
    {
        $request = $this->invoicesDeleteInvoiceItemRequest($invoice_id, $item_id, $tenant);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesDeleteInvoiceItemAsync
     *
     * delete invoice item
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $item_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesDeleteInvoiceItemAsync($invoice_id, $item_id, $tenant)
    {
        return $this->invoicesDeleteInvoiceItemAsyncWithHttpInfo($invoice_id, $item_id, $tenant)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesDeleteInvoiceItemAsyncWithHttpInfo
     *
     * delete invoice item
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $item_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesDeleteInvoiceItemAsyncWithHttpInfo($invoice_id, $item_id, $tenant)
    {
        $returnType = '';
        $request = $this->invoicesDeleteInvoiceItemRequest($invoice_id, $item_id, $tenant);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesDeleteInvoiceItem'
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $item_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesDeleteInvoiceItemRequest($invoice_id, $item_id, $tenant)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesDeleteInvoiceItem'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling invoicesDeleteInvoiceItem'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling invoicesDeleteInvoiceItem'
            );
        }

        $resourcePath = '/accounting/v2/tenant/{tenant}/invoices/{invoiceId}/items/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesGetList
     *
     * Gets a list of invoices
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids ids (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2TransactionStatus[] $statuses statuses (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  OneOfAccountingV2LogicalOperator $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  bool $include_total include_total (optional)
     * @param  int $job_id Format - int64. (optional)
     * @param  string $job_number job_number (optional)
     * @param  int $business_unit_id Format - int64. (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  \DateTime $invoiced_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $invoiced_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  int $adjustment_to_id Format - int64. (optional)
     * @param  string $number number (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  float $total_greater Format - decimal. (optional)
     * @param  float $total_less Format - decimal. (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_direction order_by_direction (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2InvoiceResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function invoicesGetList($tenant, $ids = null, $modified_before = null, $modified_on_or_after = null, $statuses = null, $batch_id = null, $batch_number = null, $page = null, $page_size = null, $custom_field_fields = null, $custom_field_operator = null, $include_total = null, $job_id = null, $job_number = null, $business_unit_id = null, $customer_id = null, $invoiced_on_or_after = null, $invoiced_on_before = null, $adjustment_to_id = null, $number = null, $created_on_or_after = null, $created_before = null, $total_greater = null, $total_less = null, $order_by = null, $order_by_direction = null)
    {
        list($response) = $this->invoicesGetListWithHttpInfo($tenant, $ids, $modified_before, $modified_on_or_after, $statuses, $batch_id, $batch_number, $page, $page_size, $custom_field_fields, $custom_field_operator, $include_total, $job_id, $job_number, $business_unit_id, $customer_id, $invoiced_on_or_after, $invoiced_on_before, $adjustment_to_id, $number, $created_on_or_after, $created_before, $total_greater, $total_less, $order_by, $order_by_direction);
        return $response;
    }

    /**
     * Operation invoicesGetListWithHttpInfo
     *
     * Gets a list of invoices
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2TransactionStatus[] $statuses (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  OneOfAccountingV2LogicalOperator $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  bool $include_total (optional)
     * @param  int $job_id Format - int64. (optional)
     * @param  string $job_number (optional)
     * @param  int $business_unit_id Format - int64. (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  \DateTime $invoiced_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $invoiced_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  int $adjustment_to_id Format - int64. (optional)
     * @param  string $number (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  float $total_greater Format - decimal. (optional)
     * @param  float $total_less Format - decimal. (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_direction (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2InvoiceResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesGetListWithHttpInfo($tenant, $ids = null, $modified_before = null, $modified_on_or_after = null, $statuses = null, $batch_id = null, $batch_number = null, $page = null, $page_size = null, $custom_field_fields = null, $custom_field_operator = null, $include_total = null, $job_id = null, $job_number = null, $business_unit_id = null, $customer_id = null, $invoiced_on_or_after = null, $invoiced_on_before = null, $adjustment_to_id = null, $number = null, $created_on_or_after = null, $created_before = null, $total_greater = null, $total_less = null, $order_by = null, $order_by_direction = null)
    {
        $request = $this->invoicesGetListRequest($tenant, $ids, $modified_before, $modified_on_or_after, $statuses, $batch_id, $batch_number, $page, $page_size, $custom_field_fields, $custom_field_operator, $include_total, $job_id, $job_number, $business_unit_id, $customer_id, $invoiced_on_or_after, $invoiced_on_before, $adjustment_to_id, $number, $created_on_or_after, $created_before, $total_greater, $total_less, $order_by, $order_by_direction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2InvoiceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2InvoiceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2InvoiceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2InvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesGetListAsync
     *
     * Gets a list of invoices
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2TransactionStatus[] $statuses (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  OneOfAccountingV2LogicalOperator $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  bool $include_total (optional)
     * @param  int $job_id Format - int64. (optional)
     * @param  string $job_number (optional)
     * @param  int $business_unit_id Format - int64. (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  \DateTime $invoiced_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $invoiced_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  int $adjustment_to_id Format - int64. (optional)
     * @param  string $number (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  float $total_greater Format - decimal. (optional)
     * @param  float $total_less Format - decimal. (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_direction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetListAsync($tenant, $ids = null, $modified_before = null, $modified_on_or_after = null, $statuses = null, $batch_id = null, $batch_number = null, $page = null, $page_size = null, $custom_field_fields = null, $custom_field_operator = null, $include_total = null, $job_id = null, $job_number = null, $business_unit_id = null, $customer_id = null, $invoiced_on_or_after = null, $invoiced_on_before = null, $adjustment_to_id = null, $number = null, $created_on_or_after = null, $created_before = null, $total_greater = null, $total_less = null, $order_by = null, $order_by_direction = null)
    {
        return $this->invoicesGetListAsyncWithHttpInfo($tenant, $ids, $modified_before, $modified_on_or_after, $statuses, $batch_id, $batch_number, $page, $page_size, $custom_field_fields, $custom_field_operator, $include_total, $job_id, $job_number, $business_unit_id, $customer_id, $invoiced_on_or_after, $invoiced_on_before, $adjustment_to_id, $number, $created_on_or_after, $created_before, $total_greater, $total_less, $order_by, $order_by_direction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesGetListAsyncWithHttpInfo
     *
     * Gets a list of invoices
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2TransactionStatus[] $statuses (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  OneOfAccountingV2LogicalOperator $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  bool $include_total (optional)
     * @param  int $job_id Format - int64. (optional)
     * @param  string $job_number (optional)
     * @param  int $business_unit_id Format - int64. (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  \DateTime $invoiced_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $invoiced_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  int $adjustment_to_id Format - int64. (optional)
     * @param  string $number (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  float $total_greater Format - decimal. (optional)
     * @param  float $total_less Format - decimal. (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_direction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetListAsyncWithHttpInfo($tenant, $ids = null, $modified_before = null, $modified_on_or_after = null, $statuses = null, $batch_id = null, $batch_number = null, $page = null, $page_size = null, $custom_field_fields = null, $custom_field_operator = null, $include_total = null, $job_id = null, $job_number = null, $business_unit_id = null, $customer_id = null, $invoiced_on_or_after = null, $invoiced_on_before = null, $adjustment_to_id = null, $number = null, $created_on_or_after = null, $created_before = null, $total_greater = null, $total_less = null, $order_by = null, $order_by_direction = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfAccountingV2InvoiceResponse';
        $request = $this->invoicesGetListRequest($tenant, $ids, $modified_before, $modified_on_or_after, $statuses, $batch_id, $batch_number, $page, $page_size, $custom_field_fields, $custom_field_operator, $include_total, $job_id, $job_number, $business_unit_id, $customer_id, $invoiced_on_or_after, $invoiced_on_before, $adjustment_to_id, $number, $created_on_or_after, $created_before, $total_greater, $total_less, $order_by, $order_by_direction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesGetList'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2TransactionStatus[] $statuses (optional)
     * @param  int $batch_id Format - int64. (optional)
     * @param  int $batch_number Format - int32. (optional)
     * @param  int $page Format - int32. (optional)
     * @param  int $page_size Format - int32. (optional)
     * @param  array<string,string> $custom_field_fields Name, value (optional)
     * @param  OneOfAccountingV2LogicalOperator $custom_field_operator Can be \&quot;or\&quot; or \&quot;null\&quot; or \&quot;and\&quot;\\ Values: [And, Or] (optional)
     * @param  bool $include_total (optional)
     * @param  int $job_id Format - int64. (optional)
     * @param  string $job_number (optional)
     * @param  int $business_unit_id Format - int64. (optional)
     * @param  int $customer_id Format - int64. (optional)
     * @param  \DateTime $invoiced_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $invoiced_on_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  int $adjustment_to_id Format - int64. (optional)
     * @param  string $number (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). (optional)
     * @param  float $total_greater Format - decimal. (optional)
     * @param  float $total_less Format - decimal. (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_direction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesGetListRequest($tenant, $ids = null, $modified_before = null, $modified_on_or_after = null, $statuses = null, $batch_id = null, $batch_number = null, $page = null, $page_size = null, $custom_field_fields = null, $custom_field_operator = null, $include_total = null, $job_id = null, $job_number = null, $business_unit_id = null, $customer_id = null, $invoiced_on_or_after = null, $invoiced_on_before = null, $adjustment_to_id = null, $number = null, $created_on_or_after = null, $created_before = null, $total_greater = null, $total_less = null, $order_by = null, $order_by_direction = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling invoicesGetList'
            );
        }

        $resourcePath = '/accounting/v2/tenant/{tenant}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ids !== null) {
            if('form' === 'form' && is_array($ids)) {
                foreach($ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ids'] = $ids;
            }
        }
        // query params
        if ($modified_before !== null) {
            if('form' === 'form' && is_array($modified_before)) {
                foreach($modified_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedBefore'] = $modified_before;
            }
        }
        // query params
        if ($modified_on_or_after !== null) {
            if('form' === 'form' && is_array($modified_on_or_after)) {
                foreach($modified_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedOnOrAfter'] = $modified_on_or_after;
            }
        }
        // query params
        if ($statuses !== null) {
            if('form' === 'form' && is_array($statuses)) {
                foreach($statuses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['statuses'] = $statuses;
            }
        }
        // query params
        if ($batch_id !== null) {
            if('form' === 'form' && is_array($batch_id)) {
                foreach($batch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['batchId'] = $batch_id;
            }
        }
        // query params
        if ($batch_number !== null) {
            if('form' === 'form' && is_array($batch_number)) {
                foreach($batch_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['batchNumber'] = $batch_number;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }
        // query params
        if ($custom_field_fields !== null) {
            if('form' === 'form' && is_array($custom_field_fields)) {
                foreach($custom_field_fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customField.Fields'] = $custom_field_fields;
            }
        }
        // query params
        if ($custom_field_operator !== null) {
            if('form' === 'form' && is_array($custom_field_operator)) {
                foreach($custom_field_operator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customField.Operator'] = $custom_field_operator;
            }
        }
        // query params
        if ($include_total !== null) {
            if('form' === 'form' && is_array($include_total)) {
                foreach($include_total as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeTotal'] = $include_total;
            }
        }
        // query params
        if ($job_id !== null) {
            if('form' === 'form' && is_array($job_id)) {
                foreach($job_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobId'] = $job_id;
            }
        }
        // query params
        if ($job_number !== null) {
            if('form' === 'form' && is_array($job_number)) {
                foreach($job_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobNumber'] = $job_number;
            }
        }
        // query params
        if ($business_unit_id !== null) {
            if('form' === 'form' && is_array($business_unit_id)) {
                foreach($business_unit_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['businessUnitId'] = $business_unit_id;
            }
        }
        // query params
        if ($customer_id !== null) {
            if('form' === 'form' && is_array($customer_id)) {
                foreach($customer_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customerId'] = $customer_id;
            }
        }
        // query params
        if ($invoiced_on_or_after !== null) {
            if('form' === 'form' && is_array($invoiced_on_or_after)) {
                foreach($invoiced_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['invoicedOnOrAfter'] = $invoiced_on_or_after;
            }
        }
        // query params
        if ($invoiced_on_before !== null) {
            if('form' === 'form' && is_array($invoiced_on_before)) {
                foreach($invoiced_on_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['invoicedOnBefore'] = $invoiced_on_before;
            }
        }
        // query params
        if ($adjustment_to_id !== null) {
            if('form' === 'form' && is_array($adjustment_to_id)) {
                foreach($adjustment_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['adjustmentToId'] = $adjustment_to_id;
            }
        }
        // query params
        if ($number !== null) {
            if('form' === 'form' && is_array($number)) {
                foreach($number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['number'] = $number;
            }
        }
        // query params
        if ($created_on_or_after !== null) {
            if('form' === 'form' && is_array($created_on_or_after)) {
                foreach($created_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdOnOrAfter'] = $created_on_or_after;
            }
        }
        // query params
        if ($created_before !== null) {
            if('form' === 'form' && is_array($created_before)) {
                foreach($created_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdBefore'] = $created_before;
            }
        }
        // query params
        if ($total_greater !== null) {
            if('form' === 'form' && is_array($total_greater)) {
                foreach($total_greater as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalGreater'] = $total_greater;
            }
        }
        // query params
        if ($total_less !== null) {
            if('form' === 'form' && is_array($total_less)) {
                foreach($total_less as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['totalLess'] = $total_less;
            }
        }
        // query params
        if ($order_by !== null) {
            if('form' === 'form' && is_array($order_by)) {
                foreach($order_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderBy'] = $order_by;
            }
        }
        // query params
        if ($order_by_direction !== null) {
            if('form' === 'form' && is_array($order_by_direction)) {
                foreach($order_by_direction as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderByDirection'] = $order_by_direction;
            }
        }


        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesMarkAsExported
     *
     * mark invoice as exported. Id &#x3D; invoiceId
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateRequest[] $accounting_v2_mark_invoice_as_exported_update_request accounting_v2_mark_invoice_as_exported_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateResponse[]|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function invoicesMarkAsExported($tenant, $accounting_v2_mark_invoice_as_exported_update_request = null)
    {
        list($response) = $this->invoicesMarkAsExportedWithHttpInfo($tenant, $accounting_v2_mark_invoice_as_exported_update_request);
        return $response;
    }

    /**
     * Operation invoicesMarkAsExportedWithHttpInfo
     *
     * mark invoice as exported. Id &#x3D; invoiceId
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateRequest[] $accounting_v2_mark_invoice_as_exported_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateResponse[]|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesMarkAsExportedWithHttpInfo($tenant, $accounting_v2_mark_invoice_as_exported_update_request = null)
    {
        $request = $this->invoicesMarkAsExportedRequest($tenant, $accounting_v2_mark_invoice_as_exported_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesMarkAsExportedAsync
     *
     * mark invoice as exported. Id &#x3D; invoiceId
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateRequest[] $accounting_v2_mark_invoice_as_exported_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesMarkAsExportedAsync($tenant, $accounting_v2_mark_invoice_as_exported_update_request = null)
    {
        return $this->invoicesMarkAsExportedAsyncWithHttpInfo($tenant, $accounting_v2_mark_invoice_as_exported_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesMarkAsExportedAsyncWithHttpInfo
     *
     * mark invoice as exported. Id &#x3D; invoiceId
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateRequest[] $accounting_v2_mark_invoice_as_exported_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesMarkAsExportedAsyncWithHttpInfo($tenant, $accounting_v2_mark_invoice_as_exported_update_request = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateResponse[]';
        $request = $this->invoicesMarkAsExportedRequest($tenant, $accounting_v2_mark_invoice_as_exported_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesMarkAsExported'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2MarkInvoiceAsExportedUpdateRequest[] $accounting_v2_mark_invoice_as_exported_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesMarkAsExportedRequest($tenant, $accounting_v2_mark_invoice_as_exported_update_request = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling invoicesMarkAsExported'
            );
        }

        $resourcePath = '/accounting/v2/tenant/{tenant}/invoices/markasexported';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($accounting_v2_mark_invoice_as_exported_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($accounting_v2_mark_invoice_as_exported_update_request));
            } else {
                $httpBody = $accounting_v2_mark_invoice_as_exported_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesUpdateCustomFields
     *
     * Updates custom fields for specified invoices
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request accounting_v2_custom_field_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function invoicesUpdateCustomFields($tenant, $accounting_v2_custom_field_update_request = null)
    {
        $this->invoicesUpdateCustomFieldsWithHttpInfo($tenant, $accounting_v2_custom_field_update_request);
    }

    /**
     * Operation invoicesUpdateCustomFieldsWithHttpInfo
     *
     * Updates custom fields for specified invoices
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesUpdateCustomFieldsWithHttpInfo($tenant, $accounting_v2_custom_field_update_request = null)
    {
        $request = $this->invoicesUpdateCustomFieldsRequest($tenant, $accounting_v2_custom_field_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesUpdateCustomFieldsAsync
     *
     * Updates custom fields for specified invoices
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUpdateCustomFieldsAsync($tenant, $accounting_v2_custom_field_update_request = null)
    {
        return $this->invoicesUpdateCustomFieldsAsyncWithHttpInfo($tenant, $accounting_v2_custom_field_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesUpdateCustomFieldsAsyncWithHttpInfo
     *
     * Updates custom fields for specified invoices
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUpdateCustomFieldsAsyncWithHttpInfo($tenant, $accounting_v2_custom_field_update_request = null)
    {
        $returnType = '';
        $request = $this->invoicesUpdateCustomFieldsRequest($tenant, $accounting_v2_custom_field_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesUpdateCustomFields'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2CustomFieldUpdateRequest $accounting_v2_custom_field_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesUpdateCustomFieldsRequest($tenant, $accounting_v2_custom_field_update_request = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling invoicesUpdateCustomFields'
            );
        }

        $resourcePath = '/accounting/v2/tenant/{tenant}/invoices/custom-fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($accounting_v2_custom_field_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($accounting_v2_custom_field_update_request));
            } else {
                $httpBody = $accounting_v2_custom_field_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesUpdateInvoice
     *
     * update invoice
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceUpdateRequest $accounting_v2_invoice_update_request accounting_v2_invoice_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function invoicesUpdateInvoice($id, $tenant, $accounting_v2_invoice_update_request = null)
    {
        $this->invoicesUpdateInvoiceWithHttpInfo($id, $tenant, $accounting_v2_invoice_update_request);
    }

    /**
     * Operation invoicesUpdateInvoiceWithHttpInfo
     *
     * update invoice
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceUpdateRequest $accounting_v2_invoice_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesUpdateInvoiceWithHttpInfo($id, $tenant, $accounting_v2_invoice_update_request = null)
    {
        $request = $this->invoicesUpdateInvoiceRequest($id, $tenant, $accounting_v2_invoice_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesUpdateInvoiceAsync
     *
     * update invoice
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceUpdateRequest $accounting_v2_invoice_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUpdateInvoiceAsync($id, $tenant, $accounting_v2_invoice_update_request = null)
    {
        return $this->invoicesUpdateInvoiceAsyncWithHttpInfo($id, $tenant, $accounting_v2_invoice_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesUpdateInvoiceAsyncWithHttpInfo
     *
     * update invoice
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceUpdateRequest $accounting_v2_invoice_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUpdateInvoiceAsyncWithHttpInfo($id, $tenant, $accounting_v2_invoice_update_request = null)
    {
        $returnType = '';
        $request = $this->invoicesUpdateInvoiceRequest($id, $tenant, $accounting_v2_invoice_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesUpdateInvoice'
     *
     * @param  int $id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceUpdateRequest $accounting_v2_invoice_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesUpdateInvoiceRequest($id, $tenant, $accounting_v2_invoice_update_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling invoicesUpdateInvoice'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling invoicesUpdateInvoice'
            );
        }

        $resourcePath = '/accounting/v2/tenant/{tenant}/invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($accounting_v2_invoice_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($accounting_v2_invoice_update_request));
            } else {
                $httpBody = $accounting_v2_invoice_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesUpdateInvoiceItems
     *
     * update invoice items
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemUpdateRequest $accounting_v2_invoice_item_update_request accounting_v2_invoice_item_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function invoicesUpdateInvoiceItems($invoice_id, $tenant, $accounting_v2_invoice_item_update_request = null)
    {
        $this->invoicesUpdateInvoiceItemsWithHttpInfo($invoice_id, $tenant, $accounting_v2_invoice_item_update_request);
    }

    /**
     * Operation invoicesUpdateInvoiceItemsWithHttpInfo
     *
     * update invoice items
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemUpdateRequest $accounting_v2_invoice_item_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesUpdateInvoiceItemsWithHttpInfo($invoice_id, $tenant, $accounting_v2_invoice_item_update_request = null)
    {
        $request = $this->invoicesUpdateInvoiceItemsRequest($invoice_id, $tenant, $accounting_v2_invoice_item_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invoicesUpdateInvoiceItemsAsync
     *
     * update invoice items
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemUpdateRequest $accounting_v2_invoice_item_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUpdateInvoiceItemsAsync($invoice_id, $tenant, $accounting_v2_invoice_item_update_request = null)
    {
        return $this->invoicesUpdateInvoiceItemsAsyncWithHttpInfo($invoice_id, $tenant, $accounting_v2_invoice_item_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesUpdateInvoiceItemsAsyncWithHttpInfo
     *
     * update invoice items
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemUpdateRequest $accounting_v2_invoice_item_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUpdateInvoiceItemsAsyncWithHttpInfo($invoice_id, $tenant, $accounting_v2_invoice_item_update_request = null)
    {
        $returnType = '';
        $request = $this->invoicesUpdateInvoiceItemsRequest($invoice_id, $tenant, $accounting_v2_invoice_item_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesUpdateInvoiceItems'
     *
     * @param  int $invoice_id Format - int64. (required)
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\AccountingV2InvoiceItemUpdateRequest $accounting_v2_invoice_item_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesUpdateInvoiceItemsRequest($invoice_id, $tenant, $accounting_v2_invoice_item_update_request = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesUpdateInvoiceItems'
            );
        }
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling invoicesUpdateInvoiceItems'
            );
        }

        $resourcePath = '/accounting/v2/tenant/{tenant}/invoices/{invoiceId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($accounting_v2_invoice_item_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($accounting_v2_invoice_item_update_request));
            } else {
                $httpBody = $accounting_v2_invoice_item_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
