<?php
/**
 * AdjustmentsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inventory
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Jonathon Hill, CompWright Enterprises LLC (https://compwright.com)
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CompWright\ServiceTitan\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CompWright\ServiceTitan\ApiException;
use CompWright\ServiceTitan\Configuration;
use CompWright\ServiceTitan\HeaderSelector;
use CompWright\ServiceTitan\ObjectSerializer;

/**
 * AdjustmentsApi Class Doc Comment
 *
 * @category Class
 * @package  CompWright\ServiceTitan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdjustmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adjustmentsGet
     *
     * Get a list of inventory adjustments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $number Number filter (optional)
     * @param  string $reference_number Reference number filter (optional)
     * @param  int $batch_id Format - int64. BatchId filter (optional)
     * @param  string $inventory_location_ids Filter by a collection of inventory location Ids (optional)
     * @param  string $adjustment_types Filter by a collection of adjustment types (optional)
     * @param  string $business_unit_ids Filter by a collection of business unit Ids (optional)
     * @param  string $sync_statuses Filter by a collection of sync statues (optional)
     * @param  array<string,string> $custom_fields_fields Collection of custom field pairs (name, value) to filter by (optional)
     * @param  OneOfInventoryV2LogicalOperator $custom_fields_operator Can be \&quot;Or\&quot; or \&quot;And\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $date_on_or_after Format - date-time (as date-time in RFC3339). Return adjustments with date on or after certain date/time (optional)
     * @param  \DateTime $date_before Format - date-time (as date-time in RFC3339). Return adjustments with date before certain date/time (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2InventoryAdjustmentResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse
     */
    public function adjustmentsGet($tenant, $ids = null, $active = null, $number = null, $reference_number = null, $batch_id = null, $inventory_location_ids = null, $adjustment_types = null, $business_unit_ids = null, $sync_statuses = null, $custom_fields_fields = null, $custom_fields_operator = null, $date_on_or_after = null, $date_before = null, $created_on_or_after = null, $created_before = null, $modified_on_or_after = null, $modified_before = null, $page = null, $page_size = null, $include_total = null)
    {
        list($response) = $this->adjustmentsGetWithHttpInfo($tenant, $ids, $active, $number, $reference_number, $batch_id, $inventory_location_ids, $adjustment_types, $business_unit_ids, $sync_statuses, $custom_fields_fields, $custom_fields_operator, $date_on_or_after, $date_before, $created_on_or_after, $created_before, $modified_on_or_after, $modified_before, $page, $page_size, $include_total);
        return $response;
    }

    /**
     * Operation adjustmentsGetWithHttpInfo
     *
     * Get a list of inventory adjustments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $number Number filter (optional)
     * @param  string $reference_number Reference number filter (optional)
     * @param  int $batch_id Format - int64. BatchId filter (optional)
     * @param  string $inventory_location_ids Filter by a collection of inventory location Ids (optional)
     * @param  string $adjustment_types Filter by a collection of adjustment types (optional)
     * @param  string $business_unit_ids Filter by a collection of business unit Ids (optional)
     * @param  string $sync_statuses Filter by a collection of sync statues (optional)
     * @param  array<string,string> $custom_fields_fields Collection of custom field pairs (name, value) to filter by (optional)
     * @param  OneOfInventoryV2LogicalOperator $custom_fields_operator Can be \&quot;Or\&quot; or \&quot;And\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $date_on_or_after Format - date-time (as date-time in RFC3339). Return adjustments with date on or after certain date/time (optional)
     * @param  \DateTime $date_before Format - date-time (as date-time in RFC3339). Return adjustments with date before certain date/time (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2InventoryAdjustmentResponse|\CompWright\ServiceTitan\Model\ApiErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustmentsGetWithHttpInfo($tenant, $ids = null, $active = null, $number = null, $reference_number = null, $batch_id = null, $inventory_location_ids = null, $adjustment_types = null, $business_unit_ids = null, $sync_statuses = null, $custom_fields_fields = null, $custom_fields_operator = null, $date_on_or_after = null, $date_before = null, $created_on_or_after = null, $created_before = null, $modified_on_or_after = null, $modified_before = null, $page = null, $page_size = null, $include_total = null)
    {
        $request = $this->adjustmentsGetRequest($tenant, $ids, $active, $number, $reference_number, $batch_id, $inventory_location_ids, $adjustment_types, $business_unit_ids, $sync_statuses, $custom_fields_fields, $custom_fields_operator, $date_on_or_after, $date_before, $created_on_or_after, $created_before, $modified_on_or_after, $modified_before, $page, $page_size, $include_total);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2InventoryAdjustmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2InventoryAdjustmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\CompWright\ServiceTitan\Model\ApiErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CompWright\ServiceTitan\Model\ApiErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2InventoryAdjustmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2InventoryAdjustmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustmentsGetAsync
     *
     * Get a list of inventory adjustments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $number Number filter (optional)
     * @param  string $reference_number Reference number filter (optional)
     * @param  int $batch_id Format - int64. BatchId filter (optional)
     * @param  string $inventory_location_ids Filter by a collection of inventory location Ids (optional)
     * @param  string $adjustment_types Filter by a collection of adjustment types (optional)
     * @param  string $business_unit_ids Filter by a collection of business unit Ids (optional)
     * @param  string $sync_statuses Filter by a collection of sync statues (optional)
     * @param  array<string,string> $custom_fields_fields Collection of custom field pairs (name, value) to filter by (optional)
     * @param  OneOfInventoryV2LogicalOperator $custom_fields_operator Can be \&quot;Or\&quot; or \&quot;And\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $date_on_or_after Format - date-time (as date-time in RFC3339). Return adjustments with date on or after certain date/time (optional)
     * @param  \DateTime $date_before Format - date-time (as date-time in RFC3339). Return adjustments with date before certain date/time (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustmentsGetAsync($tenant, $ids = null, $active = null, $number = null, $reference_number = null, $batch_id = null, $inventory_location_ids = null, $adjustment_types = null, $business_unit_ids = null, $sync_statuses = null, $custom_fields_fields = null, $custom_fields_operator = null, $date_on_or_after = null, $date_before = null, $created_on_or_after = null, $created_before = null, $modified_on_or_after = null, $modified_before = null, $page = null, $page_size = null, $include_total = null)
    {
        return $this->adjustmentsGetAsyncWithHttpInfo($tenant, $ids, $active, $number, $reference_number, $batch_id, $inventory_location_ids, $adjustment_types, $business_unit_ids, $sync_statuses, $custom_fields_fields, $custom_fields_operator, $date_on_or_after, $date_before, $created_on_or_after, $created_before, $modified_on_or_after, $modified_before, $page, $page_size, $include_total)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustmentsGetAsyncWithHttpInfo
     *
     * Get a list of inventory adjustments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $number Number filter (optional)
     * @param  string $reference_number Reference number filter (optional)
     * @param  int $batch_id Format - int64. BatchId filter (optional)
     * @param  string $inventory_location_ids Filter by a collection of inventory location Ids (optional)
     * @param  string $adjustment_types Filter by a collection of adjustment types (optional)
     * @param  string $business_unit_ids Filter by a collection of business unit Ids (optional)
     * @param  string $sync_statuses Filter by a collection of sync statues (optional)
     * @param  array<string,string> $custom_fields_fields Collection of custom field pairs (name, value) to filter by (optional)
     * @param  OneOfInventoryV2LogicalOperator $custom_fields_operator Can be \&quot;Or\&quot; or \&quot;And\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $date_on_or_after Format - date-time (as date-time in RFC3339). Return adjustments with date on or after certain date/time (optional)
     * @param  \DateTime $date_before Format - date-time (as date-time in RFC3339). Return adjustments with date before certain date/time (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustmentsGetAsyncWithHttpInfo($tenant, $ids = null, $active = null, $number = null, $reference_number = null, $batch_id = null, $inventory_location_ids = null, $adjustment_types = null, $business_unit_ids = null, $sync_statuses = null, $custom_fields_fields = null, $custom_fields_operator = null, $date_on_or_after = null, $date_before = null, $created_on_or_after = null, $created_before = null, $modified_on_or_after = null, $modified_before = null, $page = null, $page_size = null, $include_total = null)
    {
        $returnType = '\CompWright\ServiceTitan\Model\PaginatedResponseOfInventoryV2InventoryAdjustmentResponse';
        $request = $this->adjustmentsGetRequest($tenant, $ids, $active, $number, $reference_number, $batch_id, $inventory_location_ids, $adjustment_types, $business_unit_ids, $sync_statuses, $custom_fields_fields, $custom_fields_operator, $date_on_or_after, $date_before, $created_on_or_after, $created_before, $modified_on_or_after, $modified_before, $page, $page_size, $include_total);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustmentsGet'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  string $ids Perform lookup by multiple IDs (maximum 50) (optional)
     * @param  OneOfActiveQueryFilter $active What kind of items should be returned (only active items will be returned by default)\\ Values: [True, Any, False] (optional)
     * @param  string $number Number filter (optional)
     * @param  string $reference_number Reference number filter (optional)
     * @param  int $batch_id Format - int64. BatchId filter (optional)
     * @param  string $inventory_location_ids Filter by a collection of inventory location Ids (optional)
     * @param  string $adjustment_types Filter by a collection of adjustment types (optional)
     * @param  string $business_unit_ids Filter by a collection of business unit Ids (optional)
     * @param  string $sync_statuses Filter by a collection of sync statues (optional)
     * @param  array<string,string> $custom_fields_fields Collection of custom field pairs (name, value) to filter by (optional)
     * @param  OneOfInventoryV2LogicalOperator $custom_fields_operator Can be \&quot;Or\&quot; or \&quot;And\&quot;\\ Values: [And, Or] (optional)
     * @param  \DateTime $date_on_or_after Format - date-time (as date-time in RFC3339). Return adjustments with date on or after certain date/time (optional)
     * @param  \DateTime $date_before Format - date-time (as date-time in RFC3339). Return adjustments with date before certain date/time (optional)
     * @param  \DateTime $created_on_or_after Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $created_before Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_on_or_after Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC) (optional)
     * @param  \DateTime $modified_before Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC) (optional)
     * @param  int $page Format - int32. The logical number of page to return, starting from 1 (optional)
     * @param  int $page_size Format - int32. How many records to return (50 by default) (optional)
     * @param  bool $include_total Whether total count should be returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustmentsGetRequest($tenant, $ids = null, $active = null, $number = null, $reference_number = null, $batch_id = null, $inventory_location_ids = null, $adjustment_types = null, $business_unit_ids = null, $sync_statuses = null, $custom_fields_fields = null, $custom_fields_operator = null, $date_on_or_after = null, $date_before = null, $created_on_or_after = null, $created_before = null, $modified_on_or_after = null, $modified_before = null, $page = null, $page_size = null, $include_total = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling adjustmentsGet'
            );
        }

        $resourcePath = '/tenant/{tenant}/adjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ids !== null) {
            if('form' === 'form' && is_array($ids)) {
                foreach($ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ids'] = $ids;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($number !== null) {
            if('form' === 'form' && is_array($number)) {
                foreach($number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['number'] = $number;
            }
        }
        // query params
        if ($reference_number !== null) {
            if('form' === 'form' && is_array($reference_number)) {
                foreach($reference_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['referenceNumber'] = $reference_number;
            }
        }
        // query params
        if ($batch_id !== null) {
            if('form' === 'form' && is_array($batch_id)) {
                foreach($batch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['batchId'] = $batch_id;
            }
        }
        // query params
        if ($inventory_location_ids !== null) {
            if('form' === 'form' && is_array($inventory_location_ids)) {
                foreach($inventory_location_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['inventoryLocationIds'] = $inventory_location_ids;
            }
        }
        // query params
        if ($adjustment_types !== null) {
            if('form' === 'form' && is_array($adjustment_types)) {
                foreach($adjustment_types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['adjustmentTypes'] = $adjustment_types;
            }
        }
        // query params
        if ($business_unit_ids !== null) {
            if('form' === 'form' && is_array($business_unit_ids)) {
                foreach($business_unit_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['businessUnitIds'] = $business_unit_ids;
            }
        }
        // query params
        if ($sync_statuses !== null) {
            if('form' === 'form' && is_array($sync_statuses)) {
                foreach($sync_statuses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['syncStatuses'] = $sync_statuses;
            }
        }
        // query params
        if ($custom_fields_fields !== null) {
            if('form' === 'form' && is_array($custom_fields_fields)) {
                foreach($custom_fields_fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customFields.Fields'] = $custom_fields_fields;
            }
        }
        // query params
        if ($custom_fields_operator !== null) {
            if('form' === 'form' && is_array($custom_fields_operator)) {
                foreach($custom_fields_operator as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customFields.Operator'] = $custom_fields_operator;
            }
        }
        // query params
        if ($date_on_or_after !== null) {
            if('form' === 'form' && is_array($date_on_or_after)) {
                foreach($date_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateOnOrAfter'] = $date_on_or_after;
            }
        }
        // query params
        if ($date_before !== null) {
            if('form' === 'form' && is_array($date_before)) {
                foreach($date_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateBefore'] = $date_before;
            }
        }
        // query params
        if ($created_on_or_after !== null) {
            if('form' === 'form' && is_array($created_on_or_after)) {
                foreach($created_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdOnOrAfter'] = $created_on_or_after;
            }
        }
        // query params
        if ($created_before !== null) {
            if('form' === 'form' && is_array($created_before)) {
                foreach($created_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['createdBefore'] = $created_before;
            }
        }
        // query params
        if ($modified_on_or_after !== null) {
            if('form' === 'form' && is_array($modified_on_or_after)) {
                foreach($modified_on_or_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedOnOrAfter'] = $modified_on_or_after;
            }
        }
        // query params
        if ($modified_before !== null) {
            if('form' === 'form' && is_array($modified_before)) {
                foreach($modified_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedBefore'] = $modified_before;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }
        // query params
        if ($include_total !== null) {
            if('form' === 'form' && is_array($include_total)) {
                foreach($include_total as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeTotal'] = $include_total;
            }
        }


        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustmentsUpdateCustomFields
     *
     * Update custom fields on adjustments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\InventoryV2CustomFieldUpdateRequest $inventory_v2_custom_field_update_request inventory_v2_custom_field_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adjustmentsUpdateCustomFields($tenant, $inventory_v2_custom_field_update_request = null)
    {
        $this->adjustmentsUpdateCustomFieldsWithHttpInfo($tenant, $inventory_v2_custom_field_update_request);
    }

    /**
     * Operation adjustmentsUpdateCustomFieldsWithHttpInfo
     *
     * Update custom fields on adjustments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\InventoryV2CustomFieldUpdateRequest $inventory_v2_custom_field_update_request (optional)
     *
     * @throws \CompWright\ServiceTitan\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustmentsUpdateCustomFieldsWithHttpInfo($tenant, $inventory_v2_custom_field_update_request = null)
    {
        $request = $this->adjustmentsUpdateCustomFieldsRequest($tenant, $inventory_v2_custom_field_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CompWright\ServiceTitan\Model\ApiErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustmentsUpdateCustomFieldsAsync
     *
     * Update custom fields on adjustments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\InventoryV2CustomFieldUpdateRequest $inventory_v2_custom_field_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustmentsUpdateCustomFieldsAsync($tenant, $inventory_v2_custom_field_update_request = null)
    {
        return $this->adjustmentsUpdateCustomFieldsAsyncWithHttpInfo($tenant, $inventory_v2_custom_field_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustmentsUpdateCustomFieldsAsyncWithHttpInfo
     *
     * Update custom fields on adjustments
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\InventoryV2CustomFieldUpdateRequest $inventory_v2_custom_field_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustmentsUpdateCustomFieldsAsyncWithHttpInfo($tenant, $inventory_v2_custom_field_update_request = null)
    {
        $returnType = '';
        $request = $this->adjustmentsUpdateCustomFieldsRequest($tenant, $inventory_v2_custom_field_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustmentsUpdateCustomFields'
     *
     * @param  int $tenant Tenant ID (required)
     * @param  \CompWright\ServiceTitan\Model\InventoryV2CustomFieldUpdateRequest $inventory_v2_custom_field_update_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustmentsUpdateCustomFieldsRequest($tenant, $inventory_v2_custom_field_update_request = null)
    {
        // verify the required parameter 'tenant' is set
        if ($tenant === null || (is_array($tenant) && count($tenant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant when calling adjustmentsUpdateCustomFields'
            );
        }

        $resourcePath = '/tenant/{tenant}/adjustments/custom-fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant' . '}',
                ObjectSerializer::toPathValue($tenant),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inventory_v2_custom_field_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inventory_v2_custom_field_update_request));
            } else {
                $httpBody = $inventory_v2_custom_field_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ST-App-Key');
        if ($apiKey !== null) {
            $headers['ST-App-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('servicetitanapplicationkey');
        if ($apiKey !== null) {
            $queryParams['servicetitanapplicationkey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
