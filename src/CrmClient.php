<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan;

class CrmClient extends \CompWright\ServiceTitan\Runtime\Client\Client
{
    /**
     * Gets a booking by ID.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2BookingResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsGet($id, $tenant), $fetch);
    }

    /**
     * Gets a list of bookings.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var string $ids Perform lookup by multiple IDs (maximum 50)
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     *     @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     *     @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     *     @var string $externalId Filters by booking's external ID
     *     @var string $sort Applies sorting by the specified field:\
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetListBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2BookingResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Get a list of contacts for a booking.
     *
     * @param int   $id              format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetContactListBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetContactListNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2BookingContactResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsGetContactList(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsGetContactList($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Gets a booking by ID for a booking provider.
     *
     * @param int    $bookingProvider format - int64
     * @param int    $id              format - int64
     * @param int    $tenant          Tenant ID
     * @param string $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetForProviderBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetForProviderNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2BookingResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsGetForProvider(int $bookingProvider, int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsGetForProvider($bookingProvider, $id, $tenant), $fetch);
    }

    /**
     * Updates a booking for a booking provider.
     *
     * @param int                                                           $bookingProvider format - int64
     * @param int                                                           $id              format - int64
     * @param int                                                           $tenant          Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2UpdateBookingRequest|null $requestBody
     * @param string                                                        $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsUpdateBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsUpdateNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\BookingsUpdateConflictException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2BookingResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsUpdate(int $bookingProvider, int $id, int $tenant, ?Model\CrmV2UpdateBookingRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsUpdate($bookingProvider, $id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of bookings for a booking provider.
     *
     * @param int   $bookingProvider format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var string $ids Perform lookup by multiple IDs (maximum 50)
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     *     @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     *     @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     *     @var string $externalId Filters by booking's external ID
     *     @var string $sort Applies sorting by the specified field:\
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetList2BadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2BookingResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsGetList2(int $bookingProvider, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsGetList2($bookingProvider, $tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a booking for a booking provider.
     *
     * @param int                                                           $bookingProvider format - int64
     * @param int                                                           $tenant          Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2CreateBookingRequest|null $requestBody
     * @param string                                                        $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsCreateBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2BookingResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsCreate(int $bookingProvider, int $tenant, ?Model\CrmV2CreateBookingRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsCreate($bookingProvider, $tenant, $requestBody), $fetch);
    }

    /**
     * Get a list of contacts for a booking for a booking provider.
     *
     * @param int   $bookingProvider format - int64
     * @param int   $id              format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetContactList2BadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsGetContactList2NotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2BookingContactResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsGetContactList2(int $bookingProvider, int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsGetContactList2($bookingProvider, $id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a contact on the specified booking for a booking provider.
     *
     * @param int                                                           $bookingProvider format - int64
     * @param int                                                           $id              format - int64
     * @param int                                                           $tenant          Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2ContactCreateRequest|null $requestBody
     * @param string                                                        $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsCreateContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsCreateContactNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2BookingContactResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsCreateContact(int $bookingProvider, int $id, int $tenant, ?Model\CrmV2ContactCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsCreateContact($bookingProvider, $id, $tenant, $requestBody), $fetch);
    }

    /**
     * Removes a contact from a booking for a booking provider.
     *
     * @param int    $bookingProvider format - int64
     * @param int    $id              format - int64
     * @param int    $contactId       format - int64
     * @param int    $tenant          Tenant ID
     * @param string $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsDeleteContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsDeleteContactNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsDeleteContact(int $bookingProvider, int $id, int $contactId, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsDeleteContact($bookingProvider, $id, $contactId, $tenant), $fetch);
    }

    /**
     * Updates a single booking contact for a booking provider.
     *
     * @param int                                                                  $bookingProvider format - int64
     * @param int                                                                  $id              format - int64
     * @param int                                                                  $contactId       format - int64
     * @param int                                                                  $tenant          Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2UpdateBookingContactRequest|null $requestBody
     * @param string                                                               $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BookingsUpdateBookingContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BookingsUpdateBookingContactNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\BookingsUpdateBookingContactConflictException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2UpdateBookingContactRequest|\Psr\Http\Message\ResponseInterface|null
     */
    public function bookingsUpdateBookingContact(int $bookingProvider, int $id, int $contactId, int $tenant, ?Model\CrmV2UpdateBookingContactRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BookingsUpdateBookingContact($bookingProvider, $id, $contactId, $tenant, $requestBody), $fetch);
    }

    /**
     * Remove multiple tags to more than 1 customer.
     *
     * @param int                                                            $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2RemoveBulkTagsRequest|null $requestBody
     * @param string                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BulkTagsRemoveTagsBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BulkTagsRemoveTagsConflictException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function bulkTagsRemoveTags(int $tenant, ?Model\CrmV2RemoveBulkTagsRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BulkTagsRemoveTags($tenant, $requestBody), $fetch);
    }

    /**
     * Add multiple tags to more than 1 customer.
     *
     * @param int                                                         $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2AddBulkTagsRequest|null $requestBody
     * @param string                                                      $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\BulkTagsAddTagsBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\BulkTagsAddTagsConflictException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function bulkTagsAddTags(int $tenant, ?Model\CrmV2AddBulkTagsRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\BulkTagsAddTags($tenant, $requestBody), $fetch);
    }

    /**
     * Gets a Customer specified by ID.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2CustomersCustomerResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersGet($id, $tenant), $fetch);
    }

    /**
     * Update a customer.
     *
     * @param int                                                                     $id          format - int64
     * @param int                                                                     $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2CustomersUpdateCustomerRequest|null $requestBody
     * @param string                                                                  $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersUpdateBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersUpdateNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2CustomersCustomerResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersUpdate(int $id, int $tenant, ?Model\CrmV2CustomersUpdateCustomerRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of Customers.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     *     @var string $sort Applies sorting by the specified field:\
     *     @var string $ids returns specific customer records by customer ID
     *     @var string $createdBefore Format - date-time (as date-time in RFC3339). Returns customer records created before the requested date (in UTC)
     *     @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Returns customer records created on or after the requested date (in UTC)
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Returns customer records modified before the requested date (in UTC)
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Returns customer records modified after the requested date (in UTC)
     *     @var string $name returns customer records by name
     *     @var string $street returns customer records by street
     *     @var string $unit returns customer records by unit
     *     @var string $city returns customer records by city
     *     @var string $state returns customer records by state
     *     @var string $zip returns customer records by zip
     *     @var string $country returns customer records by country
     *     @var float $latitude Format - double. Returns customer records by latitude.
     *     @var float $longitude Format - double. Returns customer records by longitude.
     *     @var string $phone returns customer records by phone number of contacts
     *     @var string $active Returns customer records by active status. only active items will be returned by default.\
    Values: [True, Any, False]
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetListBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CustomersCustomerResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a New Customer.
     *
     * @param int                                                                     $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2CustomersCreateCustomerRequest|null $requestBody
     * @param string                                                                  $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersCreateBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2CustomersCreatedCustomerResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersCreate(int $tenant, ?Model\CrmV2CustomersCreateCustomerRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of notes for a customer.
     *
     * @param int   $id              format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetNotesBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetNotesNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersGetNotes(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersGetNotes($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a New Note.
     *
     * @param int                                                                $id          format - int64
     * @param int                                                                $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2CreateCustomerNoteRequest|null $requestBody
     * @param string                                                             $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersCreateNoteBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersCreateNoteNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2NoteResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersCreateNote(int $id, int $tenant, ?Model\CrmV2CreateCustomerNoteRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersCreateNote($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of contacts for the specified customer.
     *
     * @param int   $id              format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page format - int32
     *     @var int $pageSize format - int32
     *     @var bool $includeTotal
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetContactsListBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetContactsListNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetContactsListConflictException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CustomersCustomerContactWithModifiedOnResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersGetContactsList(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersGetContactsList($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a contact on the customer.
     *
     * @param int                                                                            $id          format - int64
     * @param int                                                                            $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2CustomersCreateCustomerContactRequest|null $requestBody
     * @param string                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersCreateContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersCreateContactNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\CustomersCreateContactConflictException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2CustomersCustomerContactWithModifiedOnResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersCreateContact(int $id, int $tenant, ?Model\CrmV2CustomersCreateCustomerContactRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersCreateContact($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Removes a contact from a customer.
     *
     * @param int    $id        format - int64
     * @param int    $contactId format - int64
     * @param int    $tenant    Tenant ID
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersDeleteContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersDeleteContactNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\CustomersDeleteContactConflictException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function customersDeleteContact(int $id, int $contactId, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersDeleteContact($id, $contactId, $tenant), $fetch);
    }

    /**
     * Updates a contact on the customer.
     *
     * @param int                                                                            $id          format - int64
     * @param int                                                                            $contactId   format - int64
     * @param int                                                                            $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2CustomersUpdateCustomerContactRequest|null $requestBody
     * @param string                                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersUpdateContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersUpdateContactNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\CustomersUpdateContactConflictException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2CustomersCustomerContactWithModifiedOnResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersUpdateContact(int $id, int $contactId, int $tenant, ?Model\CrmV2CustomersUpdateCustomerContactRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersUpdateContact($id, $contactId, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of contacts and customers for a specific modified-on date range. Either modifiedOn or modifiedOnOrAfter parameter must be specified.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC). Either modifiedBefore or modifiedOnOrAfter parameter must be specified
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on/after certain date/time (in UTC). Either modifiedBefore or modifiedOnOrAfter parameter must be specified
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetModifiedContactsListBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\CustomersGetModifiedContactsListNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2CustomersCustomerContactWithModifiedOnAndCustomerIdResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function customersGetModifiedContactsList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\CustomersGetModifiedContactsList($tenant, $queryParameters), $fetch);
    }

    /**
     * Gets a lead specified by ID.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsGetBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LeadsGetNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LeadResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function leadsGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LeadsGet($id, $tenant), $fetch);
    }

    /**
     * Updates a lead.
     *
     * @param int                                                        $id          format - int64
     * @param int                                                        $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2LeadUpdateRequest|null $requestBody
     * @param string                                                     $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsUpdateBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LeadResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function leadsUpdate(int $id, int $tenant, ?Model\CrmV2LeadUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LeadsUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of leads.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     *     @var string $ids Perform lookup by multiple IDs (maximum 50)
     *     @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     *     @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     *     @var int $customerId Format - int64. Filters by associated customer
     *     @var bool $isProspect Allows to filter leads where the customer doesn't have a job, or there is no customer.
     *     @var bool $withoutCustomer Allows to filter leads that don't have a customer or location record associated to it.
     *     @var string $status Filters by status\
     *     @var string $customerCity Filters by customer city
     *     @var string $customerState Filters by customer state
     *     @var string $customerZip Filters by customer zip
     *     @var string $customerCreatedOnOrAfter Format - date-time (as date-time in RFC3339). Returns customers who were created on or before a certain date/time (in UTC)
     *     @var string $customerCreatedBefore Format - date-time (as date-time in RFC3339). Returns customers who were created after a certain date/time (in UTC)
     *     @var string $customerModifiedOnOrAfter Format - date-time (as date-time in RFC3339). Returns customers who were modified on or before a certain date/time (in UTC)
     *     @var string $sort Applies sorting by the specified field:\
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsGetListBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2LeadResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function leadsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LeadsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a lead.
     *
     * @param int                                                        $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2LeadCreateRequest|null $requestBody
     * @param string                                                     $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsCreateBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LeadResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function leadsCreate(int $tenant, ?Model\CrmV2LeadCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LeadsCreate($tenant, $requestBody), $fetch);
    }

    /**
     * @param int                                                            $id          format - int64
     * @param int                                                            $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2CreateFollowUpRequest|null $requestBody
     * @param string                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsCreateFollowUpBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2FollowUpResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function leadsCreateFollowUp(int $id, int $tenant, ?Model\CrmV2CreateFollowUpRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LeadsCreateFollowUp($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets notes for a lead.
     *
     * @param int   $id              format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsGetNotesBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LeadsGetNotesNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function leadsGetNotes(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LeadsGetNotes($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a note on the specified lead.
     *
     * @param int                                                            $id          format - int64
     * @param int                                                            $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2LeadNoteCreateRequest|null $requestBody
     * @param string                                                         $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsCreateNoteBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LeadsCreateNoteNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2NoteResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function leadsCreateNote(int $id, int $tenant, ?Model\CrmV2LeadNoteCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LeadsCreateNote($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Dismisses a lead specified by ID.
     *
     * @param int                                                         $id          format - int64
     * @param int                                                         $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2DismissLeadRequest|null $requestBody
     * @param string                                                      $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LeadsDismissBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LeadsDismissNotFoundException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function leadsDismiss(int $id, int $tenant, ?Model\CrmV2DismissLeadRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LeadsDismiss($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a location specified by ID.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LocationsLocationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsGet($id, $tenant), $fetch);
    }

    /**
     * Updates a location.
     *
     * @param int                                                                     $id          format - int64
     * @param int                                                                     $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2LocationsUpdateLocationRequest|null $requestBody
     * @param string                                                                  $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsUpdateBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsUpdateNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\LocationsUpdateConflictException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LocationsLocationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsUpdate(int $id, int $tenant, ?Model\CrmV2LocationsUpdateLocationRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of locations.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var string $ids Perform lookup by multiple IDs (maximum 50)
     *     @var string $name Filters by customer's name
     *     @var int $customerId Format - int64. Filters by customer ID
     *     @var string $street Filters by customer's street
     *     @var string $unit Filters by customer's unit
     *     @var string $city Filters by customer's city
     *     @var string $state Filters by customer's state
     *     @var string $zip Filters by customer's zip
     *     @var string $country Filters by customer's country
     *     @var float $latitude Format - double. Filters by customer's latitude
     *     @var float $longitude Format - double. Filters by customer's longitude
     *     @var string $active What kind of items should be returned (only active items will be returned by default)\
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     *     @var string $sort Applies sorting by the specified field:\
     *     @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     *     @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetListBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2LocationsLocationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a new location.
     *
     * @param int                                                                     $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2LocationsCreateLocationRequest|null $requestBody
     * @param string                                                                  $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsCreateBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsCreateConflictException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LocationsCreateLocationResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsCreate(int $tenant, ?Model\CrmV2LocationsCreateLocationRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of notes on the specified location.
     *
     * @param int   $id              format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetLocationNotesBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetLocationNotesNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2NoteResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsGetLocationNotes(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsGetLocationNotes($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a note on the specified location.
     *
     * @param int                                                                $id          format - int64
     * @param int                                                                $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2LocationNoteCreateRequest|null $requestBody
     * @param string                                                             $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsCreateNoteBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsCreateNoteNotFoundException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2NoteResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsCreateNote(int $id, int $tenant, ?Model\CrmV2LocationNoteCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsCreateNote($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of contacts for the specified location.
     *
     * @param int   $id              format - int64
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetContactsListBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetContactsListNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetContactsListConflictException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2LocationContactResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsGetContactsList(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsGetContactsList($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Creates a contact on the location.
     *
     * @param int                                                                   $id          format - int64
     * @param int                                                                   $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2LocationContactCreateRequest|null $requestBody
     * @param string                                                                $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsCreateContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsCreateContactNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\LocationsCreateContactConflictException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LocationContactResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsCreateContact(int $id, int $tenant, ?Model\CrmV2LocationContactCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsCreateContact($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of contacts for locations. Either modifiedOn or modifiedOnOrAfter parameter must be specified.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     *     @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC). Either modifiedBefore or modifiedOnOrAfter parameter must be specified
     *     @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on/after certain date/time (in UTC). Either modifiedBefore or modifiedOnOrAfter parameter must be specified
     *     @var int $page Format - int32. The logical number of page to return, starting from 1
     *     @var int $pageSize Format - int32. How many records to return (50 by default)
     *     @var bool $includeTotal Whether total count should be returned
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsGetLocationsContactsListBadRequestException
     *
     * @return \CompWright\ServiceTitan\Model\PaginatedResponseOfCrmV2LocationsContactResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsGetLocationsContactsList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsGetLocationsContactsList($tenant, $queryParameters), $fetch);
    }

    /**
     * Removes a contact from a location.
     *
     * @param int    $id        format - int64
     * @param int    $contactId format - int64
     * @param int    $tenant    Tenant ID
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsDeleteContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsDeleteContactNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\LocationsDeleteContactConflictException
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function locationsDeleteContact(int $id, int $contactId, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsDeleteContact($id, $contactId, $tenant), $fetch);
    }

    /**
     * Updates a contact on the location.
     *
     * @param int                                                                   $id          format - int64
     * @param int                                                                   $contactId   format - int64
     * @param int                                                                   $tenant      Tenant ID
     * @param \CompWright\ServiceTitan\Model\CrmV2LocationContactUpdateRequest|null $requestBody
     * @param string                                                                $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \CompWright\ServiceTitan\Exception\LocationsUpdateContactBadRequestException
     * @throws \CompWright\ServiceTitan\Exception\LocationsUpdateContactNotFoundException
     * @throws \CompWright\ServiceTitan\Exception\LocationsUpdateContactConflictException
     *
     * @return \CompWright\ServiceTitan\Model\CrmV2LocationContactResponse|\Psr\Http\Message\ResponseInterface|null
     */
    public function locationsUpdateContact(int $id, int $contactId, int $tenant, ?Model\CrmV2LocationContactUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \CompWright\ServiceTitan\Endpoint\LocationsUpdateContact($id, $contactId, $tenant, $requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUrlFactory()->createUri('https://api.servicetitan.io');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new \CompWright\ServiceTitan\Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
