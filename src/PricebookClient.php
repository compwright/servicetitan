<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan;

class PricebookClient extends Runtime\Client\Client
{
    /**
     * GET the categories in your pricebook.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $sort Applies sorting by specified fields
     * @var string $categoryType Values: [Services, Materials]
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPricebookV2CategoryResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CategoriesGetListBadRequestException
     */
    public function categoriesGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CategoriesGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Post to add a new category to your pricebook.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2CategoryResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CategoriesCreateBadRequestException
     */
    public function categoriesCreate(int $tenant, ?Model\PricebookV2CategoryCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CategoriesCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Deletes an existing category from your pricebook.
     *
     * @param int    $id     Format - int64. Id of the SKU you are deleting
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CategoriesDeleteBadRequestException
     * @throws Exception\CategoriesDeleteNotFoundException
     */
    public function categoriesDelete(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CategoriesDelete($id, $tenant), $fetch);
    }

    /**
     * Gets category details.
     *
     * @param int    $id     Format - int64. The id of the service you are requesting
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2CategoryResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CategoriesGetBadRequestException
     * @throws Exception\CategoriesGetNotFoundException
     */
    public function categoriesGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CategoriesGet($id, $tenant), $fetch);
    }

    /**
     * Edits an existing category in your pricebook.
     *
     * @param int    $id     Format - int64. Unique id for the SKU is modified
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2CategoryResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CategoriesUpdateBadRequestException
     * @throws Exception\CategoriesUpdateNotFoundException
     */
    public function categoriesUpdate(int $id, int $tenant, ?Model\PricebookV2CategoryUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CategoriesUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Get data on all of the discounts or fees in the pricebook.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $sort Applies sorting by the specified field:\
     *             "?sort=+FieldName" for ascending order,\
     *             "?sort=-FieldName" for descending order.\
     *             \
     *             Available fields are: Id, Code, DisplayName, CreatedOn, ModifiedOn, Price, MemberPrice, AddOnPrice, AddOnMemberPrice, MaterialsCost, PrimaryVendor, Cost, Manufacturer, Priority.
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     * @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     * @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     * @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     * @var string $active What kind of items should be returned (only active items will be returned by default)\
     *             Values: [True, Any, False]
     * @var string $externalDataApplicationGuid Format - guid. Items that are created with a specific guid, could be fetched/updated/removed
     *             only when the same application guid is provided
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPricebookV2DiscountAndFeesResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DiscountAndFeesGetListBadRequestException
     */
    public function discountAndFeesGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DiscountAndFeesGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Post to add a new discount or fee to your pricebook.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2DiscountAndFeesResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DiscountAndFeesCreateBadRequestException
     */
    public function discountAndFeesCreate(int $tenant, ?Model\PricebookV2DiscountAndFeesCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DiscountAndFeesCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Deletes a discount or fee from your pricebook.
     *
     * @param int    $id     Format - int64. Id of the SKU you are deleting
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DiscountAndFeesDeleteBadRequestException
     * @throws Exception\DiscountAndFeesDeleteNotFoundException
     */
    public function discountAndFeesDelete(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DiscountAndFeesDelete($id, $tenant), $fetch);
    }

    /**
     * Get details if a discount or fees in the pricebook.
     *
     * @param int   $id              Format - int64. The id of the discount and fee you are requesting
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var string $externalDataApplicationGuid Format - guid. Items that are created with a specific guid, could be fetched/updated/removed
     *             only when the same application guid is provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2DiscountAndFeesResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DiscountAndFeesGetBadRequestException
     * @throws Exception\DiscountAndFeesGetNotFoundException
     */
    public function discountAndFeesGet(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DiscountAndFeesGet($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Edit an existing item in your pricebook.
     *
     * @param int    $id     Format - int64. Unique id for the SKU is modified
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2DiscountAndFeesResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DiscountAndFeesUpdateBadRequestException
     * @throws Exception\DiscountAndFeesUpdateNotFoundException
     */
    public function discountAndFeesUpdate(int $id, int $tenant, ?Model\PricebookV2DiscountAndFeesUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DiscountAndFeesUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Get data on all of the equipment in the pricebook.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $sort Applies sorting by the specified field:\
     *             "?sort=+FieldName" for ascending order,\
     *             "?sort=-FieldName" for descending order.\
     *             \
     *             Available fields are: Id, Code, DisplayName, CreatedOn, ModifiedOn, Price, MemberPrice, AddOnPrice, AddOnMemberPrice, MaterialsCost, PrimaryVendor, Cost, Manufacturer, Priority.
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     * @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     * @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     * @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     * @var string $active What kind of items should be returned (only active items will be returned by default)\
     *             Values: [True, Any, False]
     * @var string $externalDataApplicationGuid Format - guid. Items that are created with a specific guid, could be fetched/updated/removed
     *             only when the same application guid is provided
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPricebookV2EquipmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\EquipmentGetListBadRequestException
     */
    public function equipmentGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\EquipmentGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Post to add a new equipment to your pricebook.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2EquipmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\EquipmentCreateBadRequestException
     */
    public function equipmentCreate(int $tenant, ?Model\PricebookV2EquipmentCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\EquipmentCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Deletes an equipment from your pricebook.
     *
     * @param int    $id     Format - int64. Id of the SKU you are deleting
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\EquipmentDeleteBadRequestException
     * @throws Exception\EquipmentDeleteNotFoundException
     */
    public function equipmentDelete(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\EquipmentDelete($id, $tenant), $fetch);
    }

    /**
     * Get details a equipment in the pricebook.
     *
     * @param int   $id              Format - int64. The id of the equipment you are requesting
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var string $externalDataApplicationGuid Format - guid. Items that are created with a specific guid, could be fetched/updated/removed
     *             only when the same application guid is provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2EquipmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\EquipmentGetBadRequestException
     * @throws Exception\EquipmentGetNotFoundException
     */
    public function equipmentGet(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\EquipmentGet($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Edit an existing item in your pricebook.
     *
     * @param int    $id     Format - int64. Unique id for the SKU is modified
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2EquipmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\EquipmentUpdateBadRequestException
     * @throws Exception\EquipmentUpdateNotFoundException
     */
    public function equipmentUpdate(int $id, int $tenant, ?Model\PricebookV2EquipmentUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\EquipmentUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Get details on materials in the pricebook.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $sort Applies sorting by the specified field:\
     *             "?sort=+FieldName" for ascending order,\
     *             "?sort=-FieldName" for descending order.\
     *             \
     *             Available fields are: Id, Code, DisplayName, CreatedOn, ModifiedOn, Price, MemberPrice, AddOnPrice, AddOnMemberPrice, MaterialsCost, PrimaryVendor, Cost, Manufacturer, Priority.
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     * @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     * @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     * @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     * @var string $active What kind of items should be returned (only active items will be returned by default)\
     *             Values: [True, Any, False]
     * @var string $externalDataApplicationGuid Format - guid. Items that are created with a specific guid, could be fetched/updated/removed
     *             only when the same application guid is provided
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPricebookV2MaterialResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\MaterialsGetListBadRequestException
     */
    public function materialsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\MaterialsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Add a new Materials to your pricebook.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2MaterialResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\MaterialsCreateBadRequestException
     */
    public function materialsCreate(int $tenant, ?Model\PricebookV2MaterialCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\MaterialsCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Deletes a material from your pricebook.
     *
     * @param int    $id     Format - int64. Id of the SKU you are deleting
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\MaterialsDeleteBadRequestException
     * @throws Exception\MaterialsDeleteNotFoundException
     */
    public function materialsDelete(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\MaterialsDelete($id, $tenant), $fetch);
    }

    /**
     * Get details on a material in the pricebook.
     *
     * @param int   $id              Format - int64. The id of the material you are requesting
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var string $externalDataApplicationGuid Format - guid. Items that are created with a specific guid, could be fetched/updated/removed
     *             only when the same application guid is provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2MaterialResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\MaterialsGetBadRequestException
     * @throws Exception\MaterialsGetNotFoundException
     */
    public function materialsGet(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\MaterialsGet($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Edit an existing item in your pricebook.
     *
     * @param int    $id     Format - int64. Unique id for the SKU is modified
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2MaterialResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\MaterialsUpdateBadRequestException
     * @throws Exception\MaterialsUpdateNotFoundException
     */
    public function materialsUpdate(int $id, int $tenant, ?Model\PricebookV2MaterialUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\MaterialsUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PricebookBulkUpdateBadRequestException
     */
    public function pricebookBulkUpdate(int $tenant, ?Model\PricebookV2PricebookBulkUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PricebookBulkUpdate($tenant, $requestBody), $fetch);
    }

    /**
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2PricebookBulkCreateResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PricebookBulkCreateBadRequestException
     */
    public function pricebookBulkCreate(int $tenant, ?Model\PricebookV2PricebookBulkCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PricebookBulkCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Get data on all of the services in the pricebook.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $sort Applies sorting by the specified field:\
     *             "?sort=+FieldName" for ascending order,\
     *             "?sort=-FieldName" for descending order.\
     *             \
     *             Available fields are: Id, Code, DisplayName, CreatedOn, ModifiedOn, Price, MemberPrice, AddOnPrice, AddOnMemberPrice, MaterialsCost, PrimaryVendor, Cost, Manufacturer, Priority.
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     * @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     * @var string $modifiedBefore Format - date-time (as date-time in RFC3339). Return items modified before certain date/time (in UTC)
     * @var string $modifiedOnOrAfter Format - date-time (as date-time in RFC3339). Return items modified on or after certain date/time (in UTC)
     * @var string $active What kind of items should be returned (only active items will be returned by default)\
     *             Values: [True, Any, False]
     * @var string $externalDataApplicationGuid Format - guid. Items that are created with a specific guid, could be fetched/updated/removed
     *             only when the same application guid is provided
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfPricebookV2ServiceResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ServicesGetListBadRequestException
     */
    public function servicesGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ServicesGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Post to add a new service to your pricebook.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2ServiceResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ServicesCreateBadRequestException
     */
    public function servicesCreate(int $tenant, ?Model\PricebookV2ServiceCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ServicesCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Deletes a service from your pricebook.
     *
     * @param int    $id     Format - int64. Id of the SKU you are deleting
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ServicesDeleteBadRequestException
     * @throws Exception\ServicesDeleteNotFoundException
     */
    public function servicesDelete(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ServicesDelete($id, $tenant), $fetch);
    }

    /**
     * Get details a service in the pricebook.
     *
     * @param int   $id              Format - int64. The id of the service you are requesting
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var string $externalDataApplicationGuid Format - guid. Items that are created with a specific guid, could be fetched/updated/removed
     *             only when the same application guid is provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2ServiceResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ServicesGetBadRequestException
     * @throws Exception\ServicesGetNotFoundException
     */
    public function servicesGet(int $id, int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ServicesGet($id, $tenant, $queryParameters), $fetch);
    }

    /**
     * Edit an existing item in your pricebook.
     *
     * @param int    $id     Format - int64. Unique id for the SKU is modified
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricebookV2ServiceResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ServicesUpdateBadRequestException
     * @throws Exception\ServicesUpdateNotFoundException
     */
    public function servicesUpdate(int $id, int $tenant, ?Model\PricebookV2ServiceUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ServicesUpdate($id, $tenant, $requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://api.servicetitan.io');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
