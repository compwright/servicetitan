<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CompWright\ServiceTitan;

class DispatchClient extends Runtime\Client\Client
{
    /**
     * Creates new gps ping.
     *
     * @param int                                         $tenant      Tenant ID
     * @param Model\DispatchV2GpsPingCreateRequest[]|null $requestBody
     * @param string                                      $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DispatchV2GpsPingResponse[]|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GpsCreateBadRequestException
     */
    public function gpsCreate(string $gpsProvider, int $tenant, ?array $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GpsCreate($gpsProvider, $tenant, $requestBody), $fetch);
    }

    /**
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DispatchV2CapacityResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CapacityGetListBadRequestException
     */
    public function capacityGetList(int $tenant, ?Model\DispatchV2CapacityQueryFilter $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CapacityGetList($tenant, $requestBody), $fetch);
    }

    /**
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DispatchV2GetNonJobAppointmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\NonJobAppointmentsGetBadRequestException
     */
    public function nonJobAppointmentsGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\NonJobAppointmentsGet($id, $tenant), $fetch);
    }

    /**
     * Update an existed non-job appointment.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DispatchV2GetNonJobAppointmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\NonJobAppointmentsUpdateBadRequestException
     * @throws Exception\NonJobAppointmentsUpdateConflictException
     */
    public function nonJobAppointmentsUpdate(int $id, int $tenant, ?Model\DispatchV2NonJobAppointmentUpdateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\NonJobAppointmentsUpdate($id, $tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of non-job appointments.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $technicianId Format - int64. Unique id of the technician this non-job appointment applies to
     * @var string $startsOnOrAfter Format - date-time (as date-time in RFC3339). When the Start of non-job appointment should be at or after
     * @var string $startsOnOrBefore Format - date-time (as date-time in RFC3339). When the Start of non-job appointment should be at or before
     * @var int    $timesheetCodeId Format - int64. Unique Id of timesheet code must apply to
     * @var bool   $activeOnly Whether the result should contains only active non-job appointments
     * @var string $createdOnOrAfter Format - date-time (as date-time in RFC3339). Return items created on or after certain date/time (in UTC)
     * @var string $createdBefore Format - date-time (as date-time in RFC3339). Return items created before certain date/time (in UTC)
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfDispatchV2NonJobAppointmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\NonJobAppointmentsGetListBadRequestException
     */
    public function nonJobAppointmentsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\NonJobAppointmentsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Create a new non-job appointment.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DispatchV2GetNonJobAppointmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\NonJobAppointmentsCreateBadRequestException
     */
    public function nonJobAppointmentsCreate(int $tenant, ?Model\DispatchV2NonJobAppointmentCreateRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\NonJobAppointmentsCreate($tenant, $requestBody), $fetch);
    }

    /**
     * Gets a list of technician shifts.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var string $startsOnOrAfter Format - date-time (as date-time in RFC3339). When the Start of shift should be at or after
     * @var string $endsOnOrBefore Format - date-time (as date-time in RFC3339). When the End of shift should be at or before
     * @var string $shiftType Value to match ShiftType to\
     *             Values: [Normal, OnCall, TimeOff]
     * @var int    $technicianId Format - int64. Unique Id of technician shift must apply to
     * @var string $titleContains Text that must appear in the Title
     * @var string $noteContains Text that must appear in the Note
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfDispatchV2TechnicianShiftResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\TechnicianShiftsGetListBadRequestException
     */
    public function technicianShiftsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\TechnicianShiftsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Gets a specific technician shift.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DispatchV2TechnicianShiftResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\TechnicianShiftsGetBadRequestException
     * @throws Exception\TechnicianShiftsGetNotFoundException
     */
    public function technicianShiftsGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\TechnicianShiftsGet($id, $tenant), $fetch);
    }

    /**
     * Gets a list of zones.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int  $page Format - int32. The logical number of page to return, starting from 1
     * @var int  $pageSize Format - int32. How many records to return (50 by default)
     * @var bool $includeTotal Whether total count should be returned
     *           }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfDispatchV2ZoneResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ZoneGetListBadRequestException
     */
    public function zoneGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ZoneGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Gets a specific zone.
     *
     * @param int    $id     format - int64
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DispatchV2ZoneResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ZoneGetBadRequestException
     * @throws Exception\ZoneGetNotFoundException
     */
    public function zoneGet(int $id, int $tenant, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ZoneGet($id, $tenant), $fetch);
    }

    /**
     * Gets a list of appointment assignments.
     *
     * @param int   $tenant          Tenant ID
     * @param array $queryParameters {
     *
     * @var int    $page Format - int32. The logical number of page to return, starting from 1
     * @var int    $pageSize Format - int32. How many records to return (50 by default)
     * @var bool   $includeTotal Whether total count should be returned
     * @var string $ids Perform lookup by multiple IDs (maximum 50)
     * @var string $appointmentIds Return appointment assignments for one or more appointments
     * @var int    $jobId Format - int64. Return appointment assignments for a single job
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PaginatedResponseOfCrmV2AppointmentAssignmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\AppointmentAssignmentsGetListBadRequestException
     */
    public function appointmentAssignmentsGetList(int $tenant, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\AppointmentAssignmentsGetList($tenant, $queryParameters), $fetch);
    }

    /**
     * Assigns the list of technicians to the appointment.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\CrmV2AppointmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\AppointmentAssignmentsAssignTechniciansBadRequestException
     * @throws Exception\AppointmentAssignmentsAssignTechniciansConflictException
     */
    public function appointmentAssignmentsAssignTechnicians(int $tenant, ?Model\CrmV2AssignTechniciansRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\AppointmentAssignmentsAssignTechnicians($tenant, $requestBody), $fetch);
    }

    /**
     * Unassigns the list of technicians from the appointment.
     *
     * @param int    $tenant Tenant ID
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\CrmV2AppointmentResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\AppointmentAssignmentsUnassignTechniciansBadRequestException
     */
    public function appointmentAssignmentsUnassignTechnicians(int $tenant, ?Model\CrmV2UnassignTechniciansRequest $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\AppointmentAssignmentsUnassignTechnicians($tenant, $requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://api.servicetitan.io');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
